var PHYSICS_DAMPING = 0.1;
var PUSH_STRENGTH = 1E3;
var isNeedFpsMeter = false;
var isLevelEditor = false;
var isNeedDebugGui = false;
var isDebugGuiOpened = true;
var isSkipMenus = false;
var isSkipReadyWin = false;
var autoLevelToLoad = 2;
var isLastLevelLoad = false;
var isDisableWin = false;
var isOpenAllLevels = false;
var openedLevels = 40;
var isPhysicsDebugDraw = false;
var isGetAllProperties = false;
var isLoadAnimFromJSON = true;
var isSkipSplash = false;
var isShowLogo = true;
var isLevelSelectShow = false;
var isAchievGalleryShow = false;
var isLevelCompleteMenuShow = false;
var spriteScale = 1;
var isWithCache = false;
var isTimerUpdateMode = false;
var isPageLeaved = false;
var isNeedHelperLabel = !true;
var isDesktopBrowser = false;
var isLowGfx = false;
var isDesignerSettingsPreferred = true;
var STORAGE_PREFIX = "ZombieMarket_128";
var isMobileOnlyResize = false;
var gameFieldScale = 1;
var isCheatVersion = false;
var SPONSOR_URL = "http://www.a10.com";
var PRELOADER_LOGO = "logo_spele.png";
var BUYER_TYPE = 0;
var ZOMBIE_TYPE = 1;
var DECOR_BALK_1_TYPE = 21;
var DECOR_BALK_2_TYPE = 22;
var DECOR_BALK_3_TYPE = 23;
var DECOR_BALK_4_TYPE = 24;
var DECOR_BALK_5_TYPE = 25;
var DECOR_LAND_TYPE = 26;
var DECOR_HOUSE_TYPE = 27;
var DECOR_KUST_TYPE = 28;
var DECOR_ZABOR_TYPE = 29;
var DECOR_MELNICA_TYPE = 30;
var DECOR_MELNICA_ROT_TYPE = 31;
var DECOR_ARROW_TYPE = 32;
var DECOR_HOUSE_2_TYPE = 33;
var DECOR_COW_TYPE = 34;
var DECOR_CIRCUS_TYPE = 35;
var DECOR_HOUSE_3_TYPE = 36;
var DECOR_HOUSE_4_TYPE = 37;
var DECOR_BALK_6_TYPE = 38;
var DECOR_WINDOW_TYPE = 39;
var DECOR_CAT_1_TYPE = 40;
var DECOR_CAT_2_TYPE = 41;
var DECOR_GRAM_TYPE = 42;
var DECOR_PICT_1_TYPE = 43;
var DECOR_FLOWER_1_TYPE = 44;
var DECOR_VENT_TYPE = 45;
var DECOR_ELECTR_TYPE = 46;
var DECOR_DOOR_TYPE = 47;
var DECOR_PICT_2_TYPE = 48;
var DECOR_SVECHA_TYPE = 49;
var DECOR_TABLE_TYPE = 50;
var DECOR_STUL_TYPE = 51;
var DECOR_PICT_3_TYPE = 52;
var DECOR_VESHALKA_TYPE = 53;
var DECOR_VELO_TYPE = 54;
var DECOR_COVER_TYPE = 55;
var DECOR_BALK_7_TYPE = 56;
var DECOR_HELP_1_TYPE = 57;
var DECOR_HELP_2_TYPE = 58;
var DECOR_HELP_3_TYPE = 59;
var DECOR_HELP_4_TYPE = 60;
var DECOR_HELP_5_TYPE = 61;
var PHYSICS_RECT_TYPE = 100;
var DYNAMIC_BOX_TYPE = 101;
var TELEPORT_TYPE = 102;
var BOMB_TYPE = 103;
var DANGER_TYPE = 104;
var PHYSICS_MAN_BLOCK_TYPE = 105;
var PHYSICS_WOMAN_BLOCK_TYPE = 106;
var GLASS_BLOCK_TYPE = 107;
var ACTIVATOR_TYPE = 108;
var DOOR_TYPE = 109;
var DYNAMIC_CIRCLE_TYPE = 110;
var DYNAMIC_RECT_TYPE = 111;
var TELEGA_TYPE = 112;
var DYNAMIC_TRIANGLE_TYPE = 113;
var MOVABLE_BALK_TYPE = 114;
var FAN_TYPE = 115;
var GLASS_BOX_TYPE = 116;
var GLASS_TRIANGLE_TYPE = 117;
var HARD_BOX_TYPE = 118;
var HARD_RECT_TYPE = 119;
var HARD_TRIANGLE_TYPE = 120;
var STATIC_BALK_1_TYPE = 121;
var LAND_TYPE = 122;
var STATIC_BOX_TYPE = 123;
var STATIC_BALK_2_TYPE = 124;
var DYNAMIC_RECT_2_TYPE = 125;
var DYNAMIC_ANGLE_TYPE = 126;
var ELECTRO_DANGER_TYPE = 127;
var BUSH_DANGER_TYPE = 128;
var STAIRS_DANGER_TYPE = 129;
var TABLE_1_TYPE = 130;
var TABLE_2_TYPE = 131;
var TABLE_3_TYPE = 132;
var TABLE_4_TYPE = 133;
var TABLE_5_TYPE = 134;
var SPIKE_TYPE = 135;
var TRAP_TYPE = 136;
var BANANA_TYPE = 137;
var INVISIBLE_TYPE = 138;
var CATCHED_HERO_TYPE = 139;
var DECOR_SCREAMER_TYPE = 140;
var BUTTON_TYPE = 141;
var DOOR_REMOTE_TYPE = 142;
var BONUS_DIAMOND_TYPE = 201;
var BONUS_MONEY_TYPE = 202;
var BONUS_STAR_TYPE = 203;
var BONUS_GHOST_TYPE = 204;
var AIM_TYPE = 301;
var JOINT_PIVOT_TYPE = 400;
var STATIC_CATEGORY = 1;
var WOMAN_CATEGORY = 2;
var MAN_CATEGORY = 4;
var WOMAN_BLOCK_CATEGORY = 8;
var MAN_BLOCK_CATEGORY = 16;
var FAN_ACTIV_DISTANCE = 130;
var FAN_MAX_FORCE = 40;
var GLASS_BREAK_VELOCITY = 150;
var TELEPORT_OUT_STRENGHT = 80;
this.createjs = this.createjs || {};
(function() {
  var Event = function(type, bubbles, cancelable) {
    this.initialize(type, bubbles, cancelable)
  };
  var p = Event.prototype;
  p.type = null;
  p.target = null;
  p.currentTarget = null;
  p.eventPhase = 0;
  p.bubbles = false;
  p.cancelable = false;
  p.timeStamp = 0;
  p.defaultPrevented = false;
  p.propagationStopped = false;
  p.immediatePropagationStopped = false;
  p.removed = false;
  p.initialize = function(type, bubbles, cancelable) {
    this.type = type;
    this.bubbles = bubbles;
    this.cancelable = cancelable;
    this.timeStamp = (new Date).getTime()
  };
  p.preventDefault = function() {
    this.defaultPrevented = true
  };
  p.stopPropagation = function() {
    this.propagationStopped = true
  };
  p.stopImmediatePropagation = function() {
    this.immediatePropagationStopped = this.propagationStopped = true
  };
  p.remove = function() {
    this.removed = true
  };
  p.clone = function() {
    return new Event(this.type, this.bubbles, this.cancelable)
  };
  p.toString = function() {
    return"[Event (type=" + this.type + ")]"
  };
  createjs.Event = Event
})();
this.createjs = this.createjs || {};
(function() {
  var EventDispatcher = function() {
  };
  var p = EventDispatcher.prototype;
  EventDispatcher.initialize = function(target) {
    target.addEventListener = p.addEventListener;
    target.on = p.on;
    target.removeEventListener = target.off = p.removeEventListener;
    target.removeAllEventListeners = p.removeAllEventListeners;
    target.hasEventListener = p.hasEventListener;
    target.dispatchEvent = p.dispatchEvent;
    target._dispatchEvent = p._dispatchEvent
  };
  p._listeners = null;
  p._captureListeners = null;
  p.initialize = function() {
  };
  p.addEventListener = function(type, listener, useCapture) {
    var listeners;
    if(useCapture) {
      listeners = this._captureListeners = this._captureListeners || {}
    }else {
      listeners = this._listeners = this._listeners || {}
    }
    var arr = listeners[type];
    if(arr) {
      this.removeEventListener(type, listener, useCapture)
    }
    arr = listeners[type];
    if(!arr) {
      listeners[type] = [listener]
    }else {
      arr.push(listener)
    }
    return listener
  };
  p.on = function(type, listener, scope, once, data, useCapture) {
    if(listener.handleEvent) {
      scope = scope || listener;
      listener = listener.handleEvent
    }
    scope = scope || this;
    return this.addEventListener(type, function(evt) {
      listener.call(scope, evt, data);
      once && evt.remove()
    }, useCapture)
  };
  p.removeEventListener = function(type, listener, useCapture) {
    var listeners = useCapture ? this._captureListeners : this._listeners;
    if(!listeners) {
      return
    }
    var arr = listeners[type];
    if(!arr) {
      return
    }
    for(var i = 0, l = arr.length;i < l;i++) {
      if(arr[i] == listener) {
        if(l == 1) {
          delete listeners[type]
        }else {
          arr.splice(i, 1)
        }
        break
      }
    }
  };
  p.off = p.removeEventListener;
  p.removeAllEventListeners = function(type) {
    if(!type) {
      this._listeners = this._captureListeners = null
    }else {
      if(this._listeners) {
        delete this._listeners[type]
      }
      if(this._captureListeners) {
        delete this._captureListeners[type]
      }
    }
  };
  p.dispatchEvent = function(eventObj, target) {
    if(typeof eventObj == "string") {
      var listeners = this._listeners;
      if(!listeners || !listeners[eventObj]) {
        return false
      }
      eventObj = new createjs.Event(eventObj)
    }
    eventObj.target = target || this;
    if(!eventObj.bubbles || !this.parent) {
      this._dispatchEvent(eventObj, 2)
    }else {
      var top = this, list = [top];
      while(top.parent) {
        list.push(top = top.parent)
      }
      var i, l = list.length;
      for(i = l - 1;i >= 0 && !eventObj.propagationStopped;i--) {
        list[i]._dispatchEvent(eventObj, 1 + (i == 0))
      }
      for(i = 1;i < l && !eventObj.propagationStopped;i++) {
        list[i]._dispatchEvent(eventObj, 3)
      }
    }
    return eventObj.defaultPrevented
  };
  p.hasEventListener = function(type) {
    var listeners = this._listeners, captureListeners = this._captureListeners;
    return!!(listeners && listeners[type] || captureListeners && captureListeners[type])
  };
  p.toString = function() {
    return"[EventDispatcher]"
  };
  p._dispatchEvent = function(eventObj, eventPhase) {
    var l, listeners = eventPhase == 1 ? this._captureListeners : this._listeners;
    if(eventObj && listeners) {
      var arr = listeners[eventObj.type];
      if(!arr || !(l = arr.length)) {
        return
      }
      eventObj.currentTarget = this;
      eventObj.eventPhase = eventPhase;
      eventObj.removed = false;
      arr = arr.slice();
      for(var i = 0;i < l && !eventObj.immediatePropagationStopped;i++) {
        var o = arr[i];
        if(o.handleEvent) {
          o.handleEvent(eventObj)
        }else {
          o(eventObj)
        }
        if(eventObj.removed) {
          this.off(eventObj.type, o, eventPhase == 1);
          eventObj.removed = false
        }
      }
    }
  };
  createjs.EventDispatcher = EventDispatcher
})();
this.createjs = this.createjs || {};
(function() {
  createjs.indexOf = function(array, searchElement) {
    for(var i = 0, l = array.length;i < l;i++) {
      if(searchElement === array[i]) {
        return i
      }
    }
    return-1
  }
})();
this.createjs = this.createjs || {};
(function() {
  var UID = function() {
    throw"UID cannot be instantiated";
  };
  UID._nextID = 0;
  UID.get = function() {
    return UID._nextID++
  };
  createjs.UID = UID
})();
this.createjs = this.createjs || {};
(function() {
  var Ticker = function() {
    throw"Ticker cannot be instantiated.";
  };
  Ticker.RAF_SYNCHED = "synched";
  Ticker.RAF = "raf";
  Ticker.TIMEOUT = "timeout";
  Ticker.useRAF = false;
  Ticker.timingMode = null;
  Ticker.maxDelta = 60;
  Ticker.removeEventListener = null;
  Ticker.removeAllEventListeners = null;
  Ticker.dispatchEvent = null;
  Ticker.hasEventListener = null;
  Ticker._listeners = null;
  createjs.EventDispatcher.initialize(Ticker);
  Ticker._addEventListener = Ticker.addEventListener;
  Ticker.addEventListener = function() {
    !Ticker._inited && Ticker.init();
    return Ticker._addEventListener.apply(Ticker, arguments)
  };
  Ticker._paused = false;
  Ticker._inited = false;
  Ticker._startTime = 0;
  Ticker._pausedTime = 0;
  Ticker._ticks = 0;
  Ticker._pausedTicks = 0;
  Ticker._interval = 50;
  Ticker._lastTime = 0;
  Ticker._times = [];
  Ticker._tickTimes = [];
  Ticker._timerId = null;
  Ticker._raf = true;
  Ticker._isFirstInit = true;
  Ticker.init = function() {
    if(Ticker._inited) {
      return
    }
    Ticker._timerId = null;
    Ticker._inited = true;
    Ticker._isFirstInit = false;
    Ticker._times = [];
    Ticker._tickTimes = [];
    Ticker._startTime = Ticker._getTime();
    Ticker._times.push(Ticker._lastTime = 0);
    Ticker.setInterval(Ticker._interval)
  };
  Ticker.reset = function() {
    Ticker._inited = false;
    if(Ticker._raf) {
      var f = window.cancelAnimationFrame || (window.webkitCancelAnimationFrame || (window.mozCancelAnimationFrame || (window.oCancelAnimationFrame || window.msCancelAnimationFrame)));
      f && f(Ticker._timerId)
    }else {
      clearTimeout(Ticker._timerId)
    }
  };
  Ticker.setInterval = function(interval) {
    Ticker._interval = interval;
    if(!Ticker._inited) {
      return
    }
    Ticker._setupTick()
  };
  Ticker.getInterval = function() {
    return Ticker._interval
  };
  Ticker.setFPS = function(value) {
    Ticker.setInterval(1E3 / value)
  };
  Ticker.getFPS = function() {
    return 1E3 / Ticker._interval
  };
  Ticker.getMeasuredTickTime = function(ticks) {
    var ttl = 0, times = Ticker._tickTimes;
    if(times.length < 1) {
      return-1
    }
    ticks = Math.min(times.length, ticks || Ticker.getFPS() | 0);
    for(var i = 0;i < ticks;i++) {
      ttl += times[i]
    }
    return ttl / ticks
  };
  Ticker.getMeasuredFPS = function(ticks) {
    var times = Ticker._times;
    if(times.length < 2) {
      return-1
    }
    ticks = Math.min(times.length - 1, ticks || Ticker.getFPS() | 0);
    return 1E3 / ((times[0] - times[ticks]) / ticks)
  };
  Ticker.setPaused = function(value) {
    Ticker._paused = value
  };
  Ticker.getPaused = function() {
    return Ticker._paused
  };
  Ticker.getTime = function(runTime) {
    return Ticker._getTime() - Ticker._startTime - (runTime ? Ticker._pausedTime : 0)
  };
  Ticker.getEventTime = function(runTime) {
    return(Ticker._lastTime || Ticker._startTime) - (runTime ? Ticker._pausedTime : 0)
  };
  Ticker.getTicks = function(pauseable) {
    return Ticker._ticks - (pauseable ? Ticker._pausedTicks : 0)
  };
  Ticker._handleSynch = function() {
    var time = Ticker._getTime() - Ticker._startTime;
    Ticker._timerId = null;
    Ticker._setupTick();
    if(time - Ticker._lastTime >= (Ticker._interval - 1) * 0.97) {
      Ticker._tick()
    }
  };
  Ticker._handleRAF = function() {
    Ticker._timerId = null;
    Ticker._setupTick();
    Ticker._tick()
  };
  Ticker._handleTimeout = function() {
    Ticker._timerId = null;
    Ticker._setupTick();
    Ticker._tick()
  };
  Ticker._setupTick = function() {
    if(Ticker._timerId != null) {
      trace("duplicate");
      return
    }
    var mode = Ticker.timingMode || Ticker.useRAF && Ticker.RAF_SYNCHED;
    if(mode == Ticker.RAF_SYNCHED || mode == Ticker.RAF) {
      var f = window.requestAnimationFrame || (window.webkitRequestAnimationFrame || (window.mozRequestAnimationFrame || (window.oRequestAnimationFrame || window.msRequestAnimationFrame)));
      if(f) {
        Ticker._timerId = f(mode == Ticker.RAF ? Ticker._handleRAF : Ticker._handleSynch);
        Ticker._raf = true;
        return
      }
    }
    Ticker._raf = false;
    Ticker._timerId = setTimeout(Ticker._handleTimeout, Ticker._interval)
  };
  Ticker._tick = function() {
    var time = Ticker._getTime() - Ticker._startTime;
    var elapsedTime = time - Ticker._lastTime;
    var paused = Ticker._paused;
    Ticker._ticks++;
    if(paused) {
      Ticker._pausedTicks++;
      Ticker._pausedTime += elapsedTime
    }
    Ticker._lastTime = time;
    if(Ticker.hasEventListener("tick")) {
      var event = new createjs.Event("tick");
      var maxDelta = Ticker.maxDelta;
      event.delta = maxDelta && elapsedTime > maxDelta ? maxDelta : elapsedTime;
      event.paused = paused;
      event.time = time;
      event.runTime = time - Ticker._pausedTime;
      Ticker.dispatchEvent(event)
    }
    Ticker._tickTimes.unshift(Ticker._getTime() - time);
    while(Ticker._tickTimes.length > 100) {
      Ticker._tickTimes.pop()
    }
    Ticker._times.unshift(time);
    while(Ticker._times.length > 100) {
      Ticker._times.pop()
    }
  };
  var now = window.performance && (performance.now || (performance.mozNow || (performance.msNow || (performance.oNow || performance.webkitNow))));
  Ticker._getTime = function() {
    return now && now.call(performance) || (new Date).getTime()
  };
  createjs.Ticker = Ticker
})();
this.createjs = this.createjs || {};
(function() {
  var MouseEvent = function(type, bubbles, cancelable, stageX, stageY, nativeEvent, pointerID, primary, rawX, rawY) {
    this.initialize(type, bubbles, cancelable, stageX, stageY, nativeEvent, pointerID, primary, rawX, rawY)
  };
  var p = MouseEvent.prototype = new createjs.Event;
  p.stageX = 0;
  p.stageY = 0;
  p.rawX = 0;
  p.rawY = 0;
  p.nativeEvent = null;
  p.pointerID = 0;
  p.primary = false;
  p.addEventListener = null;
  p.removeEventListener = null;
  p.removeAllEventListeners = null;
  p.dispatchEvent = null;
  p.hasEventListener = null;
  p._listeners = null;
  createjs.EventDispatcher.initialize(p);
  p.Event_initialize = p.initialize;
  p.initialize = function(type, bubbles, cancelable, stageX, stageY, nativeEvent, pointerID, primary, rawX, rawY) {
    this.Event_initialize(type, bubbles, cancelable);
    this.stageX = stageX;
    this.stageY = stageY;
    this.nativeEvent = nativeEvent;
    this.pointerID = pointerID;
    this.primary = primary;
    this.rawX = rawX == null ? stageX : rawX;
    this.rawY = rawY == null ? stageY : rawY
  };
  p.clone = function() {
    return new MouseEvent(this.type, this.bubbles, this.cancelable, this.stageX, this.stageY, this.target, this.nativeEvent, this.pointerID, this.primary, this.rawX, this.rawY)
  };
  p.toString = function() {
    return"[MouseEvent (type=" + this.type + " stageX=" + this.stageX + " stageY=" + this.stageY + ")]"
  };
  createjs.MouseEvent = MouseEvent
})();
this.createjs = this.createjs || {};
(function() {
  var Matrix2D = function(a, b, c, d, tx, ty) {
    this.initialize(a, b, c, d, tx, ty)
  };
  var p = Matrix2D.prototype;
  Matrix2D.identity = null;
  Matrix2D.DEG_TO_RAD = Math.PI / 180;
  p.a = 1;
  p.b = 0;
  p.c = 0;
  p.d = 1;
  p.tx = 0;
  p.ty = 0;
  p.alpha = 1;
  p.shadow = null;
  p.compositeOperation = null;
  p.initialize = function(a, b, c, d, tx, ty) {
    this.a = a == null ? 1 : a;
    this.b = b || 0;
    this.c = c || 0;
    this.d = d == null ? 1 : d;
    this.tx = tx || 0;
    this.ty = ty || 0;
    return this
  };
  p.prepend = function(a, b, c, d, tx, ty) {
    var tx1 = this.tx;
    if(a != 1 || (b != 0 || (c != 0 || d != 1))) {
      var a1 = this.a;
      var c1 = this.c;
      this.a = a1 * a + this.b * c;
      this.b = a1 * b + this.b * d;
      this.c = c1 * a + this.d * c;
      this.d = c1 * b + this.d * d
    }
    this.tx = tx1 * a + this.ty * c + tx;
    this.ty = tx1 * b + this.ty * d + ty;
    return this
  };
  p.append = function(a, b, c, d, tx, ty) {
    var a1 = this.a;
    var b1 = this.b;
    var c1 = this.c;
    var d1 = this.d;
    this.a = a * a1 + b * c1;
    this.b = a * b1 + b * d1;
    this.c = c * a1 + d * c1;
    this.d = c * b1 + d * d1;
    this.tx = tx * a1 + ty * c1 + this.tx;
    this.ty = tx * b1 + ty * d1 + this.ty;
    return this
  };
  p.prependMatrix = function(matrix) {
    this.prepend(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);
    this.prependProperties(matrix.alpha, matrix.shadow, matrix.compositeOperation);
    return this
  };
  p.appendMatrix = function(matrix) {
    this.append(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty);
    this.appendProperties(matrix.alpha, matrix.shadow, matrix.compositeOperation);
    return this
  };
  p.prependTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {
    if(rotation % 360) {
      var r = rotation * Matrix2D.DEG_TO_RAD;
      var cos = Math.cos(r);
      var sin = Math.sin(r)
    }else {
      cos = 1;
      sin = 0
    }
    if(regX || regY) {
      this.tx -= regX;
      this.ty -= regY
    }
    if(skewX || skewY) {
      skewX *= Matrix2D.DEG_TO_RAD;
      skewY *= Matrix2D.DEG_TO_RAD;
      this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0);
      this.prepend(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y)
    }else {
      this.prepend(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y)
    }
    return this
  };
  p.appendTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {
    if(rotation % 360) {
      var r = rotation * Matrix2D.DEG_TO_RAD;
      var cos = Math.cos(r);
      var sin = Math.sin(r)
    }else {
      cos = 1;
      sin = 0
    }
    if(skewX || skewY) {
      skewX *= Matrix2D.DEG_TO_RAD;
      skewY *= Matrix2D.DEG_TO_RAD;
      this.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), x, y);
      this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, 0, 0)
    }else {
      this.append(cos * scaleX, sin * scaleX, -sin * scaleY, cos * scaleY, x, y)
    }
    if(regX || regY) {
      this.tx -= regX * this.a + regY * this.c;
      this.ty -= regX * this.b + regY * this.d
    }
    return this
  };
  p.rotate = function(angle) {
    var cos = Math.cos(angle);
    var sin = Math.sin(angle);
    var a1 = this.a;
    var c1 = this.c;
    var tx1 = this.tx;
    this.a = a1 * cos - this.b * sin;
    this.b = a1 * sin + this.b * cos;
    this.c = c1 * cos - this.d * sin;
    this.d = c1 * sin + this.d * cos;
    this.tx = tx1 * cos - this.ty * sin;
    this.ty = tx1 * sin + this.ty * cos;
    return this
  };
  p.skew = function(skewX, skewY) {
    skewX = skewX * Matrix2D.DEG_TO_RAD;
    skewY = skewY * Matrix2D.DEG_TO_RAD;
    this.append(Math.cos(skewY), Math.sin(skewY), -Math.sin(skewX), Math.cos(skewX), 0, 0);
    return this
  };
  p.scale = function(x, y) {
    this.a *= x;
    this.d *= y;
    this.c *= x;
    this.b *= y;
    this.tx *= x;
    this.ty *= y;
    return this
  };
  p.translate = function(x, y) {
    this.tx += x;
    this.ty += y;
    return this
  };
  p.identity = function() {
    this.alpha = this.a = this.d = 1;
    this.b = this.c = this.tx = this.ty = 0;
    this.shadow = this.compositeOperation = null;
    return this
  };
  p.invert = function() {
    var a1 = this.a;
    var b1 = this.b;
    var c1 = this.c;
    var d1 = this.d;
    var tx1 = this.tx;
    var n = a1 * d1 - b1 * c1;
    this.a = d1 / n;
    this.b = -b1 / n;
    this.c = -c1 / n;
    this.d = a1 / n;
    this.tx = (c1 * this.ty - d1 * tx1) / n;
    this.ty = -(a1 * this.ty - b1 * tx1) / n;
    return this
  };
  p.isIdentity = function() {
    return this.tx == 0 && (this.ty == 0 && (this.a == 1 && (this.b == 0 && (this.c == 0 && this.d == 1))))
  };
  p.transformPoint = function(x, y, pt) {
    pt = pt || {};
    pt.x = x * this.a + y * this.c + this.tx;
    pt.y = x * this.b + y * this.d + this.ty;
    return pt
  };
  p.decompose = function(target) {
    if(target == null) {
      target = {}
    }
    target.x = this.tx;
    target.y = this.ty;
    target.scaleX = Math.sqrt(this.a * this.a + this.b * this.b);
    target.scaleY = Math.sqrt(this.c * this.c + this.d * this.d);
    var skewX = Math.atan2(-this.c, this.d);
    var skewY = Math.atan2(this.b, this.a);
    if(skewX == skewY) {
      target.rotation = skewY / Matrix2D.DEG_TO_RAD;
      if(this.a < 0 && this.d >= 0) {
        target.rotation += target.rotation <= 0 ? 180 : -180
      }
      target.skewX = target.skewY = 0
    }else {
      target.skewX = skewX / Matrix2D.DEG_TO_RAD;
      target.skewY = skewY / Matrix2D.DEG_TO_RAD
    }
    return target
  };
  p.reinitialize = function(a, b, c, d, tx, ty, alpha, shadow, compositeOperation) {
    this.initialize(a, b, c, d, tx, ty);
    this.alpha = alpha == null ? 1 : alpha;
    this.shadow = shadow;
    this.compositeOperation = compositeOperation;
    return this
  };
  p.copy = function(matrix) {
    return this.reinitialize(matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty, matrix.alpha, matrix.shadow, matrix.compositeOperation)
  };
  p.appendProperties = function(alpha, shadow, compositeOperation) {
    this.alpha *= alpha;
    this.shadow = shadow || this.shadow;
    this.compositeOperation = compositeOperation || this.compositeOperation;
    return this
  };
  p.prependProperties = function(alpha, shadow, compositeOperation) {
    this.alpha *= alpha;
    this.shadow = this.shadow || shadow;
    this.compositeOperation = this.compositeOperation || compositeOperation;
    return this
  };
  p.clone = function() {
    return(new Matrix2D).copy(this)
  };
  p.toString = function() {
    return"[Matrix2D (a=" + this.a + " b=" + this.b + " c=" + this.c + " d=" + this.d + " tx=" + this.tx + " ty=" + this.ty + ")]"
  };
  Matrix2D.identity = new Matrix2D;
  createjs.Matrix2D = Matrix2D
})();
this.createjs = this.createjs || {};
(function() {
  var Point = function(x, y) {
    this.initialize(x, y)
  };
  var p = Point.prototype;
  p.x = 0;
  p.y = 0;
  p.initialize = function(x, y) {
    this.x = x == null ? 0 : x;
    this.y = y == null ? 0 : y;
    return this
  };
  p.copy = function(point) {
    return this.initialize(point.x, point.y)
  };
  p.clone = function() {
    return new Point(this.x, this.y)
  };
  p.toString = function() {
    return"[Point (x=" + this.x + " y=" + this.y + ")]"
  };
  createjs.Point = Point
})();
this.createjs = this.createjs || {};
(function() {
  var Rectangle = function(x, y, width, height) {
    this.initialize(x, y, width, height)
  };
  var p = Rectangle.prototype;
  p.x = 0;
  p.y = 0;
  p.width = 0;
  p.height = 0;
  p.initialize = function(x, y, width, height) {
    this.x = x || 0;
    this.y = y || 0;
    this.width = width || 0;
    this.height = height || 0;
    return this
  };
  p.copy = function(rectangle) {
    return this.initialize(rectangle.x, rectangle.y, rectangle.width, rectangle.height)
  };
  p.clone = function() {
    return new Rectangle(this.x, this.y, this.width, this.height)
  };
  p.toString = function() {
    return"[Rectangle (x=" + this.x + " y=" + this.y + " width=" + this.width + " height=" + this.height + ")]"
  };
  createjs.Rectangle = Rectangle
})();
this.createjs = this.createjs || {};
(function() {
  var ButtonHelper = function(target, outLabel, overLabel, downLabel, play, hitArea, hitLabel) {
    this.initialize(target, outLabel, overLabel, downLabel, play, hitArea, hitLabel)
  };
  var p = ButtonHelper.prototype;
  p.target = null;
  p.overLabel = null;
  p.outLabel = null;
  p.downLabel = null;
  p.play = false;
  p._isPressed = false;
  p._isOver = false;
  p.initialize = function(target, outLabel, overLabel, downLabel, play, hitArea, hitLabel) {
    if(!target.addEventListener) {
      return
    }
    this.target = target;
    target.cursor = "pointer";
    this.overLabel = overLabel == null ? "over" : overLabel;
    this.outLabel = outLabel == null ? "out" : outLabel;
    this.downLabel = downLabel == null ? "down" : downLabel;
    this.play = play;
    this.setEnabled(true);
    this.handleEvent({});
    if(hitArea) {
      if(hitLabel) {
        hitArea.actionsEnabled = false;
        hitArea.gotoAndStop && hitArea.gotoAndStop(hitLabel)
      }
      target.hitArea = hitArea
    }
  };
  p.setEnabled = function(value) {
    var o = this.target;
    if(value) {
      o.addEventListener("rollover", this);
      o.addEventListener("rollout", this);
      o.addEventListener("mousedown", this);
      o.addEventListener("pressup", this)
    }else {
      o.removeEventListener("rollover", this);
      o.removeEventListener("rollout", this);
      o.removeEventListener("mousedown", this);
      o.removeEventListener("pressup", this)
    }
  };
  p.toString = function() {
    return"[ButtonHelper]"
  };
  p.handleEvent = function(evt) {
    var label, t = this.target, type = evt.type;
    if(type == "mousedown") {
      this._isPressed = true;
      label = this.downLabel
    }else {
      if(type == "pressup") {
        this._isPressed = false;
        label = this._isOver ? this.overLabel : this.outLabel
      }else {
        if(type == "rollover") {
          this._isOver = true;
          label = this._isPressed ? this.downLabel : this.overLabel
        }else {
          this._isOver = false;
          label = this._isPressed ? this.overLabel : this.outLabel
        }
      }
    }
    if(this.play) {
      t.gotoAndPlay && t.gotoAndPlay(label)
    }else {
      t.gotoAndStop && t.gotoAndStop(label)
    }
  };
  createjs.ButtonHelper = ButtonHelper
})();
this.createjs = this.createjs || {};
(function() {
  var Shadow = function(color, offsetX, offsetY, blur) {
    this.initialize(color, offsetX, offsetY, blur)
  };
  var p = Shadow.prototype;
  Shadow.identity = null;
  p.color = null;
  p.offsetX = 0;
  p.offsetY = 0;
  p.blur = 0;
  p.initialize = function(color, offsetX, offsetY, blur) {
    this.color = color;
    this.offsetX = offsetX;
    this.offsetY = offsetY;
    this.blur = blur
  };
  p.toString = function() {
    return"[Shadow]"
  };
  p.clone = function() {
    return new Shadow(this.color, this.offsetX, this.offsetY, this.blur)
  };
  Shadow.identity = new Shadow("transparent", 0, 0, 0);
  createjs.Shadow = Shadow
})();
this.createjs = this.createjs || {};
(function() {
  var SpriteSheet = function(data) {
    this.initialize(data)
  };
  var p = SpriteSheet.prototype = new createjs.EventDispatcher;
  p.complete = true;
  p.framerate = 0;
  p._animations = null;
  p._frames = null;
  p._images = null;
  p._data = null;
  p._loadCount = 0;
  p._frameHeight = 0;
  p._frameWidth = 0;
  p._numFrames = 0;
  p._regX = 0;
  p._regY = 0;
  p.initialize = function(data) {
    var i, l, o, a;
    if(data == null) {
      return
    }
    this.framerate = data.framerate || 0;
    if(data.images && (l = data.images.length) > 0) {
      a = this._images = [];
      for(i = 0;i < l;i++) {
        var img = data.images[i];
        if(typeof img == "string") {
          var src = img;
          img = document.createElement("img");
          img.src = src
        }
        a.push(img);
        if(!img.getContext && !img.complete) {
          this._loadCount++;
          this.complete = false;
          (function(o) {
            img.onload = function() {
              o._handleImageLoad()
            }
          })(this)
        }
      }
    }
    if(data.frames == null) {
    }else {
      if(data.frames instanceof Array) {
        this._frames = [];
        a = data.frames;
        for(i = 0, l = a.length;i < l;i++) {
          var arr = a[i];
          this._frames.push({image:this._images[arr[4] ? arr[4] : 0], rect:new createjs.Rectangle(arr[0], arr[1], arr[2], arr[3]), regX:arr[5] || 0, regY:arr[6] || 0})
        }
      }else {
        o = data.frames;
        this._frameWidth = o.width;
        this._frameHeight = o.height;
        this._regX = o.regX || 0;
        this._regY = o.regY || 0;
        this._numFrames = o.count;
        if(this._loadCount == 0) {
          this._calculateFrames()
        }
      }
    }
    this._animations = [];
    if((o = data.animations) != null) {
      this._data = {};
      var name;
      for(name in o) {
        var anim = {name:name};
        var obj = o[name];
        if(typeof obj == "number") {
          a = anim.frames = [obj]
        }else {
          if(obj instanceof Array) {
            if(obj.length == 1) {
              anim.frames = [obj[0]]
            }else {
              anim.speed = obj[3];
              anim.next = obj[2];
              a = anim.frames = [];
              for(i = obj[0];i <= obj[1];i++) {
                a.push(i)
              }
            }
          }else {
            anim.speed = obj.speed;
            anim.next = obj.next;
            var frames = obj.frames;
            a = anim.frames = typeof frames == "number" ? [frames] : frames.slice(0)
          }
        }
        if(anim.next === true || anim.next === undefined) {
          anim.next = name
        }
        if(anim.next === false || a.length < 2 && anim.next == name) {
          anim.next = null
        }
        if(!anim.speed) {
          anim.speed = 1
        }
        this._animations.push(name);
        this._data[name] = anim
      }
    }
  };
  p.getNumFrames = function(animation) {
    if(animation == null) {
      return this._frames ? this._frames.length : this._numFrames
    }else {
      var data = this._data[animation];
      if(data == null) {
        return 0
      }else {
        return data.frames.length
      }
    }
  };
  p.getAnimations = function() {
    return this._animations.slice(0)
  };
  p.getAnimation = function(name) {
    return this._data[name]
  };
  p.getFrame = function(frameIndex) {
    var frame;
    if(this._frames && (frame = this._frames[frameIndex])) {
      return frame
    }
    return null
  };
  p.getFrameBounds = function(frameIndex, rectangle) {
    var frame = this.getFrame(frameIndex);
    return frame ? (rectangle || new createjs.Rectangle).initialize(-frame.regX, -frame.regY, frame.rect.width, frame.rect.height) : null
  };
  p.toString = function() {
    return"[SpriteSheet]"
  };
  p.clone = function() {
    var o = new SpriteSheet;
    o.complete = this.complete;
    o._animations = this._animations;
    o._frames = this._frames;
    o._images = this._images;
    o._data = this._data;
    o._frameHeight = this._frameHeight;
    o._frameWidth = this._frameWidth;
    o._numFrames = this._numFrames;
    o._loadCount = this._loadCount;
    return o
  };
  p._handleImageLoad = function() {
    if(--this._loadCount == 0) {
      this._calculateFrames();
      this.complete = true;
      this.dispatchEvent("complete")
    }
  };
  p._calculateFrames = function() {
    if(this._frames || this._frameWidth == 0) {
      return
    }
    this._frames = [];
    var ttlFrames = 0;
    var fw = this._frameWidth;
    var fh = this._frameHeight;
    for(var i = 0, imgs = this._images;i < imgs.length;i++) {
      var img = imgs[i];
      var cols = (img.width + 1) / fw | 0;
      var rows = (img.height + 1) / fh | 0;
      var ttl = this._numFrames > 0 ? Math.min(this._numFrames - ttlFrames, cols * rows) : cols * rows;
      for(var j = 0;j < ttl;j++) {
        this._frames.push({image:img, rect:new createjs.Rectangle(j % cols * fw, (j / cols | 0) * fh, fw, fh), regX:this._regX, regY:this._regY})
      }
      ttlFrames += ttl
    }
    this._numFrames = ttlFrames
  };
  createjs.SpriteSheet = SpriteSheet
})();
this.createjs = this.createjs || {};
(function() {
  function Command(f, params, path) {
    this.f = f;
    this.params = params;
    this.path = path == null ? true : path
  }
  Command.prototype.exec = function(scope) {
    this.f.apply(scope, this.params)
  };
  var Graphics = function() {
    this.initialize()
  };
  var p = Graphics.prototype;
  Graphics.getRGB = function(r, g, b, alpha) {
    if(r != null && b == null) {
      alpha = g;
      b = r & 255;
      g = r >> 8 & 255;
      r = r >> 16 & 255
    }
    if(alpha == null) {
      return"rgb(" + r + "," + g + "," + b + ")"
    }else {
      return"rgba(" + r + "," + g + "," + b + "," + alpha + ")"
    }
  };
  Graphics.getHSL = function(hue, saturation, lightness, alpha) {
    if(alpha == null) {
      return"hsl(" + hue % 360 + "," + saturation + "%," + lightness + "%)"
    }else {
      return"hsla(" + hue % 360 + "," + saturation + "%," + lightness + "%," + alpha + ")"
    }
  };
  Graphics.Command = Command;
  Graphics.BASE_64 = {"A":0, "B":1, "C":2, "D":3, "E":4, "F":5, "G":6, "H":7, "I":8, "J":9, "K":10, "L":11, "M":12, "N":13, "O":14, "P":15, "Q":16, "R":17, "S":18, "T":19, "U":20, "V":21, "W":22, "X":23, "Y":24, "Z":25, "a":26, "b":27, "c":28, "d":29, "e":30, "f":31, "g":32, "h":33, "i":34, "j":35, "k":36, "l":37, "m":38, "n":39, "o":40, "p":41, "q":42, "r":43, "s":44, "t":45, "u":46, "v":47, "w":48, "x":49, "y":50, "z":51, 0:52, 1:53, 2:54, 3:55, 4:56, 5:57, 6:58, 7:59, 8:60, 9:61, "+":62, "/":63};
  Graphics.STROKE_CAPS_MAP = ["butt", "round", "square"];
  Graphics.STROKE_JOINTS_MAP = ["miter", "round", "bevel"];
  var canvas = createjs.createCanvas ? createjs.createCanvas() : document.createElement("canvas");
  if(canvas.getContext) {
    var ctx = Graphics._ctx = canvas.getContext("2d");
    Graphics.beginCmd = new Command(ctx.beginPath, [], false);
    Graphics.fillCmd = new Command(ctx.fill, [], false);
    Graphics.strokeCmd = new Command(ctx.stroke, [], false);
    canvas.width = canvas.height = 1
  }
  p._strokeInstructions = null;
  p._strokeStyleInstructions = null;
  p._strokeIgnoreScale = false;
  p._fillInstructions = null;
  p._fillMatrix = null;
  p._instructions = null;
  p._oldInstructions = null;
  p._activeInstructions = null;
  p._active = false;
  p._dirty = false;
  p.initialize = function() {
    this.clear();
    this._ctx = Graphics._ctx
  };
  p.isEmpty = function() {
    return!(this._instructions.length || (this._oldInstructions.length || this._activeInstructions.length))
  };
  p.draw = function(ctx) {
    if(this._dirty) {
      this._updateInstructions()
    }
    var instr = this._instructions;
    for(var i = 0, l = instr.length;i < l;i++) {
      instr[i].exec(ctx)
    }
  };
  p.drawAsPath = function(ctx) {
    if(this._dirty) {
      this._updateInstructions()
    }
    var instr, instrs = this._instructions;
    for(var i = 0, l = instrs.length;i < l;i++) {
      if((instr = instrs[i]).path || i == 0) {
        instr.exec(ctx)
      }
    }
  };
  p.moveTo = function(x, y) {
    this._activeInstructions.push(new Command(this._ctx.moveTo, [x, y]));
    return this
  };
  p.lineTo = function(x, y) {
    this._dirty = this._active = true;
    this._activeInstructions.push(new Command(this._ctx.lineTo, [x, y]));
    return this
  };
  p.arcTo = function(x1, y1, x2, y2, radius) {
    this._dirty = this._active = true;
    this._activeInstructions.push(new Command(this._ctx.arcTo, [x1, y1, x2, y2, radius]));
    return this
  };
  p.arc = function(x, y, radius, startAngle, endAngle, anticlockwise) {
    this._dirty = this._active = true;
    if(anticlockwise == null) {
      anticlockwise = false
    }
    this._activeInstructions.push(new Command(this._ctx.arc, [x, y, radius, startAngle, endAngle, anticlockwise]));
    return this
  };
  p.quadraticCurveTo = function(cpx, cpy, x, y) {
    this._dirty = this._active = true;
    this._activeInstructions.push(new Command(this._ctx.quadraticCurveTo, [cpx, cpy, x, y]));
    return this
  };
  p.bezierCurveTo = function(cp1x, cp1y, cp2x, cp2y, x, y) {
    this._dirty = this._active = true;
    this._activeInstructions.push(new Command(this._ctx.bezierCurveTo, [cp1x, cp1y, cp2x, cp2y, x, y]));
    return this
  };
  p.rect = function(x, y, w, h) {
    this._dirty = this._active = true;
    this._activeInstructions.push(new Command(this._ctx.rect, [x, y, w, h]));
    return this
  };
  p.closePath = function() {
    if(this._active) {
      this._dirty = true;
      this._activeInstructions.push(new Command(this._ctx.closePath, []))
    }
    return this
  };
  p.clear = function() {
    this._instructions = [];
    this._oldInstructions = [];
    this._activeInstructions = [];
    this._strokeStyleInstructions = this._strokeInstructions = this._fillInstructions = this._fillMatrix = null;
    this._active = this._dirty = this._strokeIgnoreScale = false;
    return this
  };
  p.beginFill = function(color) {
    if(this._active) {
      this._newPath()
    }
    this._fillInstructions = color ? [new Command(this._setProp, ["fillStyle", color], false)] : null;
    this._fillMatrix = null;
    return this
  };
  p.beginLinearGradientFill = function(colors, ratios, x0, y0, x1, y1) {
    if(this._active) {
      this._newPath()
    }
    var o = this._ctx.createLinearGradient(x0, y0, x1, y1);
    for(var i = 0, l = colors.length;i < l;i++) {
      o.addColorStop(ratios[i], colors[i])
    }
    this._fillInstructions = [new Command(this._setProp, ["fillStyle", o], false)];
    this._fillMatrix = null;
    return this
  };
  p.beginRadialGradientFill = function(colors, ratios, x0, y0, r0, x1, y1, r1) {
    if(this._active) {
      this._newPath()
    }
    var o = this._ctx.createRadialGradient(x0, y0, r0, x1, y1, r1);
    for(var i = 0, l = colors.length;i < l;i++) {
      o.addColorStop(ratios[i], colors[i])
    }
    this._fillInstructions = [new Command(this._setProp, ["fillStyle", o], false)];
    this._fillMatrix = null;
    return this
  };
  p.beginBitmapFill = function(image, repetition, matrix) {
    if(this._active) {
      this._newPath()
    }
    repetition = repetition || "";
    var o = this._ctx.createPattern(image, repetition);
    this._fillInstructions = [new Command(this._setProp, ["fillStyle", o], false)];
    this._fillMatrix = matrix ? [matrix.a, matrix.b, matrix.c, matrix.d, matrix.tx, matrix.ty] : null;
    return this
  };
  p.endFill = function() {
    return this.beginFill()
  };
  p.setStrokeStyle = function(thickness, caps, joints, miterLimit, ignoreScale) {
    if(this._active) {
      this._newPath()
    }
    this._strokeStyleInstructions = [new Command(this._setProp, ["lineWidth", thickness == null ? "1" : thickness], false), new Command(this._setProp, ["lineCap", caps == null ? "butt" : isNaN(caps) ? caps : Graphics.STROKE_CAPS_MAP[caps]], false), new Command(this._setProp, ["lineJoin", joints == null ? "miter" : isNaN(joints) ? joints : Graphics.STROKE_JOINTS_MAP[joints]], false), new Command(this._setProp, ["miterLimit", miterLimit == null ? "10" : miterLimit], false)];
    this._strokeIgnoreScale = ignoreScale;
    return this
  };
  p.beginStroke = function(color) {
    if(this._active) {
      this._newPath()
    }
    this._strokeInstructions = color ? [new Command(this._setProp, ["strokeStyle", color], false)] : null;
    return this
  };
  p.beginLinearGradientStroke = function(colors, ratios, x0, y0, x1, y1) {
    if(this._active) {
      this._newPath()
    }
    var o = this._ctx.createLinearGradient(x0, y0, x1, y1);
    for(var i = 0, l = colors.length;i < l;i++) {
      o.addColorStop(ratios[i], colors[i])
    }
    this._strokeInstructions = [new Command(this._setProp, ["strokeStyle", o], false)];
    return this
  };
  p.beginRadialGradientStroke = function(colors, ratios, x0, y0, r0, x1, y1, r1) {
    if(this._active) {
      this._newPath()
    }
    var o = this._ctx.createRadialGradient(x0, y0, r0, x1, y1, r1);
    for(var i = 0, l = colors.length;i < l;i++) {
      o.addColorStop(ratios[i], colors[i])
    }
    this._strokeInstructions = [new Command(this._setProp, ["strokeStyle", o], false)];
    return this
  };
  p.beginBitmapStroke = function(image, repetition) {
    if(this._active) {
      this._newPath()
    }
    repetition = repetition || "";
    var o = this._ctx.createPattern(image, repetition);
    this._strokeInstructions = [new Command(this._setProp, ["strokeStyle", o], false)];
    return this
  };
  p.endStroke = function() {
    this.beginStroke();
    return this
  };
  p.curveTo = p.quadraticCurveTo;
  p.drawRect = p.rect;
  p.drawRoundRect = function(x, y, w, h, radius) {
    this.drawRoundRectComplex(x, y, w, h, radius, radius, radius, radius);
    return this
  };
  p.drawRoundRectComplex = function(x, y, w, h, radiusTL, radiusTR, radiusBR, radiusBL) {
    var max = (w < h ? w : h) / 2;
    var mTL = 0, mTR = 0, mBR = 0, mBL = 0;
    if(radiusTL < 0) {
      radiusTL *= mTL = -1
    }
    if(radiusTL > max) {
      radiusTL = max
    }
    if(radiusTR < 0) {
      radiusTR *= mTR = -1
    }
    if(radiusTR > max) {
      radiusTR = max
    }
    if(radiusBR < 0) {
      radiusBR *= mBR = -1
    }
    if(radiusBR > max) {
      radiusBR = max
    }
    if(radiusBL < 0) {
      radiusBL *= mBL = -1
    }
    if(radiusBL > max) {
      radiusBL = max
    }
    this._dirty = this._active = true;
    var arcTo = this._ctx.arcTo, lineTo = this._ctx.lineTo;
    this._activeInstructions.push(new Command(this._ctx.moveTo, [x + w - radiusTR, y]), new Command(arcTo, [x + w + radiusTR * mTR, y - radiusTR * mTR, x + w, y + radiusTR, radiusTR]), new Command(lineTo, [x + w, y + h - radiusBR]), new Command(arcTo, [x + w + radiusBR * mBR, y + h + radiusBR * mBR, x + w - radiusBR, y + h, radiusBR]), new Command(lineTo, [x + radiusBL, y + h]), new Command(arcTo, [x - radiusBL * mBL, y + h + radiusBL * mBL, x, y + h - radiusBL, radiusBL]), new Command(lineTo, [x, 
    y + radiusTL]), new Command(arcTo, [x - radiusTL * mTL, y - radiusTL * mTL, x + radiusTL, y, radiusTL]), new Command(this._ctx.closePath));
    return this
  };
  p.drawCircle = function(x, y, radius) {
    this.arc(x, y, radius, 0, Math.PI * 2);
    return this
  };
  p.drawEllipse = function(x, y, w, h) {
    this._dirty = this._active = true;
    var k = 0.5522848;
    var ox = w / 2 * k;
    var oy = h / 2 * k;
    var xe = x + w;
    var ye = y + h;
    var xm = x + w / 2;
    var ym = y + h / 2;
    this._activeInstructions.push(new Command(this._ctx.moveTo, [x, ym]), new Command(this._ctx.bezierCurveTo, [x, ym - oy, xm - ox, y, xm, y]), new Command(this._ctx.bezierCurveTo, [xm + ox, y, xe, ym - oy, xe, ym]), new Command(this._ctx.bezierCurveTo, [xe, ym + oy, xm + ox, ye, xm, ye]), new Command(this._ctx.bezierCurveTo, [xm - ox, ye, x, ym + oy, x, ym]));
    return this
  };
  p.inject = function(callback, data) {
    this._dirty = this._active = true;
    this._activeInstructions.push(new Command(callback, [data]));
    return this
  };
  p.drawPolyStar = function(x, y, radius, sides, pointSize, angle) {
    this._dirty = this._active = true;
    if(pointSize == null) {
      pointSize = 0
    }
    pointSize = 1 - pointSize;
    if(angle == null) {
      angle = 0
    }else {
      angle /= 180 / Math.PI
    }
    var a = Math.PI / sides;
    this._activeInstructions.push(new Command(this._ctx.moveTo, [x + Math.cos(angle) * radius, y + Math.sin(angle) * radius]));
    for(var i = 0;i < sides;i++) {
      angle += a;
      if(pointSize != 1) {
        this._activeInstructions.push(new Command(this._ctx.lineTo, [x + Math.cos(angle) * radius * pointSize, y + Math.sin(angle) * radius * pointSize]))
      }
      angle += a;
      this._activeInstructions.push(new Command(this._ctx.lineTo, [x + Math.cos(angle) * radius, y + Math.sin(angle) * radius]))
    }
    return this
  };
  p.decodePath = function(str) {
    var instructions = [this.moveTo, this.lineTo, this.quadraticCurveTo, this.bezierCurveTo, this.closePath];
    var paramCount = [2, 2, 4, 6, 0];
    var i = 0, l = str.length;
    var params = [];
    var x = 0, y = 0;
    var base64 = Graphics.BASE_64;
    while(i < l) {
      var c = str.charAt(i);
      var n = base64[c];
      var fi = n >> 3;
      var f = instructions[fi];
      if(!f || n & 3) {
        throw"bad path data (@" + i + "): " + c;
      }
      var pl = paramCount[fi];
      if(!fi) {
        x = y = 0
      }
      params.length = 0;
      i++;
      var charCount = (n >> 2 & 1) + 2;
      for(var p = 0;p < pl;p++) {
        var num = base64[str.charAt(i)];
        var sign = num >> 5 ? -1 : 1;
        num = (num & 31) << 6 | base64[str.charAt(i + 1)];
        if(charCount == 3) {
          num = num << 6 | base64[str.charAt(i + 2)]
        }
        num = sign * num / 10;
        if(p % 2) {
          x = num += x
        }else {
          y = num += y
        }
        params[p] = num;
        i += charCount
      }
      f.apply(this, params)
    }
    return this
  };
  p.clone = function() {
    var o = new Graphics;
    o._instructions = this._instructions.slice();
    o._activeInstructions = this._activeInstructions.slice();
    o._oldInstructions = this._oldInstructions.slice();
    if(this._fillInstructions) {
      o._fillInstructions = this._fillInstructions.slice()
    }
    if(this._strokeInstructions) {
      o._strokeInstructions = this._strokeInstructions.slice()
    }
    if(this._strokeStyleInstructions) {
      o._strokeStyleInstructions = this._strokeStyleInstructions.slice()
    }
    o._active = this._active;
    o._dirty = this._dirty;
    o._fillMatrix = this._fillMatrix;
    o._strokeIgnoreScale = this._strokeIgnoreScale;
    return o
  };
  p.toString = function() {
    return"[Graphics]"
  };
  p.mt = p.moveTo;
  p.lt = p.lineTo;
  p.at = p.arcTo;
  p.bt = p.bezierCurveTo;
  p.qt = p.quadraticCurveTo;
  p.a = p.arc;
  p.r = p.rect;
  p.cp = p.closePath;
  p.c = p.clear;
  p.f = p.beginFill;
  p.lf = p.beginLinearGradientFill;
  p.rf = p.beginRadialGradientFill;
  p.bf = p.beginBitmapFill;
  p.ef = p.endFill;
  p.ss = p.setStrokeStyle;
  p.s = p.beginStroke;
  p.ls = p.beginLinearGradientStroke;
  p.rs = p.beginRadialGradientStroke;
  p.bs = p.beginBitmapStroke;
  p.es = p.endStroke;
  p.dr = p.drawRect;
  p.rr = p.drawRoundRect;
  p.rc = p.drawRoundRectComplex;
  p.dc = p.drawCircle;
  p.de = p.drawEllipse;
  p.dp = p.drawPolyStar;
  p.p = p.decodePath;
  p._updateInstructions = function() {
    this._instructions = this._oldInstructions.slice();
    this._instructions.push(Graphics.beginCmd);
    this._appendInstructions(this._fillInstructions);
    this._appendInstructions(this._strokeInstructions);
    this._appendInstructions(this._strokeInstructions && this._strokeStyleInstructions);
    this._appendInstructions(this._activeInstructions);
    if(this._fillInstructions) {
      this._appendDraw(Graphics.fillCmd, this._fillMatrix)
    }
    if(this._strokeInstructions) {
      this._appendDraw(Graphics.strokeCmd, this._strokeIgnoreScale && [1, 0, 0, 1, 0, 0])
    }
  };
  p._appendInstructions = function(instructions) {
    if(instructions) {
      this._instructions.push.apply(this._instructions, instructions)
    }
  };
  p._appendDraw = function(command, matrixArr) {
    if(!matrixArr) {
      this._instructions.push(command)
    }else {
      this._instructions.push(new Command(this._ctx.save, [], false), new Command(this._ctx.transform, matrixArr, false), command, new Command(this._ctx.restore, [], false))
    }
  };
  p._newPath = function() {
    if(this._dirty) {
      this._updateInstructions()
    }
    this._oldInstructions = this._instructions;
    this._activeInstructions = [];
    this._active = this._dirty = false
  };
  p._setProp = function(name, value) {
    this[name] = value
  };
  createjs.Graphics = Graphics
})();
this.createjs = this.createjs || {};
(function() {
  var DisplayObject = function() {
    this.initialize()
  };
  var p = DisplayObject.prototype = new createjs.EventDispatcher;
  DisplayObject.suppressCrossDomainErrors = false;
  var canvas = createjs.createCanvas ? createjs.createCanvas() : document.createElement("canvas");
  if(canvas.getContext) {
    DisplayObject._hitTestCanvas = canvas;
    DisplayObject._hitTestContext = canvas.getContext("2d");
    canvas.width = canvas.height = 1
  }
  DisplayObject._nextCacheID = 1;
  p.alpha = 1;
  p.cacheCanvas = null;
  p.id = -1;
  p.mouseEnabled = true;
  p.name = null;
  p.parent = null;
  p.regX = 0;
  p.regY = 0;
  p.rotation = 0;
  p.scaleX = 1;
  p.scaleY = 1;
  p.skewX = 0;
  p.skewY = 0;
  p.shadow = null;
  p.visible = true;
  p.x = 0;
  p.y = 0;
  p.compositeOperation = null;
  p.snapToPixel = false;
  p.filters = null;
  p.cacheID = 0;
  p.mask = null;
  p.hitArea = null;
  p.cursor = null;
  p._cacheOffsetX = 0;
  p._cacheOffsetY = 0;
  p._cacheScale = 1;
  p._cacheDataURLID = 0;
  p._cacheDataURL = null;
  p._matrix = null;
  p._rectangle = null;
  p._bounds = null;
  p.initialize = function() {
    this.id = createjs.UID.get();
    this._matrix = new createjs.Matrix2D;
    this._rectangle = new createjs.Rectangle
  };
  p.isVisible = function() {
    return!!(this.visible && (this.alpha > 0 && (this.scaleX != 0 && this.scaleY != 0)))
  };
  p.draw = function(ctx, ignoreCache) {
    var cacheCanvas = this.cacheCanvas;
    if(ignoreCache || !cacheCanvas) {
      return false
    }
    var scale = this._cacheScale, offX = this._cacheOffsetX, offY = this._cacheOffsetY, fBounds;
    if(fBounds = this._applyFilterBounds(offX, offY, 0, 0)) {
      offX = fBounds.x;
      offY = fBounds.y
    }
    ctx.drawImage(cacheCanvas, offX, offY, cacheCanvas.width / scale, cacheCanvas.height / scale);
    return true
  };
  p.updateContext = function(ctx) {
    var mtx, mask = this.mask, o = this;
    if(mask && (mask.graphics && !mask.graphics.isEmpty())) {
      mtx = mask.getMatrix(mask._matrix);
      ctx.transform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty);
      mask.graphics.drawAsPath(ctx);
      ctx.clip();
      mtx.invert();
      ctx.transform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty)
    }
    mtx = o._matrix.identity().appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY);
    if(createjs["Stage"]._snapToPixelEnabled && o.snapToPixel) {
      ctx.transform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx + 0.5 | 0, mtx.ty + 0.5 | 0)
    }else {
      ctx.transform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx, mtx.ty)
    }
    ctx.globalAlpha *= o.alpha;
    if(o.compositeOperation) {
      ctx.globalCompositeOperation = o.compositeOperation
    }
    if(o.shadow) {
      this._applyShadow(ctx, o.shadow)
    }
  };
  p.cache = function(x, y, width, height, scale) {
    scale = scale || 1;
    if(!this.cacheCanvas) {
      this.cacheCanvas = createjs.createCanvas ? createjs.createCanvas() : document.createElement("canvas")
    }
    this._cacheWidth = width;
    this._cacheHeight = height;
    this._cacheOffsetX = x;
    this._cacheOffsetY = y;
    this._cacheScale = scale;
    this.updateCache()
  };
  p.updateCache = function(compositeOperation) {
    var cacheCanvas = this.cacheCanvas, scale = this._cacheScale, offX = this._cacheOffsetX * scale, offY = this._cacheOffsetY * scale;
    var w = this._cacheWidth, h = this._cacheHeight, fBounds;
    if(!cacheCanvas) {
      throw"cache() must be called before updateCache()";
    }
    var ctx = cacheCanvas.getContext("2d");
    if(fBounds = this._applyFilterBounds(offX, offY, w, h)) {
      offX = fBounds.x;
      offY = fBounds.y;
      w = fBounds.width;
      h = fBounds.height
    }
    w = Math.ceil(w * scale);
    h = Math.ceil(h * scale);
    if(w != cacheCanvas.width || h != cacheCanvas.height) {
      cacheCanvas.width = w;
      cacheCanvas.height = h
    }else {
      if(!compositeOperation) {
        ctx.clearRect(0, 0, w + 1, h + 1)
      }
    }
    ctx.save();
    ctx.globalCompositeOperation = compositeOperation;
    ctx.setTransform(scale, 0, 0, scale, -offX, -offY);
    this.draw(ctx, true);
    this._applyFilters();
    ctx.restore();
    this.cacheID = DisplayObject._nextCacheID++
  };
  p.uncache = function() {
    this._cacheDataURL = this.cacheCanvas = null;
    this.cacheID = this._cacheOffsetX = this._cacheOffsetY = 0;
    this._cacheScale = 1
  };
  p.getCacheDataURL = function() {
    if(!this.cacheCanvas) {
      return null
    }
    if(this.cacheID != this._cacheDataURLID) {
      this._cacheDataURL = this.cacheCanvas.toDataURL()
    }
    return this._cacheDataURL
  };
  p.getStage = function() {
    var o = this;
    while(o.parent) {
      o = o.parent
    }
    if(o instanceof createjs["Stage"]) {
      return o
    }
    return null
  };
  p.localToGlobal = function(x, y) {
    var mtx = this.getConcatenatedMatrix(this._matrix);
    if(mtx == null) {
      return null
    }
    mtx.append(1, 0, 0, 1, x, y);
    return new createjs.Point(mtx.tx, mtx.ty)
  };
  p.globalToLocal = function(x, y) {
    var mtx = this.getConcatenatedMatrix(this._matrix);
    if(mtx == null) {
      return null
    }
    mtx.invert();
    mtx.append(1, 0, 0, 1, x, y);
    return new createjs.Point(mtx.tx, mtx.ty)
  };
  p.localToLocal = function(x, y, target) {
    var pt = this.localToGlobal(x, y);
    return target.globalToLocal(pt.x, pt.y)
  };
  p.setTransform = function(x, y, scaleX, scaleY, rotation, skewX, skewY, regX, regY) {
    this.x = x || 0;
    this.y = y || 0;
    this.scaleX = scaleX == null ? 1 : scaleX;
    this.scaleY = scaleY == null ? 1 : scaleY;
    this.rotation = rotation || 0;
    this.skewX = skewX || 0;
    this.skewY = skewY || 0;
    this.regX = regX || 0;
    this.regY = regY || 0;
    return this
  };
  p.getMatrix = function(matrix) {
    var o = this;
    return(matrix ? matrix.identity() : new createjs.Matrix2D).appendTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY).appendProperties(o.alpha, o.shadow, o.compositeOperation)
  };
  p.getConcatenatedMatrix = function(matrix) {
    if(matrix) {
      matrix.identity()
    }else {
      matrix = new createjs.Matrix2D
    }
    var o = this;
    while(o != null) {
      matrix.prependTransform(o.x, o.y, o.scaleX, o.scaleY, o.rotation, o.skewX, o.skewY, o.regX, o.regY).prependProperties(o.alpha, o.shadow, o.compositeOperation);
      o = o.parent
    }
    return matrix
  };
  p.hitTest = function(x, y) {
    var ctx = DisplayObject._hitTestContext;
    ctx.setTransform(1, 0, 0, 1, -x, -y);
    this.draw(ctx);
    var hit = this._testHit(ctx);
    ctx.setTransform(1, 0, 0, 1, 0, 0);
    ctx.clearRect(0, 0, 2, 2);
    return hit
  };
  p.set = function(props) {
    for(var n in props) {
      this[n] = props[n]
    }
    return this
  };
  p.getBounds = function() {
    if(this._bounds) {
      return this._rectangle.copy(this._bounds)
    }
    var cacheCanvas = this.cacheCanvas;
    if(cacheCanvas) {
      var scale = this._cacheScale;
      return this._rectangle.initialize(this._cacheOffsetX, this._cacheOffsetY, cacheCanvas.width / scale, cacheCanvas.height / scale)
    }
    return null
  };
  p.getTransformedBounds = function() {
    return this._getBounds()
  };
  p.setBounds = function(x, y, width, height) {
    if(x == null) {
      this._bounds = x
    }
    this._bounds = (this._bounds || new createjs.Rectangle).initialize(x, y, width, height)
  };
  p.clone = function() {
    var o = new DisplayObject;
    this.cloneProps(o);
    return o
  };
  p.toString = function() {
    return"[DisplayObject (name=" + this.name + ")]"
  };
  p.cloneProps = function(o) {
    o.alpha = this.alpha;
    o.name = this.name;
    o.regX = this.regX;
    o.regY = this.regY;
    o.rotation = this.rotation;
    o.scaleX = this.scaleX;
    o.scaleY = this.scaleY;
    o.shadow = this.shadow;
    o.skewX = this.skewX;
    o.skewY = this.skewY;
    o.visible = this.visible;
    o.x = this.x;
    o.y = this.y;
    o._bounds = this._bounds;
    o.mouseEnabled = this.mouseEnabled;
    o.compositeOperation = this.compositeOperation
  };
  p._applyShadow = function(ctx, shadow) {
    shadow = shadow || Shadow.identity;
    ctx.shadowColor = shadow.color;
    ctx.shadowOffsetX = shadow.offsetX;
    ctx.shadowOffsetY = shadow.offsetY;
    ctx.shadowBlur = shadow.blur
  };
  p._tick = function(params) {
    var ls = this._listeners;
    if(ls && ls["tick"]) {
      var evt = new createjs.Event("tick");
      evt.params = params;
      this._dispatchEvent(evt, this, 2)
    }
  };
  p._testHit = function(ctx) {
    try {
      var hit = ctx.getImageData(0, 0, 1, 1).data[3] > 1
    }catch(e) {
      if(!DisplayObject.suppressCrossDomainErrors) {
        throw"An error has occurred. This is most likely due to security restrictions on reading canvas pixel data with local or cross-domain images.";
      }
    }
    return hit
  };
  p._applyFilters = function() {
    if(!this.filters || (this.filters.length == 0 || !this.cacheCanvas)) {
      return
    }
    var l = this.filters.length;
    var ctx = this.cacheCanvas.getContext("2d");
    var w = this.cacheCanvas.width;
    var h = this.cacheCanvas.height;
    for(var i = 0;i < l;i++) {
      this.filters[i].applyFilter(ctx, 0, 0, w, h)
    }
  };
  p._applyFilterBounds = function(x, y, width, height) {
    var bounds, l, filters = this.filters;
    if(!filters || !(l = filters.length)) {
      return
    }
    for(var i = 0;i < l;i++) {
      var f = this.filters[i];
      var fBounds = f.getBounds && f.getBounds();
      if(!fBounds) {
        continue
      }
      if(!bounds) {
        bounds = this._rectangle.initialize(x, y, width, height)
      }
      bounds.x += fBounds.x;
      bounds.y += fBounds.y;
      bounds.width += fBounds.width;
      bounds.height += fBounds.height
    }
    return bounds
  };
  p._getBounds = function(matrix, ignoreTransform) {
    return this._transformBounds(this.getBounds(), matrix, ignoreTransform)
  };
  p._transformBounds = function(bounds, matrix, ignoreTransform) {
    if(!bounds) {
      return bounds
    }
    var x = bounds.x, y = bounds.y, width = bounds.width, height = bounds.height;
    var mtx = ignoreTransform ? this._matrix.identity() : this.getMatrix(this._matrix);
    if(x || y) {
      mtx.appendTransform(0, 0, 1, 1, 0, 0, 0, -x, -y)
    }
    if(matrix) {
      mtx.prependMatrix(matrix)
    }
    var x_a = width * mtx.a, x_b = width * mtx.b;
    var y_c = height * mtx.c, y_d = height * mtx.d;
    var tx = mtx.tx, ty = mtx.ty;
    var minX = tx, maxX = tx, minY = ty, maxY = ty;
    if((x = x_a + tx) < minX) {
      minX = x
    }else {
      if(x > maxX) {
        maxX = x
      }
    }
    if((x = x_a + y_c + tx) < minX) {
      minX = x
    }else {
      if(x > maxX) {
        maxX = x
      }
    }
    if((x = y_c + tx) < minX) {
      minX = x
    }else {
      if(x > maxX) {
        maxX = x
      }
    }
    if((y = x_b + ty) < minY) {
      minY = y
    }else {
      if(y > maxY) {
        maxY = y
      }
    }
    if((y = x_b + y_d + ty) < minY) {
      minY = y
    }else {
      if(y > maxY) {
        maxY = y
      }
    }
    if((y = y_d + ty) < minY) {
      minY = y
    }else {
      if(y > maxY) {
        maxY = y
      }
    }
    return bounds.initialize(minX, minY, maxX - minX, maxY - minY)
  };
  p.isRoot = false;
  p.bounding_box = null;
  p.isCheckMouseWithDraw = false;
  p.isOnlyBoundsCheck = false;
  p.setBoundingBox = function(x, y, w, h) {
    return this.bounding_box = new createjs.Rectangle(x, y, w, h)
  };
  createjs.DisplayObject = DisplayObject
})();
this.createjs = this.createjs || {};
(function() {
  var Container = function() {
    this.initialize()
  };
  var p = Container.prototype = new createjs.DisplayObject;
  p.children = null;
  p.mouseChildren = true;
  p.DisplayObject_initialize = p.initialize;
  p.initialize = function() {
    this.DisplayObject_initialize();
    this.children = []
  };
  p.isVisible = function() {
    var hasContent = this.cacheCanvas || this.children.length;
    return!!(this.visible && (this.alpha > 0 && (this.scaleX != 0 && (this.scaleY != 0 && hasContent))))
  };
  p.DisplayObject_draw = p.draw;
  p.draw = function(ctx, ignoreCache) {
    if(this.DisplayObject_draw(ctx, ignoreCache)) {
      return true
    }
    var list = this.children.slice(0);
    for(var i = 0, l = list.length;i < l;i++) {
      var child = list[i];
      if(!child.isVisible()) {
        continue
      }
      ctx.save();
      child.updateContext(ctx);
      child.draw(ctx);
      ctx.restore()
    }
    return true
  };
  p.addChild = function(child) {
    if(child == null) {
      return child
    }
    var l = arguments.length;
    if(l > 1) {
      for(var i = 0;i < l;i++) {
        this.addChild(arguments[i])
      }
      return arguments[l - 1]
    }
    if(child.parent) {
      child.parent.removeChild(child)
    }
    child.parent = this;
    this.children.push(child);
    return child
  };
  p.addChildAt = function(child, index) {
    var l = arguments.length;
    var indx = arguments[l - 1];
    if(indx < 0 || indx > this.children.length) {
      return arguments[l - 2]
    }
    if(l > 2) {
      for(var i = 0;i < l - 1;i++) {
        this.addChildAt(arguments[i], indx + i)
      }
      return arguments[l - 2]
    }
    if(child.parent) {
      child.parent.removeChild(child)
    }
    child.parent = this;
    this.children.splice(index, 0, child);
    return child
  };
  p.removeChild = function(child) {
    var l = arguments.length;
    if(l > 1) {
      var good = true;
      for(var i = 0;i < l;i++) {
        good = good && this.removeChild(arguments[i])
      }
      return good
    }
    return this.removeChildAt(createjs.indexOf(this.children, child))
  };
  p.removeChildAt = function(index) {
    var l = arguments.length;
    if(l > 1) {
      var a = [];
      for(var i = 0;i < l;i++) {
        a[i] = arguments[i]
      }
      a.sort(function(a, b) {
        return b - a
      });
      var good = true;
      for(var i = 0;i < l;i++) {
        good = good && this.removeChildAt(a[i])
      }
      return good
    }
    if(index < 0 || index > this.children.length - 1) {
      return false
    }
    var child = this.children[index];
    if(child) {
      child.parent = null
    }
    this.children.splice(index, 1);
    return true
  };
  p.removeAllChildren = function() {
    var kids = this.children;
    while(kids.length) {
      kids.pop().parent = null
    }
  };
  p.getChildAt = function(index) {
    return this.children[index]
  };
  p.getChildByName = function(name) {
    var kids = this.children;
    for(var i = 0, l = kids.length;i < l;i++) {
      if(kids[i].name == name) {
        return kids[i]
      }
    }
    return null
  };
  p.sortChildren = function(sortFunction) {
    this.children.sort(sortFunction)
  };
  p.getChildIndex = function(child) {
    return createjs.indexOf(this.children, child)
  };
  p.getNumChildren = function() {
    return this.children.length
  };
  p.swapChildrenAt = function(index1, index2) {
    var kids = this.children;
    var o1 = kids[index1];
    var o2 = kids[index2];
    if(!o1 || !o2) {
      return
    }
    kids[index1] = o2;
    kids[index2] = o1
  };
  p.swapChildren = function(child1, child2) {
    var kids = this.children;
    var index1, index2;
    for(var i = 0, l = kids.length;i < l;i++) {
      if(kids[i] == child1) {
        index1 = i
      }
      if(kids[i] == child2) {
        index2 = i
      }
      if(index1 != null && index2 != null) {
        break
      }
    }
    if(i == l) {
      return
    }
    kids[index1] = child2;
    kids[index2] = child1
  };
  p.setChildIndex = function(child, index) {
    var kids = this.children, l = kids.length;
    if(child.parent != this || (index < 0 || index >= l)) {
      return
    }
    for(var i = 0;i < l;i++) {
      if(kids[i] == child) {
        break
      }
    }
    if(i == l || i == index) {
      return
    }
    kids.splice(i, 1);
    kids.splice(index, 0, child)
  };
  p.contains = function(child) {
    while(child) {
      if(child == this) {
        return true
      }
      child = child.parent
    }
    return false
  };
  p.hitTest = function(x, y) {
    return this.getObjectUnderPoint(x, y) != null
  };
  p.getObjectsUnderPoint = function(x, y) {
    var arr = [];
    var pt = this.localToGlobal(x, y);
    this._getObjectsUnderPoint(pt.x, pt.y, arr);
    return arr
  };
  p.getObjectUnderPoint = function(x, y) {
    var pt = this.localToGlobal(x, y);
    return this._getObjectsUnderPoint(pt.x, pt.y)
  };
  p.DisplayObject_getBounds = p.getBounds;
  p.getBounds = function() {
    return this._getBounds(null, true)
  };
  p.getTransformedBounds = function() {
    return this._getBounds()
  };
  p.clone = function(recursive) {
    var o = new Container;
    this.cloneProps(o);
    if(recursive) {
      var arr = o.children = [];
      for(var i = 0, l = this.children.length;i < l;i++) {
        var clone = this.children[i].clone(recursive);
        clone.parent = o;
        arr.push(clone)
      }
    }
    return o
  };
  p.toString = function() {
    return"[Container (name=" + this.name + ")]"
  };
  p.DisplayObject__tick = p._tick;
  p._tick = function(params) {
    for(var i = this.children.length - 1;i >= 0;i--) {
      var child = this.children[i];
      if(child._tick) {
        child._tick(params)
      }
    }
    this.DisplayObject__tick(params)
  };
  p._getObjectsUnderPoint = function(x, y, arr, mouse) {
    var i, child;
    var l = this.children.length;
    if(!isDesktopBrowser) {
      var bb, match, result;
      for(i = l - 1;i >= 0;i--) {
        child = this.children[i];
        if(!child.visible || (!child.mouseEnabled || child.alpha <= 0)) {
          continue
        }
        bb = child.bounding_box;
        if(bb) {
          if(child.isRoot) {
            match = child.x + bb.x <= x && (x < child.x + bb.x + bb.width && (child.y + bb.y <= y && y < child.y + bb.y + bb.height))
          }else {
            match = (child.x + bb.x) * scaleFactor <= x && (x < scaleFactor * (child.x + bb.x + bb.width) && ((child.y + bb.y) * scaleFactor <= y && y < scaleFactor * (child.y + bb.y + bb.height)))
          }
          if(match) {
            if(arr) {
              arr.push(child);
              continue
            }else {
              return child
            }
          }
        }else {
          if(child.isCheckMouseWithDraw) {
            var ctx = createjs.DisplayObject._hitTestContext;
            var mtx = this._matrix;
            var hitArea = mouse && child.hitArea;
            child.getConcatenatedMatrix(mtx);
            if(hitArea) {
              mtx.appendTransform(hitArea.x, hitArea.y, hitArea.scaleX, hitArea.scaleY, hitArea.rotation, hitArea.skewX, hitArea.skewY, hitArea.regX, hitArea.regY);
              mtx.alpha = hitArea.alpha
            }
            ctx.globalAlpha = mtx.alpha;
            ctx.setTransform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx - x, mtx.ty - y);
            (hitArea || child).draw(ctx);
            if(!this._testHit(ctx)) {
              continue
            }
            ctx.setTransform(1, 0, 0, 1, 0, 0);
            ctx.clearRect(0, 0, 2, 2);
            if(arr) {
              arr.push(child)
            }else {
              return mouse && !this.mouseChildren ? this : child
            }
          }
        }
        if(child instanceof Container) {
          if(child.isRoot) {
            result = child._getObjectsUnderPoint(x - (child.x + child.regX), y - (child.y + child.regY), arr, mouse)
          }else {
            result = child._getObjectsUnderPoint(x - (child.x + child.regX) * scaleFactor, y - (child.y + child.regY) * scaleFactor, arr, mouse)
          }
          if(result) {
            if(arr) {
              arr.push(result);
              continue
            }else {
              return result
            }
          }
        }
      }
      return null
    }
    var ctx = createjs.DisplayObject._hitTestContext;
    var mtx = this._matrix;
    for(i = l - 1;i >= 0;i--) {
      child = this.children[i];
      var hitArea = mouse && child.hitArea;
      if(!child.visible || (!hitArea && !child.isVisible() || mouse && !child.mouseEnabled)) {
        continue
      }
      if(!hitArea && child instanceof Container) {
        var result = child._getObjectsUnderPoint(x, y, arr, mouse);
        if(!arr && result) {
          return mouse && !this.mouseChildren ? this : result
        }
      }else {
        child.getConcatenatedMatrix(mtx);
        if(hitArea) {
          mtx.appendTransform(hitArea.x, hitArea.y, hitArea.scaleX, hitArea.scaleY, hitArea.rotation, hitArea.skewX, hitArea.skewY, hitArea.regX, hitArea.regY);
          mtx.alpha = hitArea.alpha
        }
        if(child.isOnlyBoundsCheck) {
          var bb = child.bounding_box;
          if(bb) {
            if((x - mtx.tx) / scaleFactor >= bb.x && ((x - mtx.tx) / scaleFactor <= bb.x + bb.width && ((y - mtx.ty) / scaleFactor >= bb.y && (y - mtx.ty) / scaleFactor <= bb.y + bb.height))) {
            }else {
              continue
            }
          }
        }else {
          ctx.globalAlpha = mtx.alpha;
          ctx.setTransform(mtx.a, mtx.b, mtx.c, mtx.d, mtx.tx - x, mtx.ty - y);
          (hitArea || child).draw(ctx);
          if(!this._testHit(ctx)) {
            continue
          }
          ctx.setTransform(1, 0, 0, 1, 0, 0);
          ctx.clearRect(0, 0, 2, 2)
        }
        if(arr) {
          arr.push(child)
        }else {
          return mouse && !this.mouseChildren ? this : child
        }
      }
    }
    return null
  };
  p._getBounds = function(matrix, ignoreTransform) {
    var bounds = this.DisplayObject_getBounds();
    if(bounds) {
      return this._transformBounds(bounds, matrix, ignoreTransform)
    }
    var minX, maxX, minY, maxY;
    var mtx = ignoreTransform ? this._matrix.identity() : this.getMatrix(this._matrix);
    if(matrix) {
      mtx.prependMatrix(matrix)
    }
    var l = this.children.length;
    for(var i = 0;i < l;i++) {
      var child = this.children[i];
      if(!child.visible || !(bounds = child._getBounds(mtx))) {
        continue
      }
      var x1 = bounds.x, y1 = bounds.y, x2 = x1 + bounds.width, y2 = y1 + bounds.height;
      if(x1 < minX || minX == null) {
        minX = x1
      }
      if(x2 > maxX || maxX == null) {
        maxX = x2
      }
      if(y1 < minY || minY == null) {
        minY = y1
      }
      if(y2 > maxY || maxY == null) {
        maxY = y2
      }
    }
    return maxX == null ? null : this._rectangle.initialize(minX, minY, maxX - minX, maxY - minY)
  };
  createjs.Container = Container
})();
this.createjs = this.createjs || {};
(function() {
  var Stage = function(canvas) {
    this.initialize(canvas)
  };
  var p = Stage.prototype = new createjs.Container;
  Stage._snapToPixelEnabled = false;
  p.autoClear = true;
  p.canvas = null;
  p.mouseX = 0;
  p.mouseY = 0;
  p.snapToPixelEnabled = false;
  p.mouseInBounds = false;
  p.tickOnUpdate = true;
  p.mouseMoveOutside = false;
  p.nextStage = null;
  p._pointerData = null;
  p._pointerCount = 0;
  p._primaryPointerID = null;
  p._mouseOverIntervalID = null;
  p.Container_initialize = p.initialize;
  p.initialize = function(canvas) {
    this.Container_initialize();
    this.canvas = typeof canvas == "string" ? document.getElementById(canvas) : canvas;
    this._pointerData = {};
    this.enableDOMEvents(true)
  };
  p.update = function(params) {
    if(!this.canvas) {
      return
    }
    if(this.tickOnUpdate) {
      this.dispatchEvent("tickstart");
      this._tick(arguments.length ? arguments : null);
      this.dispatchEvent("tickend")
    }
    this.dispatchEvent("drawstart");
    Stage._snapToPixelEnabled = this.snapToPixelEnabled;
    if(this.autoClear) {
      this.clear()
    }
    var ctx = this.canvas.getContext("2d");
    ctx.save();
    this.updateContext(ctx);
    this.draw(ctx, false);
    ctx.restore();
    this.dispatchEvent("drawend")
  };
  p.handleEvent = function(evt) {
    if(evt.type == "tick") {
      this.update(evt)
    }
  };
  p.clear = function() {
    if(!this.canvas) {
      return
    }
    var ctx = this.canvas.getContext("2d");
    ctx.setTransform(1, 0, 0, 1, 0, 0);
    ctx.clearRect(0, 0, this.canvas.width + 1, this.canvas.height + 1)
  };
  p.toDataURL = function(backgroundColor, mimeType) {
    if(!mimeType) {
      mimeType = "image/png"
    }
    var ctx = this.canvas.getContext("2d");
    var w = this.canvas.width;
    var h = this.canvas.height;
    var data;
    if(backgroundColor) {
      data = ctx.getImageData(0, 0, w, h);
      var compositeOperation = ctx.globalCompositeOperation;
      ctx.globalCompositeOperation = "destination-over";
      ctx.fillStyle = backgroundColor;
      ctx.fillRect(0, 0, w, h)
    }
    var dataURL = this.canvas.toDataURL(mimeType);
    if(backgroundColor) {
      ctx.clearRect(0, 0, w + 1, h + 1);
      ctx.putImageData(data, 0, 0);
      ctx.globalCompositeOperation = compositeOperation
    }
    return dataURL
  };
  p.enableMouseOver = function(frequency) {
    if(this._mouseOverIntervalID) {
      clearInterval(this._mouseOverIntervalID);
      this._mouseOverIntervalID = null;
      if(frequency == 0) {
        this._testMouseOver(true)
      }
    }
    if(frequency == null) {
      frequency = 20
    }else {
      if(frequency <= 0) {
        return
      }
    }
    var o = this;
    this._mouseOverIntervalID = setInterval(function() {
      o._testMouseOver()
    }, 1E3 / Math.min(50, frequency))
  };
  p.enableDOMEvents = function(enable) {
    if(enable == null) {
      enable = true
    }
    var n, o, ls = this._eventListeners;
    if(!enable && ls) {
      for(n in ls) {
        o = ls[n];
        o.t.removeEventListener(n, o.f, false)
      }
      this._eventListeners = null
    }else {
      if(enable && (!ls && this.canvas)) {
        var t = window.addEventListener ? window : document;
        var _this = this;
        ls = this._eventListeners = {};
        ls["mouseup"] = {t:t, f:function(e) {
          _this._handleMouseUp(e)
        }};
        ls["mousemove"] = {t:t, f:function(e) {
          _this._handleMouseMove(e)
        }};
        ls["dblclick"] = {t:t, f:function(e) {
          _this._handleDoubleClick(e)
        }};
        ls["mousedown"] = {t:this.canvas, f:function(e) {
          _this._handleMouseDown(e)
        }};
        for(n in ls) {
          o = ls[n];
          o.t.addEventListener(n, o.f, false)
        }
      }
    }
  };
  p.clone = function() {
    var o = new Stage(null);
    this.cloneProps(o);
    return o
  };
  p.toString = function() {
    return"[Stage (name=" + this.name + ")]"
  };
  p._getElementRect = function(e) {
    var bounds;
    try {
      bounds = e.getBoundingClientRect()
    }catch(err) {
      bounds = {top:e.offsetTop, left:e.offsetLeft, width:e.offsetWidth, height:e.offsetHeight}
    }
    var offX = (window.pageXOffset || (document.scrollLeft || 0)) - (document.clientLeft || (document.body.clientLeft || 0));
    var offY = (window.pageYOffset || (document.scrollTop || 0)) - (document.clientTop || (document.body.clientTop || 0));
    var styles = window.getComputedStyle ? getComputedStyle(e) : e.currentStyle;
    var padL = parseInt(styles.paddingLeft) + parseInt(styles.borderLeftWidth);
    var padT = parseInt(styles.paddingTop) + parseInt(styles.borderTopWidth);
    var padR = parseInt(styles.paddingRight) + parseInt(styles.borderRightWidth);
    var padB = parseInt(styles.paddingBottom) + parseInt(styles.borderBottomWidth);
    return{left:bounds.left + offX + padL, right:bounds.right + offX - padR, top:bounds.top + offY + padT, bottom:bounds.bottom + offY - padB}
  };
  p._getPointerData = function(id) {
    var data = this._pointerData[id];
    if(!data) {
      data = this._pointerData[id] = {x:0, y:0};
      if(this._primaryPointerID == null || this._primaryPointerID == -1) {
        this._primaryPointerID = id
      }
    }
    return data
  };
  p._handleMouseMove = function(e) {
    if(!e) {
      e = window.event
    }
    this._handlePointerMove(-1, e, e.pageX, e.pageY)
  };
  p._handlePointerMove = function(id, e, pageX, pageY) {
    if(!this.canvas) {
      return
    }
    var o = this._getPointerData(id);
    var inBounds = o.inBounds;
    this._updatePointerPosition(id, e, pageX, pageY);
    if(!inBounds && (!o.inBounds && !this.mouseMoveOutside)) {
      return
    }
    if(id == -1 && o.inBounds == !inBounds) {
      this._dispatchMouseEvent(this, inBounds ? "mouseleave" : "mouseenter", false, id, o, e)
    }
    this._dispatchMouseEvent(this, "stagemousemove", false, id, o, e);
    this._dispatchMouseEvent(o.target, "pressmove", true, id, o, e);
    var oEvent = o.event;
    if(oEvent && oEvent.hasEventListener("mousemove")) {
      oEvent.dispatchEvent(new createjs.MouseEvent("mousemove", false, false, o.x, o.y, e, id, id == this._primaryPointerID, o.rawX, o.rawY), oTarget)
    }
    this.nextStage && this.nextStage._handlePointerMove(id, e, pageX, pageY)
  };
  p._updatePointerPosition = function(id, e, pageX, pageY) {
    var rect = this._getElementRect(this.canvas);
    pageX -= rect.left;
    pageY -= rect.top;
    var w = this.canvas.width;
    var h = this.canvas.height;
    pageX /= (rect.right - rect.left) / w;
    pageY /= (rect.bottom - rect.top) / h;
    var o = this._getPointerData(id);
    if(o.inBounds = pageX >= 0 && (pageY >= 0 && (pageX <= w - 1 && pageY <= h - 1))) {
      o.x = pageX;
      o.y = pageY
    }else {
      if(this.mouseMoveOutside) {
        o.x = pageX < 0 ? 0 : pageX > w - 1 ? w - 1 : pageX;
        o.y = pageY < 0 ? 0 : pageY > h - 1 ? h - 1 : pageY
      }
    }
    o.posEvtObj = e;
    o.rawX = pageX;
    o.rawY = pageY;
    if(id == this._primaryPointerID) {
      this.mouseX = o.x;
      this.mouseY = o.y;
      this.mouseInBounds = o.inBounds
    }
  };
  p._handleMouseUp = function(e) {
    this._handlePointerUp(-1, e, false)
  };
  p._handlePointerUp = function(id, e, clear) {
    var o = this._getPointerData(id);
    var oTarget = o.target;
    if(oTarget && (oTarget.hasEventListener("pressup") || oTarget.hasEventListener("click"))) {
      if(oTarget.hasEventListener("click") && this._getObjectsUnderPoint(o.x, o.y, null, true) == oTarget) {
        this._dispatchMouseEvent(oTarget, "click", true, id, o, e)
      }
      this._dispatchMouseEvent(oTarget, "pressup", true, id, o, e)
    }else {
      this._dispatchMouseEvent(this, "stagemouseup", false, id, o, e)
    }
    if(clear) {
      if(id == this._primaryPointerID) {
        this._primaryPointerID = null
      }
      delete this._pointerData[id]
    }else {
      o.event = o.target = null
    }
    this.nextStage && this.nextStage._handlePointerUp(id, e, clear)
  };
  p._handleMouseDown = function(e) {
    this._handlePointerDown(-1, e, e.pageX, e.pageY)
  };
  p._handlePointerDown = function(id, e, pageX, pageY) {
    if(pageY != null) {
      this._updatePointerPosition(id, e, pageX, pageY)
    }
    var o = this._getPointerData(id);
    o.target = this._getObjectsUnderPoint(o.x, o.y, null, true);
    this._dispatchMouseEvent(o.target, "mousedown", true, id, o, e);
    if(!o.target || !o.target.hasEventListener("mousedown")) {
      this._dispatchMouseEvent(this, "stagemousedown", false, id, o, e)
    }
    this.nextStage && this.nextStage._handlePointerDown(id, e, pageX, pageY)
  };
  p._testMouseOver = function(clear) {
    if(this._primaryPointerID != -1 || !clear && (this.mouseX == this._mouseOverX && (this.mouseY == this._mouseOverY && this.mouseInBounds))) {
      return
    }
    var o = this._getPointerData(-1);
    var e = o.posEvtObj;
    var target, common = -1, cursor = "", t, i, l;
    if(clear || this.mouseInBounds && (e && e.target == this.canvas)) {
      target = this._getObjectsUnderPoint(this.mouseX, this.mouseY, null, true);
      this._mouseOverX = this.mouseX;
      this._mouseOverY = this.mouseY
    }
    var oldList = this._mouseOverTarget || [];
    var oldTarget = oldList[oldList.length - 1];
    var list = this._mouseOverTarget = [];
    t = target;
    while(t) {
      list.unshift(t);
      if(t.cursor != null) {
        cursor = t.cursor
      }
      t = t.parent
    }
    this.canvas.style.cursor = cursor;
    for(i = 0, l = list.length;i < l;i++) {
      if(list[i] != oldList[i]) {
        break
      }
      common = i
    }
    if(oldTarget != target) {
      this._dispatchMouseEvent(oldTarget, "mouseout", true, -1, o, e)
    }
    for(i = oldList.length - 1;i > common;i--) {
      this._dispatchMouseEvent(oldList[i], "rollout", false, -1, o, e)
    }
    for(i = list.length - 1;i > common;i--) {
      this._dispatchMouseEvent(list[i], "rollover", false, -1, o, e)
    }
    if(oldTarget != target) {
      this._dispatchMouseEvent(target, "mouseover", true, -1, o, e)
    }
  };
  p._handleDoubleClick = function(e) {
    var o = this._getPointerData(-1);
    var target = this._getObjectsUnderPoint(o.x, o.y, null, true);
    this._dispatchMouseEvent(target, "dblclick", true, -1, o, e);
    this.nextStage && this.nextStage._handleDoubleClick(e)
  };
  p._dispatchMouseEvent = function(target, type, bubbles, pointerId, o, nativeEvent) {
    if(!target || !bubbles && !target.hasEventListener(type)) {
      return
    }
    var evt = new createjs.MouseEvent(type, bubbles, false, o.x, o.y, nativeEvent, pointerId, pointerId == this._primaryPointerID, o.rawX, o.rawY);
    target.dispatchEvent(evt)
  };
  createjs.Stage = Stage
})();
this.createjs = this.createjs || {};
(function() {
  var Bitmap = function(imageOrUri) {
    this.initialize(imageOrUri)
  };
  var p = Bitmap.prototype = new createjs.DisplayObject;
  p.image = null;
  p.snapToPixel = true;
  p.sourceRect = null;
  p.DisplayObject_initialize = p.initialize;
  p.initialize = function(imageOrUri) {
    this.DisplayObject_initialize();
    if(typeof imageOrUri == "string") {
      this.image = document.createElement("img");
      this.image.src = imageOrUri
    }else {
      this.image = imageOrUri
    }
  };
  p.isVisible = function() {
    var hasContent = this.cacheCanvas || this.image && (this.image.complete || (this.image.getContext || this.image.readyState >= 2));
    return!!(this.visible && (this.alpha > 0 && (this.scaleX != 0 && (this.scaleY != 0 && hasContent))))
  };
  p.DisplayObject_draw = p.draw;
  p.draw = function(ctx, ignoreCache) {
    if(this.DisplayObject_draw(ctx, ignoreCache)) {
      return true
    }
    var rect = this.sourceRect;
    if(rect) {
      ctx.drawImage(this.image, rect.x, rect.y, rect.width, rect.height, 0, 0, rect.width, rect.height)
    }else {
      ctx.drawImage(this.image, 0, 0)
    }
    return true
  };
  p.DisplayObject_getBounds = p.getBounds;
  p.getBounds = function() {
    var rect = this.DisplayObject_getBounds();
    if(rect) {
      return rect
    }
    var o = this.sourceRect || this.image;
    var hasContent = this.image && (this.image.complete || (this.image.getContext || this.image.readyState >= 2));
    return hasContent ? this._rectangle.initialize(0, 0, o.width, o.height) : null
  };
  p.clone = function() {
    var o = new Bitmap(this.image);
    if(this.sourceRect) {
      o.sourceRect = this.sourceRect.clone()
    }
    this.cloneProps(o);
    return o
  };
  p.toString = function() {
    return"[Bitmap (name=" + this.name + ")]"
  };
  createjs.Bitmap = Bitmap
})();
this.createjs = this.createjs || {};
(function() {
  var Sprite = function(spriteSheet, frameOrAnimation) {
    this.initialize(spriteSheet, frameOrAnimation)
  };
  var p = Sprite.prototype = new createjs.DisplayObject;
  p.currentFrame = 0;
  p.currentAnimation = null;
  p.paused = true;
  p.spriteSheet = null;
  p.snapToPixel = true;
  p.isLoop = true;
  p.offset = 0;
  p.currentAnimationFrame = 0;
  p.framerate = 0;
  p._advanceCount = 0;
  p._animation = null;
  p._currentFrame = null;
  p.rectMask = null;
  p.DisplayObject_initialize = p.initialize;
  p.initialize = function(spriteSheet, frameOrAnimation) {
    this.DisplayObject_initialize();
    this.spriteSheet = spriteSheet;
    if(frameOrAnimation) {
      this.gotoAndPlay(frameOrAnimation)
    }
  };
  p.isVisible = function() {
    var hasContent = this.cacheCanvas || this.spriteSheet.complete;
    return!!(this.visible && (this.alpha > 0 && (this.scaleX != 0 && (this.scaleY != 0 && hasContent))))
  };
  p.DisplayObject_draw = p.draw;
  p.draw = function(ctx, ignoreCache) {
    if(this.DisplayObject_draw(ctx, ignoreCache)) {
      return true
    }
    this._normalizeFrame();
    var o = this.spriteSheet.getFrame(this._currentFrame | 0);
    if(!o) {
      return false
    }
    var rect = o.rect;
    if(this.rectMask) {
      ctx.drawImage(o.image, rect.x + this.rectMask.x, rect.y + this.rectMask.y, rect.width + this.rectMask.width, rect.height + this.rectMask.height, -o.regX + this.rectMask.x, -o.regY + this.rectMask.y, rect.width + this.rectMask.width, rect.height + this.rectMask.height)
    }else {
      if(rect.width >= 1 && rect.height >= 1) {
        ctx.drawImage(o.image, rect.x, rect.y, rect.width, rect.height, -o.regX, -o.regY, rect.width, rect.height)
      }
    }
    return true
  };
  p.play = function() {
    this.paused = false
  };
  p.stop = function() {
    this.paused = true
  };
  p.gotoAndPlay = function(frameOrAnimation) {
    this.paused = false;
    this._goto(frameOrAnimation)
  };
  p.gotoAndStop = function(frameOrAnimation) {
    this.paused = true;
    this._goto(frameOrAnimation)
  };
  p.advance = function(time) {
    var speed = this._animation && this._animation.speed || 1;
    var fps = this.framerate || this.spriteSheet.framerate;
    var t = fps && time != null ? time / (1E3 / fps) : 1;
    if(this._animation) {
      this.currentAnimationFrame += t * speed
    }else {
      this._currentFrame += t * speed
    }
    this._normalizeFrame()
  };
  p.DisplayObject_getBounds = p.getBounds;
  p.getBounds = function() {
    return this.DisplayObject_getBounds() || this.spriteSheet.getFrameBounds(this.currentFrame, this._rectangle)
  };
  p.clone = function() {
    var o = new Sprite(this.spriteSheet);
    this.cloneProps(o);
    return o
  };
  p.toString = function() {
    return"[Sprite (name=" + this.name + ")]"
  };
  p.DisplayObject__tick = p._tick;
  p._tick = function(params) {
    if(!this.paused) {
      this.advance(params && (params[0] && params[0].delta))
    }
    this.DisplayObject__tick(params)
  };
  p._normalizeFrame = function() {
    var animation = this._animation;
    var paused = this.paused;
    var frame = this._currentFrame;
    var animFrame = this.currentAnimationFrame;
    var l;
    if(animation) {
      l = animation.frames.length;
      if((animFrame | 0) >= l) {
        var next = animation.next;
        if(this._dispatchAnimationEnd(animation, frame, paused, next, l - 1)) {
        }else {
          if(next && this.isLoop) {
            return this._goto(next, animFrame - l)
          }else {
            this.paused = true;
            animFrame = this.currentAnimationFrame = animation.frames.length - 1;
            this._currentFrame = animation.frames[animFrame]
          }
        }
      }else {
        this._currentFrame = animation.frames[animFrame | 0]
      }
    }else {
      l = this.spriteSheet.getNumFrames();
      if(frame >= l) {
        if(!this._dispatchAnimationEnd(animation, frame, paused, l - 1)) {
          if((this._currentFrame -= l) >= l) {
            return this._normalizeFrame()
          }
        }
      }
    }
    this.currentFrame = this._currentFrame | 0
  };
  p._dispatchAnimationEnd = function(animation, frame, paused, next, end) {
    var name = animation ? animation.name : null;
    if(this.hasEventListener("animationend")) {
      var evt = new createjs.Event("animationend");
      evt.name = name;
      evt.next = next;
      this.dispatchEvent(evt)
    }
    var changed = this._animation != animation || this._currentFrame != frame;
    if(!changed && (!paused && this.paused)) {
      this.currentAnimationFrame = end;
      changed = true
    }
    return changed
  };
  p.DisplayObject_cloneProps = p.cloneProps;
  p.cloneProps = function(o) {
    this.DisplayObject_cloneProps(o);
    o.currentFrame = this.currentFrame;
    o._currentFrame = this._currentFrame;
    o.currentAnimation = this.currentAnimation;
    o.paused = this.paused;
    o._animation = this._animation;
    o.currentAnimationFrame = this.currentAnimationFrame;
    o.framerate = this.framerate
  };
  p._goto = function(frameOrAnimation, frame) {
    if(isNaN(frameOrAnimation)) {
      var data = this.spriteSheet.getAnimation(frameOrAnimation);
      if(data) {
        this.currentAnimationFrame = frame || 0;
        this._animation = data;
        this.currentAnimation = frameOrAnimation;
        this._normalizeFrame()
      }
    }else {
      this.currentAnimationFrame = 0;
      this.currentAnimation = this._animation = null;
      this._currentFrame = frameOrAnimation;
      this._normalizeFrame()
    }
  };
  createjs.Sprite = Sprite
})();
this.createjs = this.createjs || {};
(function() {
  var e = "BitmapAnimation is deprecated in favour of Sprite. See VERSIONS file for info on changes.";
  if(!createjs.Sprite) {
    throw e;
  }
  (createjs.BitmapAnimation = function(spriteSheet) {
    console.log(e);
    this.initialize(spriteSheet)
  }).prototype = new createjs.Sprite
})();
this.createjs = this.createjs || {};
(function() {
  var Shape = function(graphics) {
    this.initialize(graphics)
  };
  var p = Shape.prototype = new createjs.DisplayObject;
  p.graphics = null;
  p.DisplayObject_initialize = p.initialize;
  p.initialize = function(graphics) {
    this.DisplayObject_initialize();
    this.graphics = graphics ? graphics : new createjs.Graphics
  };
  p.isVisible = function() {
    var hasContent = this.cacheCanvas || this.graphics && !this.graphics.isEmpty();
    return!!(this.visible && (this.alpha > 0 && (this.scaleX != 0 && (this.scaleY != 0 && hasContent))))
  };
  p.DisplayObject_draw = p.draw;
  p.draw = function(ctx, ignoreCache) {
    if(this.DisplayObject_draw(ctx, ignoreCache)) {
      return true
    }
    this.graphics.draw(ctx);
    return true
  };
  p.clone = function(recursive) {
    var o = new Shape(recursive && this.graphics ? this.graphics.clone() : this.graphics);
    this.cloneProps(o);
    return o
  };
  p.toString = function() {
    return"[Shape (name=" + this.name + ")]"
  };
  createjs.Shape = Shape
})();
this.createjs = this.createjs || {};
(function() {
  var Text = function(text, font, color) {
    this.initialize(text, font, color)
  };
  var p = Text.prototype = new createjs.DisplayObject;
  var canvas = createjs.createCanvas ? createjs.createCanvas() : document.createElement("canvas");
  if(canvas.getContext) {
    Text._workingContext = canvas.getContext("2d");
    canvas.width = canvas.height = 1
  }
  Text.H_OFFSETS = {start:0, left:0, center:-0.5, end:-1, right:-1};
  Text.V_OFFSETS = {top:0, hanging:-0.01, middle:-0.4, alphabetic:-0.8, ideographic:-0.85, bottom:-1};
  p.text = "";
  p.font = null;
  p.color = null;
  p.textAlign = "left";
  p.textBaseline = "top";
  p.maxWidth = null;
  p.outline = 0;
  p.lineHeight = 0;
  p.lineWidth = null;
  p.DisplayObject_initialize = p.initialize;
  p.initialize = function(text, font, color) {
    this.DisplayObject_initialize();
    this.text = text;
    this.font = font;
    this.color = color
  };
  p.isVisible = function() {
    var hasContent = this.cacheCanvas || this.text != null && this.text !== "";
    return!!(this.visible && (this.alpha > 0 && (this.scaleX != 0 && (this.scaleY != 0 && hasContent))))
  };
  p.DisplayObject_draw = p.draw;
  p.draw = function(ctx, ignoreCache) {
    if(this.DisplayObject_draw(ctx, ignoreCache)) {
      return true
    }
    var col = this.color || "#000";
    if(this.outline) {
      ctx.strokeStyle = col;
      ctx.lineWidth = this.outline * 1
    }else {
      ctx.fillStyle = col
    }
    this._drawText(this._prepContext(ctx));
    return true
  };
  p.getMeasuredWidth = function() {
    return this._prepContext(Text._workingContext).measureText(this.text).width
  };
  p.getMeasuredLineHeight = function() {
    return this._prepContext(Text._workingContext).measureText("M").width * 1.2
  };
  p.getMeasuredHeight = function() {
    return this._drawText(null, {}).height
  };
  p.DisplayObject_getBounds = p.getBounds;
  p.getBounds = function() {
    var rect = this.DisplayObject_getBounds();
    if(rect) {
      return rect
    }
    if(this.text == null || this.text == "") {
      return null
    }
    var o = this._drawText(null, {});
    var w = this.maxWidth && this.maxWidth < o.width ? this.maxWidth : o.width;
    var x = w * Text.H_OFFSETS[this.textAlign || "left"];
    var lineHeight = this.lineHeight || this.getMeasuredLineHeight();
    var y = lineHeight * Text.V_OFFSETS[this.textBaseline || "top"];
    return this._rectangle.initialize(x, y, w, o.height)
  };
  p.clone = function() {
    var o = new Text(this.text, this.font, this.color);
    this.cloneProps(o);
    return o
  };
  p.toString = function() {
    return"[Text (text=" + (this.text.length > 20 ? this.text.substr(0, 17) + "..." : this.text) + ")]"
  };
  p.DisplayObject_cloneProps = p.cloneProps;
  p.cloneProps = function(o) {
    this.DisplayObject_cloneProps(o);
    o.textAlign = this.textAlign;
    o.textBaseline = this.textBaseline;
    o.maxWidth = this.maxWidth;
    o.outline = this.outline;
    o.lineHeight = this.lineHeight;
    o.lineWidth = this.lineWidth
  };
  p._prepContext = function(ctx) {
    ctx.font = this.font;
    ctx.textAlign = this.textAlign || "left";
    ctx.textBaseline = this.textBaseline || "top";
    return ctx
  };
  p._drawText = function(ctx, o) {
    var paint = !!ctx;
    if(!paint) {
      ctx = this._prepContext(Text._workingContext)
    }
    var lineHeight = this.lineHeight || this.getMeasuredLineHeight();
    var maxW = 0, count = 0;
    var lines = String(this.text).split(/(?:\r\n|\r|\n)/);
    for(var i = 0, l = lines.length;i < l;i++) {
      var str = lines[i];
      var w = null;
      if(this.lineWidth != null && (w = ctx.measureText(str).width) > this.lineWidth) {
        var words = str.split(/(\s)/);
        str = words[0];
        w = ctx.measureText(str).width;
        for(var j = 1, jl = words.length;j < jl;j += 2) {
          var wordW = ctx.measureText(words[j] + words[j + 1]).width;
          if(w + wordW > this.lineWidth) {
            if(paint) {
              this._drawTextLine(ctx, str, count * lineHeight)
            }
            if(w > maxW) {
              maxW = w
            }
            str = words[j + 1];
            w = ctx.measureText(str).width;
            count++
          }else {
            str += words[j] + words[j + 1];
            w += wordW
          }
        }
      }
      if(paint) {
        this._drawTextLine(ctx, str, count * lineHeight)
      }
      if(o && w == null) {
        w = ctx.measureText(str).width
      }
      if(w > maxW) {
        maxW = w
      }
      count++
    }
    if(o) {
      o.count = count;
      o.width = maxW;
      o.height = count * lineHeight
    }
    return o
  };
  p._drawTextLine = function(ctx, text, y) {
    if(this.outline) {
      ctx.strokeText(text, 0, y, this.maxWidth || 65535)
    }else {
      ctx.fillText(text, 0, y, this.maxWidth || 65535)
    }
  };
  createjs.Text = Text
})();
this.createjs = this.createjs || {};
(function() {
  function BitmapText(text, spriteSheet) {
    this.initialize(text, spriteSheet)
  }
  var p = BitmapText.prototype = new createjs.DisplayObject;
  p.text = "";
  p.spriteSheet = null;
  p.lineHeight = 0;
  p.letterSpacing = 0;
  p.isNeedCenter = false;
  p.centerX = 0;
  p.centerY = 0;
  p.textBounds;
  p.spaceWidth = 0;
  p.postfix = "";
  p.DisplayObject_initialize = p.initialize;
  p.initialize = function(text, spriteSheet) {
    this.DisplayObject_initialize();
    this.text = text;
    this.spriteSheet = spriteSheet;
    p.textBounds = new createjs.Rectangle
  };
  p.DisplayObject_draw = p.draw;
  p.draw = function(ctx, ignoreCache) {
    if(this.DisplayObject_draw(ctx, ignoreCache)) {
      return true
    }
    this._drawText(ctx)
  };
  p.isVisible = function() {
    var hasContent = this.cacheCanvas || this.spriteSheet && (this.spriteSheet.complete && this.text);
    return!!(this.visible && (this.alpha > 0 && (this.scaleX != 0 && (this.scaleY != 0 && hasContent))))
  };
  p.getBounds = function() {
    var bounds = this._rectangle;
    this._drawText(null, bounds);
    return bounds.width ? bounds : null
  };
  p._getFrame = function(character, spriteSheet) {
    var c, o = spriteSheet.getAnimation(character + this.postfix);
    if(!o) {
      character != (c = character.toUpperCase()) || (character != (c = character.toLowerCase()) || (c = null));
      if(c) {
        o = spriteSheet.getAnimation(c + this.postfix)
      }
    }
    return o && spriteSheet.getFrame(o.frames[0])
  };
  p._getLineHeight = function(ss) {
    var frame = this._getFrame("1", ss) || (this._getFrame("T", ss) || (this._getFrame("L", ss) || ss.getFrame(0)));
    return frame ? frame.rect.height : 1
  };
  p._getSpaceWidth = function(ss) {
    var frame = this._getFrame("1", ss) || (this._getFrame("l", ss) || (this._getFrame("e", ss) || (this._getFrame("a", ss) || ss.getFrame(0))));
    return frame ? frame.rect.width : 1
  };
  p._drawText = function(ctx, bounds) {
    var w, h, rx, x = 0, y = 0, spaceW = this.spaceWidth, lineH = this.lineHeight, ss = this.spriteSheet;
    if(spaceW == 0) {
      spaceW = this._getSpaceWidth(ss)
    }
    if(lineH == 0) {
      lineH = this._getLineHeight(ss)
    }
    var maxX = 0;
    for(var i = 0, l = this.text.length;i < l;i++) {
      var character = this.text.charAt(i);
      if(character == " ") {
        x += spaceW;
        continue
      }else {
        if(character == "\n" || character == "\r") {
          if(character == "\r" && this.text.charAt(i + 1) == "\n") {
            i++
          }
          if(x - rx > maxX) {
            maxX = x - rx
          }
          x = 0;
          y += lineH;
          continue
        }
      }
      var o = this._getFrame(character, ss);
      if(!o) {
        continue
      }
      var rect = o.rect;
      rx = o.regX;
      w = rect.width;
      ctx && ctx.drawImage(o.image, rect.x, rect.y, w, h = rect.height, x - rx, y - o.regY, w, h);
      x += w + this.letterSpacing
    }
    if(x - rx > maxX) {
      maxX = x - rx
    }
    if(bounds) {
      bounds.width = maxX - this.letterSpacing;
      bounds.height = y + lineH
    }
    this.textBounds.width = maxX - this.letterSpacing;
    this.textBounds.height = y + lineH
  };
  createjs.BitmapText = BitmapText
})();
this.createjs = this.createjs || {};
(function() {
  var SpriteSheetUtils = function() {
    throw"SpriteSheetUtils cannot be instantiated";
  };
  var canvas = createjs.createCanvas ? createjs.createCanvas() : document.createElement("canvas");
  if(canvas.getContext) {
    SpriteSheetUtils._workingCanvas = canvas;
    SpriteSheetUtils._workingContext = canvas.getContext("2d");
    canvas.width = canvas.height = 1
  }
  SpriteSheetUtils.addFlippedFrames = function(spriteSheet, horizontal, vertical, both) {
    if(!horizontal && (!vertical && !both)) {
      return
    }
    var count = 0;
    if(horizontal) {
      SpriteSheetUtils._flip(spriteSheet, ++count, true, false)
    }
    if(vertical) {
      SpriteSheetUtils._flip(spriteSheet, ++count, false, true)
    }
    if(both) {
      SpriteSheetUtils._flip(spriteSheet, ++count, true, true)
    }
  };
  SpriteSheetUtils.extractFrame = function(spriteSheet, frameOrAnimation) {
    if(isNaN(frameOrAnimation)) {
      frameOrAnimation = spriteSheet.getAnimation(frameOrAnimation).frames[0]
    }
    var data = spriteSheet.getFrame(frameOrAnimation);
    if(!data) {
      return null
    }
    var r = data.rect;
    var canvas = SpriteSheetUtils._workingCanvas;
    canvas.width = r.width;
    canvas.height = r.height;
    SpriteSheetUtils._workingContext.drawImage(data.image, r.x, r.y, r.width, r.height, 0, 0, r.width, r.height);
    var img = document.createElement("img");
    img.src = canvas.toDataURL("image/png");
    return img
  };
  SpriteSheetUtils.mergeAlpha = function(rgbImage, alphaImage, canvas) {
    if(!canvas) {
      canvas = createjs.createCanvas ? createjs.createCanvas() : document.createElement("canvas")
    }
    canvas.width = Math.max(alphaImage.width, rgbImage.width);
    canvas.height = Math.max(alphaImage.height, rgbImage.height);
    var ctx = canvas.getContext("2d");
    ctx.save();
    ctx.drawImage(rgbImage, 0, 0);
    ctx.globalCompositeOperation = "destination-in";
    ctx.drawImage(alphaImage, 0, 0);
    ctx.restore();
    return canvas
  };
  SpriteSheetUtils._flip = function(spriteSheet, count, h, v) {
    var imgs = spriteSheet._images;
    var canvas = SpriteSheetUtils._workingCanvas;
    var ctx = SpriteSheetUtils._workingContext;
    var il = imgs.length / count;
    for(var i = 0;i < il;i++) {
      var src = imgs[i];
      src.__tmp = i;
      ctx.setTransform(1, 0, 0, 1, 0, 0);
      ctx.clearRect(0, 0, canvas.width + 1, canvas.height + 1);
      canvas.width = src.width;
      canvas.height = src.height;
      ctx.setTransform(h ? -1 : 1, 0, 0, v ? -1 : 1, h ? src.width : 0, v ? src.height : 0);
      ctx.drawImage(src, 0, 0);
      var img = document.createElement("img");
      img.src = canvas.toDataURL("image/png");
      img.width = src.width;
      img.height = src.height;
      imgs.push(img)
    }
    var frames = spriteSheet._frames;
    var fl = frames.length / count;
    for(i = 0;i < fl;i++) {
      src = frames[i];
      var rect = src.rect.clone();
      img = imgs[src.image.__tmp + il * count];
      var frame = {image:img, rect:rect, regX:src.regX, regY:src.regY};
      if(h) {
        rect.x = img.width - rect.x - rect.width;
        frame.regX = rect.width - src.regX
      }
      if(v) {
        rect.y = img.height - rect.y - rect.height;
        frame.regY = rect.height - src.regY
      }
      frames.push(frame)
    }
    var sfx = "_" + (h ? "h" : "") + (v ? "v" : "");
    var names = spriteSheet._animations;
    var data = spriteSheet._data;
    var al = names.length / count;
    for(i = 0;i < al;i++) {
      var name = names[i];
      src = data[name];
      var anim = {name:name + sfx, frequency:src.frequency, next:src.next, frames:[]};
      if(src.next) {
        anim.next += sfx
      }
      frames = src.frames;
      for(var j = 0, l = frames.length;j < l;j++) {
        anim.frames.push(frames[j] + fl * count)
      }
      data[anim.name] = anim;
      names.push(anim.name)
    }
  };
  createjs.SpriteSheetUtils = SpriteSheetUtils
})();
this.createjs = this.createjs || {};
(function() {
  var SpriteSheetBuilder = function() {
    this.initialize()
  };
  var p = SpriteSheetBuilder.prototype = new createjs.EventDispatcher;
  SpriteSheetBuilder.ERR_DIMENSIONS = "frame dimensions exceed max spritesheet dimensions";
  SpriteSheetBuilder.ERR_RUNNING = "a build is already running";
  p.maxWidth = 2048;
  p.maxHeight = 2048;
  p.spriteSheet = null;
  p.scale = 1;
  p.padding = 1;
  p.timeSlice = 0.3;
  p.progress = -1;
  p._frames = null;
  p._animations = null;
  p._data = null;
  p._nextFrameIndex = 0;
  p._index = 0;
  p._timerID = null;
  p._scale = 1;
  p.initialize = function() {
    this._frames = [];
    this._animations = {}
  };
  p.addFrame = function(source, sourceRect, scale, setupFunction, setupParams, setupScope) {
    if(this._data) {
      throw SpriteSheetBuilder.ERR_RUNNING;
    }
    var rect = sourceRect || (source.bounds || source.nominalBounds);
    if(!rect && source.getBounds) {
      rect = source.getBounds()
    }
    if(!rect) {
      return null
    }
    scale = scale || 1;
    return this._frames.push({source:source, sourceRect:rect, scale:scale, funct:setupFunction, params:setupParams, scope:setupScope, index:this._frames.length, height:rect.height * scale}) - 1
  };
  p.addAnimation = function(name, frames, next, frequency) {
    if(this._data) {
      throw SpriteSheetBuilder.ERR_RUNNING;
    }
    this._animations[name] = {frames:frames, next:next, frequency:frequency}
  };
  p.addMovieClip = function(source, sourceRect, scale) {
    if(this._data) {
      throw SpriteSheetBuilder.ERR_RUNNING;
    }
    var rects = source.frameBounds;
    var rect = sourceRect || (source.bounds || source.nominalBounds);
    if(!rect && source.getBounds) {
      rect = source.getBounds()
    }
    if(!rect && !rects) {
      return null
    }
    var baseFrameIndex = this._frames.length;
    var duration = source.timeline.duration;
    for(var i = 0;i < duration;i++) {
      var r = rects && rects[i] ? rects[i] : rect;
      this.addFrame(source, r, scale, function(frame) {
        var ae = this.actionsEnabled;
        this.actionsEnabled = false;
        this.gotoAndStop(frame);
        this.actionsEnabled = ae
      }, [i], source)
    }
    var labels = source.timeline._labels;
    var lbls = [];
    for(var n in labels) {
      lbls.push({index:labels[n], label:n})
    }
    if(lbls.length) {
      lbls.sort(function(a, b) {
        return a.index - b.index
      });
      for(var i = 0, l = lbls.length;i < l;i++) {
        var label = lbls[i].label;
        var start = baseFrameIndex + lbls[i].index;
        var end = baseFrameIndex + (i == l - 1 ? duration : lbls[i + 1].index);
        var frames = [];
        for(var j = start;j < end;j++) {
          frames.push(j)
        }
        this.addAnimation(label, frames, true)
      }
    }
  };
  p.build = function() {
    if(this._data) {
      throw SpriteSheetBuilder.ERR_RUNNING;
    }
    this._startBuild();
    while(this._drawNext()) {
    }
    this._endBuild();
    return this.spriteSheet
  };
  p.buildAsync = function(timeSlice) {
    if(this._data) {
      throw SpriteSheetBuilder.ERR_RUNNING;
    }
    this.timeSlice = timeSlice;
    this._startBuild();
    var _this = this;
    this._timerID = setTimeout(function() {
      _this._run()
    }, 50 - Math.max(0.01, Math.min(0.99, this.timeSlice || 0.3)) * 50)
  };
  p.stopAsync = function() {
    clearTimeout(this._timerID);
    this._data = null
  };
  p.clone = function() {
    throw"SpriteSheetBuilder cannot be cloned.";
  };
  p.toString = function() {
    return"[SpriteSheetBuilder]"
  };
  p._startBuild = function() {
    var pad = this.padding || 0;
    this.progress = 0;
    this.spriteSheet = null;
    this._index = 0;
    this._scale = this.scale;
    var dataFrames = [];
    this._data = {images:[], frames:dataFrames, animations:this._animations};
    var frames = this._frames.slice();
    frames.sort(function(a, b) {
      return a.height <= b.height ? -1 : 1
    });
    if(frames[frames.length - 1].height + pad * 2 > this.maxHeight) {
      throw SpriteSheetBuilder.ERR_DIMENSIONS;
    }
    var y = 0, x = 0;
    var img = 0;
    while(frames.length) {
      var o = this._fillRow(frames, y, img, dataFrames, pad);
      if(o.w > x) {
        x = o.w
      }
      y += o.h;
      if(!o.h || !frames.length) {
        var canvas = createjs.createCanvas ? createjs.createCanvas() : document.createElement("canvas");
        canvas.width = this._getSize(x, this.maxWidth);
        canvas.height = this._getSize(y, this.maxHeight);
        this._data.images[img] = canvas;
        if(!o.h) {
          x = y = 0;
          img++
        }
      }
    }
  };
  p._getSize = function(size, max) {
    var pow = 4;
    while(Math.pow(2, ++pow) < size) {
    }
    return Math.min(max, Math.pow(2, pow))
  };
  p._fillRow = function(frames, y, img, dataFrames, pad) {
    var w = this.maxWidth;
    var maxH = this.maxHeight;
    y += pad;
    var h = maxH - y;
    var x = pad;
    var height = 0;
    for(var i = frames.length - 1;i >= 0;i--) {
      var frame = frames[i];
      var sc = this._scale * frame.scale;
      var rect = frame.sourceRect;
      var source = frame.source;
      var rx = Math.floor(sc * rect.x - pad);
      var ry = Math.floor(sc * rect.y - pad);
      var rh = Math.ceil(sc * rect.height + pad * 2);
      var rw = Math.ceil(sc * rect.width + pad * 2);
      if(rw > w) {
        throw SpriteSheetBuilder.ERR_DIMENSIONS;
      }
      if(rh > h || x + rw > w) {
        continue
      }
      frame.img = img;
      frame.rect = new createjs.Rectangle(x, y, rw, rh);
      height = height || rh;
      frames.splice(i, 1);
      dataFrames[frame.index] = [x, y, rw, rh, img, Math.round(-rx + sc * source.regX - pad), Math.round(-ry + sc * source.regY - pad)];
      x += rw
    }
    return{w:x, h:height}
  };
  p._endBuild = function() {
    this.spriteSheet = new createjs.SpriteSheet(this._data);
    this._data = null;
    this.progress = 1;
    this.dispatchEvent("complete")
  };
  p._run = function() {
    var ts = Math.max(0.01, Math.min(0.99, this.timeSlice || 0.3)) * 50;
    var t = (new Date).getTime() + ts;
    var complete = false;
    while(t > (new Date).getTime()) {
      if(!this._drawNext()) {
        complete = true;
        break
      }
    }
    if(complete) {
      this._endBuild()
    }else {
      var _this = this;
      this._timerID = setTimeout(function() {
        _this._run()
      }, 50 - ts)
    }
    var p = this.progress = this._index / this._frames.length;
    if(this.hasEventListener("progress")) {
      var evt = new createjs.Event("progress");
      evt.progress = p;
      this.dispatchEvent(evt)
    }
  };
  p._drawNext = function() {
    var frame = this._frames[this._index];
    var sc = frame.scale * this._scale;
    var rect = frame.rect;
    var sourceRect = frame.sourceRect;
    var canvas = this._data.images[frame.img];
    var ctx = canvas.getContext("2d");
    frame.funct && frame.funct.apply(frame.scope, frame.params);
    ctx.save();
    ctx.beginPath();
    ctx.rect(rect.x, rect.y, rect.width, rect.height);
    ctx.clip();
    ctx.translate(Math.ceil(rect.x - sourceRect.x * sc), Math.ceil(rect.y - sourceRect.y * sc));
    ctx.scale(sc, sc);
    frame.source.draw(ctx);
    ctx.restore();
    return++this._index < this._frames.length
  };
  createjs.SpriteSheetBuilder = SpriteSheetBuilder
})();
this.createjs = this.createjs || {};
(function() {
  var DOMElement = function(htmlElement) {
    this.initialize(htmlElement)
  };
  var p = DOMElement.prototype = new createjs.DisplayObject;
  p.htmlElement = null;
  p._oldMtx = null;
  p._visible = false;
  p.DisplayObject_initialize = p.initialize;
  p.initialize = function(htmlElement) {
    if(typeof htmlElement == "string") {
      htmlElement = document.getElementById(htmlElement)
    }
    this.DisplayObject_initialize();
    this.mouseEnabled = false;
    this.htmlElement = htmlElement;
    var style = htmlElement.style;
    style.position = "absolute";
    style.transformOrigin = style.WebkitTransformOrigin = style.msTransformOrigin = style.MozTransformOrigin = style.OTransformOrigin = "0% 0%"
  };
  p.isVisible = function() {
    return this.htmlElement != null
  };
  p.draw = function(ctx, ignoreCache) {
    if(this.visible) {
      this._visible = true
    }
    return true
  };
  p.cache = function() {
  };
  p.uncache = function() {
  };
  p.updateCache = function() {
  };
  p.hitTest = function() {
  };
  p.localToGlobal = function() {
  };
  p.globalToLocal = function() {
  };
  p.localToLocal = function() {
  };
  p.clone = function() {
    throw"DOMElement cannot be cloned.";
  };
  p.toString = function() {
    return"[DOMElement (name=" + this.name + ")]"
  };
  p.DisplayObject__tick = p._tick;
  p._tick = function(params) {
    var stage = this.getStage();
    this._visible = false;
    stage && stage.on("drawend", this._handleDrawEnd, this, true);
    this.DisplayObject__tick(params)
  };
  p._handleDrawEnd = function(evt) {
    var o = this.htmlElement;
    if(!o) {
      return
    }
    var style = o.style;
    var visibility = this._visible ? "visible" : "hidden";
    if(visibility != style.visibility) {
      style.visibility = visibility
    }
    if(!this._visible) {
      return
    }
    var mtx = this.getConcatenatedMatrix(this._matrix);
    var oMtx = this._oldMtx;
    var n = 1E4;
    if(!oMtx || oMtx.alpha != mtx.alpha) {
      style.opacity = "" + (mtx.alpha * n | 0) / n;
      if(oMtx) {
        oMtx.alpha = mtx.alpha
      }
    }
    if(!oMtx || (oMtx.tx != mtx.tx || (oMtx.ty != mtx.ty || (oMtx.a != mtx.a || (oMtx.b != mtx.b || (oMtx.c != mtx.c || oMtx.d != mtx.d)))))) {
      var str = "matrix(" + (mtx.a * n | 0) / n + "," + (mtx.b * n | 0) / n + "," + (mtx.c * n | 0) / n + "," + (mtx.d * n | 0) / n + "," + (mtx.tx + 0.5 | 0);
      style.transform = style.WebkitTransform = style.OTransform = style.msTransform = str + "," + (mtx.ty + 0.5 | 0) + ")";
      style.MozTransform = str + "px," + (mtx.ty + 0.5 | 0) + "px)";
      this._oldMtx = oMtx ? oMtx.copy(mtx) : mtx.clone()
    }
  };
  createjs.DOMElement = DOMElement
})();
this.createjs = this.createjs || {};
(function() {
  var Filter = function() {
    this.initialize()
  };
  var p = Filter.prototype;
  p.initialize = function() {
  };
  p.getBounds = function() {
    return null
  };
  p.applyFilter = function(ctx, x, y, width, height, targetCtx, targetX, targetY) {
  };
  p.toString = function() {
    return"[Filter]"
  };
  p.clone = function() {
    return new Filter
  };
  createjs.Filter = Filter
})();
this.createjs = this.createjs || {};
(function() {
  var BlurFilter = function(blurX, blurY, quality) {
    this.initialize(blurX, blurY, quality)
  };
  var p = BlurFilter.prototype = new createjs.Filter;
  p.initialize = function(blurX, blurY, quality) {
    if(isNaN(blurX) || blurX < 0) {
      blurX = 0
    }
    this.blurX = blurX | 0;
    if(isNaN(blurY) || blurY < 0) {
      blurY = 0
    }
    this.blurY = blurY | 0;
    if(isNaN(quality) || quality < 1) {
      quality = 1
    }
    this.quality = quality | 0
  };
  p.blurX = 0;
  p.blurY = 0;
  p.quality = 1;
  p.mul_table = [1, 171, 205, 293, 57, 373, 79, 137, 241, 27, 391, 357, 41, 19, 283, 265, 497, 469, 443, 421, 25, 191, 365, 349, 335, 161, 155, 149, 9, 278, 269, 261, 505, 245, 475, 231, 449, 437, 213, 415, 405, 395, 193, 377, 369, 361, 353, 345, 169, 331, 325, 319, 313, 307, 301, 37, 145, 285, 281, 69, 271, 267, 263, 259, 509, 501, 493, 243, 479, 118, 465, 459, 113, 446, 55, 435, 429, 423, 209, 413, 51, 403, 199, 393, 97, 3, 379, 375, 371, 367, 363, 359, 355, 351, 347, 43, 85, 337, 333, 165, 327, 
  323, 5, 317, 157, 311, 77, 305, 303, 75, 297, 294, 73, 289, 287, 71, 141, 279, 277, 275, 68, 135, 67, 133, 33, 262, 260, 129, 511, 507, 503, 499, 495, 491, 61, 121, 481, 477, 237, 235, 467, 232, 115, 457, 227, 451, 7, 445, 221, 439, 218, 433, 215, 427, 425, 211, 419, 417, 207, 411, 409, 203, 202, 401, 399, 396, 197, 49, 389, 387, 385, 383, 95, 189, 47, 187, 93, 185, 23, 183, 91, 181, 45, 179, 89, 177, 11, 175, 87, 173, 345, 343, 341, 339, 337, 21, 167, 83, 331, 329, 327, 163, 81, 323, 321, 319, 
  159, 79, 315, 313, 39, 155, 309, 307, 153, 305, 303, 151, 75, 299, 149, 37, 295, 147, 73, 291, 145, 289, 287, 143, 285, 71, 141, 281, 35, 279, 139, 69, 275, 137, 273, 17, 271, 135, 269, 267, 133, 265, 33, 263, 131, 261, 130, 259, 129, 257, 1];
  p.shg_table = [0, 9, 10, 11, 9, 12, 10, 11, 12, 9, 13, 13, 10, 9, 13, 13, 14, 14, 14, 14, 10, 13, 14, 14, 14, 13, 13, 13, 9, 14, 14, 14, 15, 14, 15, 14, 15, 15, 14, 15, 15, 15, 14, 15, 15, 15, 15, 15, 14, 15, 15, 15, 15, 15, 15, 12, 14, 15, 15, 13, 15, 15, 15, 15, 16, 16, 16, 15, 16, 14, 16, 16, 14, 16, 13, 16, 16, 16, 15, 16, 13, 16, 15, 16, 14, 9, 16, 16, 16, 16, 16, 16, 16, 16, 16, 13, 14, 16, 16, 15, 16, 16, 10, 16, 15, 16, 14, 16, 16, 14, 16, 16, 14, 16, 16, 14, 15, 16, 16, 16, 14, 15, 14, 
  15, 13, 16, 16, 15, 17, 17, 17, 17, 17, 17, 14, 15, 17, 17, 16, 16, 17, 16, 15, 17, 16, 17, 11, 17, 16, 17, 16, 17, 16, 17, 17, 16, 17, 17, 16, 17, 17, 16, 16, 17, 17, 17, 16, 14, 17, 17, 17, 17, 15, 16, 14, 16, 15, 16, 13, 16, 15, 16, 14, 16, 15, 16, 12, 16, 15, 16, 17, 17, 17, 17, 17, 13, 16, 15, 17, 17, 17, 16, 15, 17, 17, 17, 16, 15, 17, 17, 14, 16, 17, 17, 16, 17, 17, 16, 15, 17, 16, 14, 17, 16, 15, 17, 16, 17, 17, 16, 17, 15, 16, 17, 14, 17, 16, 15, 17, 16, 17, 13, 17, 16, 17, 17, 16, 17, 
  14, 17, 16, 17, 16, 17, 16, 17, 9];
  p.getBounds = function() {
    var q = Math.pow(this.quality, 0.6) * 0.5;
    return new createjs.Rectangle(-this.blurX * q, -this.blurY * q, 2 * this.blurX * q, 2 * this.blurY * q)
  };
  p.applyFilter = function(ctx, x, y, width, height, targetCtx, targetX, targetY) {
    targetCtx = targetCtx || ctx;
    if(targetX == null) {
      targetX = x
    }
    if(targetY == null) {
      targetY = y
    }
    try {
      var imageData = ctx.getImageData(x, y, width, height)
    }catch(e) {
      return false
    }
    var radiusX = this.blurX / 2;
    if(isNaN(radiusX) || radiusX < 0) {
      return false
    }
    radiusX |= 0;
    var radiusY = this.blurY / 2;
    if(isNaN(radiusY) || radiusY < 0) {
      return false
    }
    radiusY |= 0;
    if(radiusX == 0 && radiusY == 0) {
      return false
    }
    var iterations = this.quality;
    if(isNaN(iterations) || iterations < 1) {
      iterations = 1
    }
    iterations |= 0;
    if(iterations > 3) {
      iterations = 3
    }
    if(iterations < 1) {
      iterations = 1
    }
    var pixels = imageData.data;
    var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, a_sum, r_out_sum, g_out_sum, b_out_sum, a_out_sum, r_in_sum, g_in_sum, b_in_sum, a_in_sum, pr, pg, pb, pa, rbs;
    var divx = radiusX + radiusX + 1;
    var divy = radiusY + radiusY + 1;
    var w4 = width << 2;
    var widthMinus1 = width - 1;
    var heightMinus1 = height - 1;
    var rxp1 = radiusX + 1;
    var ryp1 = radiusY + 1;
    var stackStartX = {r:0, b:0, g:0, a:0, next:null};
    var stackx = stackStartX;
    for(i = 1;i < divx;i++) {
      stackx = stackx.next = {r:0, b:0, g:0, a:0, next:null};
      if(i == rxp1) {
        var stackEndX = stackx
      }
    }
    stackx.next = stackStartX;
    var stackStartY = {r:0, b:0, g:0, a:0, next:null};
    var stacky = stackStartY;
    for(i = 1;i < divy;i++) {
      stacky = stacky.next = {r:0, b:0, g:0, a:0, next:null};
      if(i == ryp1) {
        var stackEndY = stacky
      }
    }
    stacky.next = stackStartY;
    var stackIn = null;
    while(iterations-- > 0) {
      yw = yi = 0;
      var mul_sum = this.mul_table[radiusX];
      var shg_sum = this.shg_table[radiusX];
      for(y = height;--y > -1;) {
        r_sum = rxp1 * (pr = pixels[yi]);
        g_sum = rxp1 * (pg = pixels[yi + 1]);
        b_sum = rxp1 * (pb = pixels[yi + 2]);
        a_sum = rxp1 * (pa = pixels[yi + 3]);
        stackx = stackStartX;
        for(i = rxp1;--i > -1;) {
          stackx.r = pr;
          stackx.g = pg;
          stackx.b = pb;
          stackx.a = pa;
          stackx = stackx.next
        }
        for(i = 1;i < rxp1;i++) {
          p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);
          r_sum += stackx.r = pixels[p];
          g_sum += stackx.g = pixels[p + 1];
          b_sum += stackx.b = pixels[p + 2];
          a_sum += stackx.a = pixels[p + 3];
          stackx = stackx.next
        }
        stackIn = stackStartX;
        for(x = 0;x < width;x++) {
          pixels[yi++] = r_sum * mul_sum >>> shg_sum;
          pixels[yi++] = g_sum * mul_sum >>> shg_sum;
          pixels[yi++] = b_sum * mul_sum >>> shg_sum;
          pixels[yi++] = a_sum * mul_sum >>> shg_sum;
          p = yw + ((p = x + radiusX + 1) < widthMinus1 ? p : widthMinus1) << 2;
          r_sum -= stackIn.r - (stackIn.r = pixels[p]);
          g_sum -= stackIn.g - (stackIn.g = pixels[p + 1]);
          b_sum -= stackIn.b - (stackIn.b = pixels[p + 2]);
          a_sum -= stackIn.a - (stackIn.a = pixels[p + 3]);
          stackIn = stackIn.next
        }
        yw += width
      }
      mul_sum = this.mul_table[radiusY];
      shg_sum = this.shg_table[radiusY];
      for(x = 0;x < width;x++) {
        yi = x << 2;
        r_sum = ryp1 * (pr = pixels[yi]);
        g_sum = ryp1 * (pg = pixels[yi + 1]);
        b_sum = ryp1 * (pb = pixels[yi + 2]);
        a_sum = ryp1 * (pa = pixels[yi + 3]);
        stacky = stackStartY;
        for(i = 0;i < ryp1;i++) {
          stacky.r = pr;
          stacky.g = pg;
          stacky.b = pb;
          stacky.a = pa;
          stacky = stacky.next
        }
        yp = width;
        for(i = 1;i <= radiusY;i++) {
          yi = yp + x << 2;
          r_sum += stacky.r = pixels[yi];
          g_sum += stacky.g = pixels[yi + 1];
          b_sum += stacky.b = pixels[yi + 2];
          a_sum += stacky.a = pixels[yi + 3];
          stacky = stacky.next;
          if(i < heightMinus1) {
            yp += width
          }
        }
        yi = x;
        stackIn = stackStartY;
        if(iterations > 0) {
          for(y = 0;y < height;y++) {
            p = yi << 2;
            pixels[p + 3] = pa = a_sum * mul_sum >>> shg_sum;
            if(pa > 0) {
              pixels[p] = r_sum * mul_sum >>> shg_sum;
              pixels[p + 1] = g_sum * mul_sum >>> shg_sum;
              pixels[p + 2] = b_sum * mul_sum >>> shg_sum
            }else {
              pixels[p] = pixels[p + 1] = pixels[p + 2] = 0
            }
            p = x + ((p = y + ryp1) < heightMinus1 ? p : heightMinus1) * width << 2;
            r_sum -= stackIn.r - (stackIn.r = pixels[p]);
            g_sum -= stackIn.g - (stackIn.g = pixels[p + 1]);
            b_sum -= stackIn.b - (stackIn.b = pixels[p + 2]);
            a_sum -= stackIn.a - (stackIn.a = pixels[p + 3]);
            stackIn = stackIn.next;
            yi += width
          }
        }else {
          for(y = 0;y < height;y++) {
            p = yi << 2;
            pixels[p + 3] = pa = a_sum * mul_sum >>> shg_sum;
            if(pa > 0) {
              pa = 255 / pa;
              pixels[p] = (r_sum * mul_sum >>> shg_sum) * pa;
              pixels[p + 1] = (g_sum * mul_sum >>> shg_sum) * pa;
              pixels[p + 2] = (b_sum * mul_sum >>> shg_sum) * pa
            }else {
              pixels[p] = pixels[p + 1] = pixels[p + 2] = 0
            }
            p = x + ((p = y + ryp1) < heightMinus1 ? p : heightMinus1) * width << 2;
            r_sum -= stackIn.r - (stackIn.r = pixels[p]);
            g_sum -= stackIn.g - (stackIn.g = pixels[p + 1]);
            b_sum -= stackIn.b - (stackIn.b = pixels[p + 2]);
            a_sum -= stackIn.a - (stackIn.a = pixels[p + 3]);
            stackIn = stackIn.next;
            yi += width
          }
        }
      }
    }
    targetCtx.putImageData(imageData, targetX, targetY);
    return true
  };
  p.clone = function() {
    return new BlurFilter(this.blurX, this.blurY, this.quality)
  };
  p.toString = function() {
    return"[BlurFilter]"
  };
  createjs.BlurFilter = BlurFilter
})();
this.createjs = this.createjs || {};
(function() {
  var AlphaMapFilter = function(alphaMap) {
    this.initialize(alphaMap)
  };
  var p = AlphaMapFilter.prototype = new createjs.Filter;
  p.initialize = function(alphaMap) {
    this.alphaMap = alphaMap
  };
  p.alphaMap = null;
  p._alphaMap = null;
  p._mapData = null;
  p.applyFilter = function(ctx, x, y, width, height, targetCtx, targetX, targetY) {
    if(!this.alphaMap) {
      return true
    }
    if(!this._prepAlphaMap()) {
      return false
    }
    targetCtx = targetCtx || ctx;
    if(targetX == null) {
      targetX = x
    }
    if(targetY == null) {
      targetY = y
    }
    try {
      var imageData = ctx.getImageData(x, y, width, height)
    }catch(e) {
      return false
    }
    var data = imageData.data;
    var map = this._mapData;
    var l = data.length;
    for(var i = 0;i < l;i += 4) {
      data[i + 3] = map[i] || 0
    }
    imageData.data = data;
    targetCtx.putImageData(imageData, targetX, targetY);
    return true
  };
  p.clone = function() {
    return new AlphaMapFilter(this.alphaMap)
  };
  p.toString = function() {
    return"[AlphaMapFilter]"
  };
  p._prepAlphaMap = function() {
    if(!this.alphaMap) {
      return false
    }
    if(this.alphaMap == this._alphaMap && this._mapData) {
      return true
    }
    this._mapData = null;
    var map = this._alphaMap = this.alphaMap;
    var canvas = map;
    var ctx;
    if(map instanceof HTMLCanvasElement) {
      ctx = canvas.getContext("2d")
    }else {
      canvas = createjs.createCanvas ? createjs.createCanvas() : document.createElement("canvas");
      canvas.width = map.width;
      canvas.height = map.height;
      ctx = canvas.getContext("2d");
      ctx.drawImage(map, 0, 0)
    }
    try {
      var imgData = ctx.getImageData(0, 0, map.width, map.height)
    }catch(e) {
      return false
    }
    this._mapData = imgData.data;
    return true
  };
  createjs.AlphaMapFilter = AlphaMapFilter
})();
this.createjs = this.createjs || {};
(function() {
  var AlphaMaskFilter = function(mask) {
    this.initialize(mask)
  };
  var p = AlphaMaskFilter.prototype = new createjs.Filter;
  p.initialize = function(mask) {
    this.mask = mask
  };
  p.mask = null;
  p.applyFilter = function(ctx, x, y, width, height, targetCtx, targetX, targetY) {
    if(!this.mask) {
      return true
    }
    targetCtx = targetCtx || ctx;
    if(targetX == null) {
      targetX = x
    }
    if(targetY == null) {
      targetY = y
    }
    targetCtx.save();
    if(ctx != targetCtx) {
    }
    targetCtx.globalCompositeOperation = "destination-in";
    targetCtx.drawImage(this.mask, targetX, targetY);
    targetCtx.restore();
    return true
  };
  p.clone = function() {
    return new AlphaMaskFilter(this.mask)
  };
  p.toString = function() {
    return"[AlphaMaskFilter]"
  };
  createjs.AlphaMaskFilter = AlphaMaskFilter
})();
this.createjs = this.createjs || {};
(function() {
  var ColorFilter = function(redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier, redOffset, greenOffset, blueOffset, alphaOffset) {
    this.initialize(redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier, redOffset, greenOffset, blueOffset, alphaOffset)
  };
  var p = ColorFilter.prototype = new createjs.Filter;
  p.redMultiplier = 1;
  p.greenMultiplier = 1;
  p.blueMultiplier = 1;
  p.alphaMultiplier = 1;
  p.redOffset = 0;
  p.greenOffset = 0;
  p.blueOffset = 0;
  p.alphaOffset = 0;
  p.initialize = function(redMultiplier, greenMultiplier, blueMultiplier, alphaMultiplier, redOffset, greenOffset, blueOffset, alphaOffset) {
    this.redMultiplier = redMultiplier != null ? redMultiplier : 1;
    this.greenMultiplier = greenMultiplier != null ? greenMultiplier : 1;
    this.blueMultiplier = blueMultiplier != null ? blueMultiplier : 1;
    this.alphaMultiplier = alphaMultiplier != null ? alphaMultiplier : 1;
    this.redOffset = redOffset || 0;
    this.greenOffset = greenOffset || 0;
    this.blueOffset = blueOffset || 0;
    this.alphaOffset = alphaOffset || 0
  };
  p.applyFilter = function(ctx, x, y, width, height, targetCtx, targetX, targetY) {
    targetCtx = targetCtx || ctx;
    if(targetX == null) {
      targetX = x
    }
    if(targetY == null) {
      targetY = y
    }
    try {
      var imageData = ctx.getImageData(x, y, width, height)
    }catch(e) {
      return false
    }
    var data = imageData.data;
    var l = data.length;
    for(var i = 0;i < l;i += 4) {
      data[i] = data[i] * this.redMultiplier + this.redOffset;
      data[i + 1] = data[i + 1] * this.greenMultiplier + this.greenOffset;
      data[i + 2] = data[i + 2] * this.blueMultiplier + this.blueOffset;
      data[i + 3] = data[i + 3] * this.alphaMultiplier + this.alphaOffset
    }
    targetCtx.putImageData(imageData, targetX, targetY);
    return true
  };
  p.toString = function() {
    return"[ColorFilter]"
  };
  p.clone = function() {
    return new ColorFilter(this.redMultiplier, this.greenMultiplier, this.blueMultiplier, this.alphaMultiplier, this.redOffset, this.greenOffset, this.blueOffset, this.alphaOffset)
  };
  createjs.ColorFilter = ColorFilter
})();
this.createjs = this.createjs || {};
(function() {
  var ColorMatrix = function(brightness, contrast, saturation, hue) {
    this.initialize(brightness, contrast, saturation, hue)
  };
  var p = ColorMatrix.prototype = [];
  ColorMatrix.DELTA_INDEX = [0, 0.01, 0.02, 0.04, 0.05, 0.06, 0.07, 0.08, 0.1, 0.11, 0.12, 0.14, 0.15, 0.16, 0.17, 0.18, 0.2, 0.21, 0.22, 0.24, 0.25, 0.27, 0.28, 0.3, 0.32, 0.34, 0.36, 0.38, 0.4, 0.42, 0.44, 0.46, 0.48, 0.5, 0.53, 0.56, 0.59, 0.62, 0.65, 0.68, 0.71, 0.74, 0.77, 0.8, 0.83, 0.86, 0.89, 0.92, 0.95, 0.98, 1, 1.06, 1.12, 1.18, 1.24, 1.3, 1.36, 1.42, 1.48, 1.54, 1.6, 1.66, 1.72, 1.78, 1.84, 1.9, 1.96, 2, 2.12, 2.25, 2.37, 2.5, 2.62, 2.75, 2.87, 3, 3.2, 3.4, 3.6, 3.8, 4, 4.3, 4.7, 4.9, 
  5, 5.5, 6, 6.5, 6.8, 7, 7.3, 7.5, 7.8, 8, 8.4, 8.7, 9, 9.4, 9.6, 9.8, 10];
  ColorMatrix.IDENTITY_MATRIX = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];
  ColorMatrix.LENGTH = ColorMatrix.IDENTITY_MATRIX.length;
  p.initialize = function(brightness, contrast, saturation, hue) {
    this.reset();
    this.adjustColor(brightness, contrast, saturation, hue);
    return this
  };
  p.reset = function() {
    return this.copyMatrix(ColorMatrix.IDENTITY_MATRIX)
  };
  p.adjustColor = function(brightness, contrast, saturation, hue) {
    this.adjustHue(hue);
    this.adjustContrast(contrast);
    this.adjustBrightness(brightness);
    return this.adjustSaturation(saturation)
  };
  p.adjustBrightness = function(value) {
    if(value == 0 || isNaN(value)) {
      return this
    }
    value = this._cleanValue(value, 255);
    this._multiplyMatrix([1, 0, 0, 0, value, 0, 1, 0, 0, value, 0, 0, 1, 0, value, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]);
    return this
  };
  p.adjustContrast = function(value) {
    if(value == 0 || isNaN(value)) {
      return this
    }
    value = this._cleanValue(value, 100);
    var x;
    if(value < 0) {
      x = 127 + value / 100 * 127
    }else {
      x = value % 1;
      if(x == 0) {
        x = ColorMatrix.DELTA_INDEX[value]
      }else {
        x = ColorMatrix.DELTA_INDEX[value << 0] * (1 - x) + ColorMatrix.DELTA_INDEX[(value << 0) + 1] * x
      }
      x = x * 127 + 127
    }
    this._multiplyMatrix([x / 127, 0, 0, 0, 0.5 * (127 - x), 0, x / 127, 0, 0, 0.5 * (127 - x), 0, 0, x / 127, 0, 0.5 * (127 - x), 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]);
    return this
  };
  p.adjustSaturation = function(value) {
    if(value == 0 || isNaN(value)) {
      return this
    }
    value = this._cleanValue(value, 100);
    var x = 1 + (value > 0 ? 3 * value / 100 : value / 100);
    var lumR = 0.3086;
    var lumG = 0.6094;
    var lumB = 0.082;
    this._multiplyMatrix([lumR * (1 - x) + x, lumG * (1 - x), lumB * (1 - x), 0, 0, lumR * (1 - x), lumG * (1 - x) + x, lumB * (1 - x), 0, 0, lumR * (1 - x), lumG * (1 - x), lumB * (1 - x) + x, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]);
    return this
  };
  p.adjustHue = function(value) {
    if(value == 0 || isNaN(value)) {
      return this
    }
    value = this._cleanValue(value, 180) / 180 * Math.PI;
    var cosVal = Math.cos(value);
    var sinVal = Math.sin(value);
    var lumR = 0.213;
    var lumG = 0.715;
    var lumB = 0.072;
    this._multiplyMatrix([lumR + cosVal * (1 - lumR) + sinVal * -lumR, lumG + cosVal * -lumG + sinVal * -lumG, lumB + cosVal * -lumB + sinVal * (1 - lumB), 0, 0, lumR + cosVal * -lumR + sinVal * 0.143, lumG + cosVal * (1 - lumG) + sinVal * 0.14, lumB + cosVal * -lumB + sinVal * -0.283, 0, 0, lumR + cosVal * -lumR + sinVal * -(1 - lumR), lumG + cosVal * -lumG + sinVal * lumG, lumB + cosVal * (1 - lumB) + sinVal * lumB, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]);
    return this
  };
  p.concat = function(matrix) {
    matrix = this._fixMatrix(matrix);
    if(matrix.length != ColorMatrix.LENGTH) {
      return this
    }
    this._multiplyMatrix(matrix);
    return this
  };
  p.clone = function() {
    return new ColorMatrix(this)
  };
  p.toArray = function() {
    return this.slice(0, ColorMatrix.LENGTH)
  };
  p.copyMatrix = function(matrix) {
    var l = ColorMatrix.LENGTH;
    for(var i = 0;i < l;i++) {
      this[i] = matrix[i]
    }
    return this
  };
  p._multiplyMatrix = function(matrix) {
    var col = [];
    for(var i = 0;i < 5;i++) {
      for(var j = 0;j < 5;j++) {
        col[j] = this[j + i * 5]
      }
      for(var j = 0;j < 5;j++) {
        var val = 0;
        for(var k = 0;k < 5;k++) {
          val += matrix[j + k * 5] * col[k]
        }
        this[j + i * 5] = val
      }
    }
  };
  p._cleanValue = function(value, limit) {
    return Math.min(limit, Math.max(-limit, value))
  };
  p._fixMatrix = function(matrix) {
    if(matrix instanceof ColorMatrix) {
      matrix = matrix.slice(0)
    }
    if(matrix.length < ColorMatrix.LENGTH) {
      matrix = matrix.slice(0, matrix.length).concat(ColorMatrix.IDENTITY_MATRIX.slice(matrix.length, ColorMatrix.LENGTH))
    }else {
      if(matrix.length > ColorMatrix.LENGTH) {
        matrix = matrix.slice(0, ColorMatrix.LENGTH)
      }
    }
    return matrix
  };
  createjs.ColorMatrix = ColorMatrix
})();
this.createjs = this.createjs || {};
(function() {
  var ColorMatrixFilter = function(matrix) {
    this.initialize(matrix)
  };
  var p = ColorMatrixFilter.prototype = new createjs.Filter;
  p.matrix = null;
  p.initialize = function(matrix) {
    this.matrix = matrix
  };
  p.applyFilter = function(ctx, x, y, width, height, targetCtx, targetX, targetY) {
    targetCtx = targetCtx || ctx;
    if(targetX == null) {
      targetX = x
    }
    if(targetY == null) {
      targetY = y
    }
    try {
      var imageData = ctx.getImageData(x, y, width, height)
    }catch(e) {
      return false
    }
    var data = imageData.data;
    var l = data.length;
    var r, g, b, a;
    var mtx = this.matrix;
    var m0 = mtx[0], m1 = mtx[1], m2 = mtx[2], m3 = mtx[3], m4 = mtx[4];
    var m5 = mtx[5], m6 = mtx[6], m7 = mtx[7], m8 = mtx[8], m9 = mtx[9];
    var m10 = mtx[10], m11 = mtx[11], m12 = mtx[12], m13 = mtx[13], m14 = mtx[14];
    var m15 = mtx[15], m16 = mtx[16], m17 = mtx[17], m18 = mtx[18], m19 = mtx[19];
    for(var i = 0;i < l;i += 4) {
      r = data[i];
      g = data[i + 1];
      b = data[i + 2];
      a = data[i + 3];
      data[i] = r * m0 + g * m1 + b * m2 + a * m3 + m4;
      data[i + 1] = r * m5 + g * m6 + b * m7 + a * m8 + m9;
      data[i + 2] = r * m10 + g * m11 + b * m12 + a * m13 + m14;
      data[i + 3] = r * m15 + g * m16 + b * m17 + a * m18 + m19
    }
    targetCtx.putImageData(imageData, targetX, targetY);
    return true
  };
  p.toString = function() {
    return"[ColorMatrixFilter]"
  };
  p.clone = function() {
    return new ColorMatrixFilter(this.matrix)
  };
  createjs.ColorMatrixFilter = ColorMatrixFilter
})();
this.createjs = this.createjs || {};
(function() {
  var Touch = function() {
    throw"Touch cannot be instantiated";
  };
  Touch.isSupported = function() {
    return"ontouchstart" in window || window.navigator["msPointerEnabled"] && window.navigator["msMaxTouchPoints"] > 0
  };
  Touch.enable = function(stage, singleTouch, allowDefault) {
    if(!stage || (!stage.canvas || !Touch.isSupported())) {
      return false
    }
    stage.__touch = {pointers:{}, multitouch:!singleTouch, preventDefault:!allowDefault, count:0};
    if("ontouchstart" in window) {
      Touch._IOS_enable(stage)
    }else {
      if(window.navigator["msPointerEnabled"]) {
        Touch._IE_enable(stage)
      }
    }
    return true
  };
  Touch.disable = function(stage) {
    if(!stage) {
      return
    }
    if("ontouchstart" in window) {
      Touch._IOS_disable(stage)
    }else {
      if(window.navigator["msPointerEnabled"]) {
        Touch._IE_disable(stage)
      }
    }
  };
  Touch._IOS_enable = function(stage) {
    var canvas = stage.canvas;
    var f = stage.__touch.f = function(e) {
      Touch._IOS_handleEvent(stage, e)
    };
    canvas.addEventListener("touchstart", f, false);
    canvas.addEventListener("touchmove", f, false);
    canvas.addEventListener("touchend", f, false);
    canvas.addEventListener("touchcancel", f, false)
  };
  Touch._IOS_disable = function(stage) {
    var canvas = stage.canvas;
    if(!canvas) {
      return
    }
    var f = stage.__touch.f;
    canvas.removeEventListener("touchstart", f, false);
    canvas.removeEventListener("touchmove", f, false);
    canvas.removeEventListener("touchend", f, false);
    canvas.removeEventListener("touchcancel", f, false)
  };
  Touch._IOS_handleEvent = function(stage, e) {
    if(!stage) {
      return
    }
    if(stage.__touch.preventDefault) {
      e.preventDefault && e.preventDefault()
    }
    var touches = e.changedTouches;
    var type = e.type;
    for(var i = 0, l = touches.length;i < l;i++) {
      var touch = touches[i];
      var id = touch.identifier;
      if(touch.target != stage.canvas) {
        continue
      }
      if(type == "touchstart") {
        this._handleStart(stage, id, e, touch.pageX, touch.pageY)
      }else {
        if(type == "touchmove") {
          this._handleMove(stage, id, e, touch.pageX, touch.pageY)
        }else {
          if(type == "touchend" || type == "touchcancel") {
            this._handleEnd(stage, id, e)
          }
        }
      }
    }
  };
  Touch._IE_enable = function(stage) {
    var canvas = stage.canvas;
    var f = stage.__touch.f = function(e) {
      Touch._IE_handleEvent(stage, e)
    };
    canvas.addEventListener("MSPointerDown", f, false);
    window.addEventListener("MSPointerMove", f, false);
    window.addEventListener("MSPointerUp", f, false);
    window.addEventListener("MSPointerCancel", f, false);
    if(stage.__touch.preventDefault) {
      canvas.style.msTouchAction = "none"
    }
    stage.__touch.activeIDs = {}
  };
  Touch._IE_disable = function(stage) {
    var f = stage.__touch.f;
    window.removeEventListener("MSPointerMove", f, false);
    window.removeEventListener("MSPointerUp", f, false);
    window.removeEventListener("MSPointerCancel", f, false);
    if(stage.canvas) {
      stage.canvas.removeEventListener("MSPointerDown", f, false)
    }
  };
  Touch._IE_handleEvent = function(stage, e) {
    if(!stage) {
      return
    }
    if(stage.__touch.preventDefault) {
      e.preventDefault && e.preventDefault()
    }
    var type = e.type;
    var id = e.pointerId;
    var ids = stage.__touch.activeIDs;
    if(type == "MSPointerDown") {
      if(e.srcElement != stage.canvas) {
        return
      }
      ids[id] = true;
      this._handleStart(stage, id, e, e.pageX, e.pageY)
    }else {
      if(ids[id]) {
        if(type == "MSPointerMove") {
          this._handleMove(stage, id, e, e.pageX, e.pageY)
        }else {
          if(type == "MSPointerUp" || type == "MSPointerCancel") {
            delete ids[id];
            this._handleEnd(stage, id, e)
          }
        }
      }
    }
  };
  Touch._handleStart = function(stage, id, e, x, y) {
    var props = stage.__touch;
    if(!props.multitouch && props.count) {
      return
    }
    var ids = props.pointers;
    if(ids[id]) {
      return
    }
    ids[id] = true;
    props.count++;
    stage._handlePointerDown(id, e, x, y)
  };
  Touch._handleMove = function(stage, id, e, x, y) {
    if(!stage.__touch.pointers[id]) {
      return
    }
    stage._handlePointerMove(id, e, x, y)
  };
  Touch._handleEnd = function(stage, id, e) {
    var props = stage.__touch;
    var ids = props.pointers;
    if(!ids[id]) {
      return
    }
    props.count--;
    stage._handlePointerUp(id, e, true);
    delete ids[id]
  };
  createjs.Touch = Touch
})();
this.createjs = this.createjs || {};
(function() {
  var s = createjs.EaselJS = createjs.EaselJS || {};
  s.version = "NEXT";
  s.buildDate = "Sun, 06 Oct 2013 10:56:52 GMT"
})();
(function() {
  var stageMouseDownHandler = createjs.Stage.prototype._handlePointerDown;
  var stageMouseUpHandler = createjs.Stage.prototype._handlePointerUp;
  var isTouchEventSystem = false;
  if(navigator.userAgent.indexOf("Android") > -1) {
    createjs.Stage.prototype._handlePointerDown = function(id, event, pageX, pageY) {
      if(event.touches) {
        isTouchEventSystem = true;
        this.enableDOMEvents(false)
      }else {
      }
      if(!isTouchEventSystem) {
        event.screenX = event.x;
        event.screenY = event.y;
        stageMouseDownHandler.call(this, id, event, pageX, pageY)
      }else {
        if(event.touches && typeof event.touches[0].pageX != "undefined") {
          event.screenX = event.touches[0].pageX;
          event.screenY = event.touches[0].pageY;
          stageMouseDownHandler.call(this, id, event, pageX, pageY)
        }
      }
    };
    createjs.Stage.prototype._handlePointerUp = function(id, event, clear) {
      if(event.changedTouches) {
        isTouchEventSystem = true
      }
      if(!isTouchEventSystem) {
        event.screenX = event.x;
        event.screenY = event.y;
        stageMouseUpHandler.call(this, id, event, clear)
      }else {
        if(event.changedTouches && typeof event.changedTouches[0].pageX != "undefined") {
          event.screenX = event.changedTouches[0].pageX;
          event.screenY = event.changedTouches[0].pageY;
          stageMouseUpHandler.call(this, id, event, clear)
        }
      }
    }
  }
})();
this.createjs = this.createjs || {}, function() {
  var a = createjs.PreloadJS = createjs.PreloadJS || {};
  a.version = "0.4.0", a.buildDate = "Wed, 25 Sep 2013 17:09:35 GMT"
}(), this.createjs = this.createjs || {}, function() {
  var a = function(a, b, c) {
    this.initialize(a, b, c)
  }, b = a.prototype;
  b.type = null, b.target = null, b.currentTarget = null, b.eventPhase = 0, b.bubbles = !1, b.cancelable = !1, b.timeStamp = 0, b.defaultPrevented = !1, b.propagationStopped = !1, b.immediatePropagationStopped = !1, b.removed = !1, b.initialize = function(a, b, c) {
    this.type = a, this.bubbles = b, this.cancelable = c, this.timeStamp = (new Date).getTime()
  }, b.preventDefault = function() {
    this.defaultPrevented = !0
  }, b.stopPropagation = function() {
    this.propagationStopped = !0
  }, b.stopImmediatePropagation = function() {
    this.immediatePropagationStopped = this.propagationStopped = !0
  }, b.remove = function() {
    this.removed = !0
  }, b.clone = function() {
    return new a(this.type, this.bubbles, this.cancelable)
  }, b.toString = function() {
    return"[Event (type=" + this.type + ")]"
  }, createjs.Event = a
}(), this.createjs = this.createjs || {}, function() {
  var a = function() {
  }, b = a.prototype;
  a.initialize = function(a) {
    a.addEventListener = b.addEventListener, a.on = b.on, a.removeEventListener = a.off = b.removeEventListener, a.removeAllEventListeners = b.removeAllEventListeners, a.hasEventListener = b.hasEventListener, a.dispatchEvent = b.dispatchEvent, a._dispatchEvent = b._dispatchEvent
  }, b._listeners = null, b._captureListeners = null, b.initialize = function() {
  }, b.addEventListener = function(a, b, c) {
    var d;
    d = c ? this._captureListeners = this._captureListeners || {} : this._listeners = this._listeners || {};
    var e = d[a];
    return e && this.removeEventListener(a, b, c), e = d[a], e ? e.push(b) : d[a] = [b], b
  }, b.on = function(a, b, c, d, e, f) {
    return b.handleEvent && (c = c || b, b = b.handleEvent), c = c || this, this.addEventListener(a, function(a) {
      b.call(c, a, e), d && a.remove()
    }, f)
  }, b.removeEventListener = function(a, b, c) {
    var d = c ? this._captureListeners : this._listeners;
    if(d) {
      var e = d[a];
      if(e) {
        for(var f = 0, g = e.length;g > f;f++) {
          if(e[f] == b) {
            1 == g ? delete d[a] : e.splice(f, 1);
            break
          }
        }
      }
    }
  }, b.off = b.removeEventListener, b.removeAllEventListeners = function(a) {
    a ? (this._listeners && delete this._listeners[a], this._captureListeners && delete this._captureListeners[a]) : this._listeners = this._captureListeners = null
  }, b.dispatchEvent = function(a, b) {
    if("string" == typeof a) {
      var c = this._listeners;
      if(!c || !c[a]) {
        return!1
      }
      a = new createjs.Event(a)
    }
    if(a.target = b || this, a.bubbles && this.parent) {
      for(var d = this, e = [d];d.parent;) {
        e.push(d = d.parent)
      }
      var f, g = e.length;
      for(f = g - 1;f >= 0 && !a.propagationStopped;f--) {
        e[f]._dispatchEvent(a, 1 + (0 == f))
      }
      for(f = 1;g > f && !a.propagationStopped;f++) {
        e[f]._dispatchEvent(a, 3)
      }
    }else {
      this._dispatchEvent(a, 2)
    }
    return a.defaultPrevented
  }, b.hasEventListener = function(a) {
    var b = this._listeners, c = this._captureListeners;
    return!!(b && b[a] || c && c[a])
  }, b.toString = function() {
    return"[EventDispatcher]"
  }, b._dispatchEvent = function(a, b) {
    var c, d = 1 == b ? this._captureListeners : this._listeners;
    if(a && d) {
      var e = d[a.type];
      if(!e || !(c = e.length)) {
        return
      }
      a.currentTarget = this, a.eventPhase = b, a.removed = !1, e = e.slice();
      for(var f = 0;c > f && !a.immediatePropagationStopped;f++) {
        var g = e[f];
        g.handleEvent ? g.handleEvent(a) : g(a), a.removed && (this.off(a.type, g, 1 == b), a.removed = !1)
      }
    }
  }, createjs.EventDispatcher = a
}(), this.createjs = this.createjs || {}, function() {
  createjs.indexOf = function(a, b) {
    for(var c = 0, d = a.length;d > c;c++) {
      if(b === a[c]) {
        return c
      }
    }
    return-1
  }
}(), this.createjs = this.createjs || {}, function() {
  createjs.proxy = function(a, b) {
    var c = Array.prototype.slice.call(arguments, 2);
    return function() {
      return a.apply(b, Array.prototype.slice.call(arguments, 0).concat(c))
    }
  }
}(), this.createjs = this.createjs || {}, function() {
  var a = function() {
    this.init()
  };
  a.prototype = {};
  var b = a.prototype, c = a;
  c.FILE_PATTERN = /^(?:(\w+:)\/{2}(\w+(?:\.\w+)*\/?))?([/.]*?(?:[^?]+)?\/)?((?:[^/?]+)\.(\w+))(?:\?(\S+)?)?$/, b.loaded = !1, b.canceled = !1, b.progress = 0, b._item = null, b._basePath = null, b.addEventListener = null, b.removeEventListener = null, b.removeAllEventListeners = null, b.dispatchEvent = null, b.hasEventListener = null, b._listeners = null, createjs.EventDispatcher.initialize(b), b.getItem = function() {
    return this._item
  }, b.init = function() {
  }, b.load = function() {
  }, b.close = function() {
  }, b._sendLoadStart = function() {
    this._isCanceled() || this.dispatchEvent("loadstart")
  }, b._sendProgress = function(a) {
    if(!this._isCanceled()) {
      var b = null;
      "number" == typeof a ? (this.progress = a, b = new createjs.Event("progress"), b.loaded = this.progress, b.total = 1) : (b = a, this.progress = a.loaded / a.total, (isNaN(this.progress) || 1 / 0 == this.progress) && (this.progress = 0)), b.progress = this.progress, this.hasEventListener("progress") && this.dispatchEvent(b)
    }
  }, b._sendComplete = function() {
    this._isCanceled() || this.dispatchEvent("complete")
  }, b._sendError = function(a) {
    !this._isCanceled() && (this.hasEventListener("error") && (null == a && (a = new createjs.Event("error")), this.dispatchEvent(a)))
  }, b._isCanceled = function() {
    return null == window.createjs || this.canceled ? !0 : !1
  }, b._parseURI = function(a) {
    return a ? a.match(c.FILE_PATTERN) : null
  }, b._formatQueryString = function(a, b) {
    if(null == a) {
      throw new Error("You must specify data.");
    }
    var c = [];
    for(var d in a) {
      c.push(d + "=" + escape(a[d]))
    }
    return b && (c = c.concat(b)), c.join("&")
  }, b.buildPath = function(a, b, c) {
    if(null != b) {
      var d = this._parseURI(a);
      (null == d || (null == d[1] || "" == d[1])) && (a = b + a)
    }
    if(null == c) {
      return a
    }
    var e = [], f = a.indexOf("?");
    if(-1 != f) {
      var g = a.slice(f + 1);
      e = e.concat(g.split("&"))
    }
    return-1 != f ? a.slice(0, f) + "?" + this._formatQueryString(c, e) : a + "?" + this._formatQueryString(c, e)
  }, b.toString = function() {
    return"[PreloadJS AbstractLoader]"
  }, createjs.AbstractLoader = a
}(), this.createjs = this.createjs || {}, function() {
  var a = function(a, b) {
    this.init(a, b)
  }, b = a.prototype = new createjs.AbstractLoader, c = a;
  c.LOAD_TIMEOUT = 8E3, c.BINARY = "binary", c.CSS = "css", c.IMAGE = "image", c.JAVASCRIPT = "javascript", c.JSON = "json", c.JSONP = "jsonp", c.SOUND = "sound", c.SVG = "svg", c.TEXT = "text", c.XML = "xml", c.POST = "POST", c.GET = "GET", b.useXHR = !0, b.stopOnError = !1, b.maintainScriptOrder = !0, b.next = null, b._typeCallbacks = null, b._extensionCallbacks = null, b._loadStartWasDispatched = !1, b._maxConnections = 1, b._currentlyLoadingScript = null, b._currentLoads = null, b._loadQueue = 
  null, b._loadQueueBackup = null, b._loadItemsById = null, b._loadItemsBySrc = null, b._loadedResults = null, b._loadedRawResults = null, b._numItems = 0, b._numItemsLoaded = 0, b._scriptOrder = null, b._loadedScripts = null, b.init = function(a, b) {
    this._numItems = this._numItemsLoaded = 0, this._paused = !1, this._loadStartWasDispatched = !1, this._currentLoads = [], this._loadQueue = [], this._loadQueueBackup = [], this._scriptOrder = [], this._loadedScripts = [], this._loadItemsById = {}, this._loadItemsBySrc = {}, this._loadedResults = {}, this._loadedRawResults = {}, this._typeCallbacks = {}, this._extensionCallbacks = {}, this._basePath = b, this.setUseXHR(a)
  }, b.setUseXHR = function(a) {
    return this.useXHR = 0 != a && null != window.XMLHttpRequest, this.useXHR
  }, b.removeAll = function() {
    this.remove()
  }, b.remove = function(a) {
    var b = null;
    if(!a || a instanceof Array) {
      if(a) {
        b = a
      }else {
        if(arguments.length > 0) {
          return
        }
      }
    }else {
      b = [a]
    }
    var c = !1;
    if(b) {
      for(;b.length;) {
        var d = b.pop(), e = this.getResult(d);
        for(f = this._loadQueue.length - 1;f >= 0;f--) {
          if(g = this._loadQueue[f].getItem(), g.id == d || g.src == d) {
            this._loadQueue.splice(f, 1)[0].cancel();
            break
          }
        }
        for(f = this._loadQueueBackup.length - 1;f >= 0;f--) {
          if(g = this._loadQueueBackup[f].getItem(), g.id == d || g.src == d) {
            this._loadQueueBackup.splice(f, 1)[0].cancel();
            break
          }
        }
        if(e) {
          delete this._loadItemsById[e.id], delete this._loadItemsBySrc[e.src], this._disposeItem(e)
        }else {
          for(var f = this._currentLoads.length - 1;f >= 0;f--) {
            var g = this._currentLoads[f].getItem();
            if(g.id == d || g.src == d) {
              this._currentLoads.splice(f, 1)[0].cancel(), c = !0;
              break
            }
          }
        }
      }
      c && this._loadNext()
    }else {
      this.close();
      for(var h in this._loadItemsById) {
        this._disposeItem(this._loadItemsById[h])
      }
      this.init(this.useXHR)
    }
  }, b.reset = function() {
    this.close();
    for(var a in this._loadItemsById) {
      this._disposeItem(this._loadItemsById[a])
    }
    var b = [];
    for(i = 0, l = this._loadQueueBackup.length;l > i;i++) {
      b.push(this._loadQueueBackup[i].getItem())
    }
    this.loadManifest(b, !1)
  }, c.isBinary = function(a) {
    switch(a) {
      case createjs.LoadQueue.IMAGE:
      ;
      case createjs.LoadQueue.BINARY:
        return!0;
      default:
        return!1
    }
  }, b.installPlugin = function(a) {
    if(null != a && null != a.getPreloadHandlers) {
      var b = a.getPreloadHandlers();
      if(null != b.types) {
        for(var c = 0, d = b.types.length;d > c;c++) {
          this._typeCallbacks[b.types[c]] = b.callback
        }
      }
      if(null != b.extensions) {
        for(c = 0, d = b.extensions.length;d > c;c++) {
          this._extensionCallbacks[b.extensions[c]] = b.callback
        }
      }
    }
  }, b.setMaxConnections = function(a) {
    this._maxConnections = a, !this._paused && (this._loadQueue.length > 0 && this._loadNext())
  }, b.loadFile = function(a, b, c) {
    if(null == a) {
      var d = new createjs.Event("error");
      return d.text = "PRELOAD_NO_FILE", this._sendError(d), void 0
    }
    this._addItem(a, c), b !== !1 ? this.setPaused(!1) : this.setPaused(!0)
  }, b.loadManifest = function(a, b, c) {
    var d = null;
    if(a instanceof Array) {
      if(0 == a.length) {
        var e = new createjs.Event("error");
        return e.text = "PRELOAD_MANIFEST_EMPTY", this._sendError(e), void 0
      }
      d = a
    }else {
      if(null == a) {
        var e = new createjs.Event("error");
        return e.text = "PRELOAD_MANIFEST_NULL", this._sendError(e), void 0
      }
      d = [a]
    }
    for(var f = 0, g = d.length;g > f;f++) {
      this._addItem(d[f], c)
    }
    b !== !1 ? this.setPaused(!1) : this.setPaused(!0)
  }, b.load = function() {
    this.setPaused(!1)
  }, b.getItem = function(a) {
    return this._loadItemsById[a] || this._loadItemsBySrc[a]
  }, b.getResult = function(a, b) {
    var c = this._loadItemsById[a] || this._loadItemsBySrc[a];
    if(null == c) {
      return null
    }
    var d = c.id;
    return b && this._loadedRawResults[d] ? this._loadedRawResults[d] : this._loadedResults[d]
  }, b.setPaused = function(a) {
    this._paused = a, this._paused || this._loadNext()
  }, b.close = function() {
    for(;this._currentLoads.length;) {
      this._currentLoads.pop().cancel()
    }
    this._scriptOrder.length = 0, this._loadedScripts.length = 0, this.loadStartWasDispatched = !1
  }, b._addItem = function(a, b) {
    var c = this._createLoadItem(a);
    if(null != c) {
      var d = this._createLoader(c, b);
      null != d && (this._loadQueue.push(d), this._loadQueueBackup.push(d), this._numItems++, this._updateProgress(), this.maintainScriptOrder && (c.type == createjs.LoadQueue.JAVASCRIPT && (d instanceof createjs.XHRLoader && (this._scriptOrder.push(c), this._loadedScripts.push(null)))))
    }
  }, b._createLoadItem = function(a) {
    var b = null;
    switch(typeof a) {
      case "string":
        b = {src:a};
        break;
      case "object":
        b = window.HTMLAudioElement && a instanceof HTMLAudioElement ? {tag:a, src:b.tag.src, type:createjs.LoadQueue.SOUND} : a;
        break;
      default:
        return null
    }
    var c = this._parseURI(b.src);
    if(null != c && (b.ext = c[5]), null == b.type && (b.type = this._getTypeByExtension(b.ext)), b.type == createjs.LoadQueue.JSON && (null != b.callback && (b.type = createjs.LoadQueue.JSONP)), b.type == createjs.LoadQueue.JSONP && null == b.callback) {
      throw new Error("callback is required for loading JSONP requests.");
    }
    null == b.tag && (b.tag = this._createTag(b.type)), (null == b.id || "" == b.id) && (b.id = b.src);
    var d = this._typeCallbacks[b.type] || this._extensionCallbacks[b.ext];
    if(d) {
      var e = d(b.src, b.type, b.id, b.data);
      if(e === !1) {
        return null
      }
      e === !0 || (null != e.src && (b.src = e.src), null != e.id && (b.id = e.id), null != e.tag && (e.tag.load instanceof Function && (b.tag = e.tag)), null != e.completeHandler && (b.completeHandler = e.completeHandler)), e.type && (b.type = e.type), c = this._parseURI(b.src), null != c && (null != c[5] && (b.ext = c[5].toLowerCase()))
    }
    return this._loadItemsById[b.id] = b, this._loadItemsBySrc[b.src] = b, b
  }, b._createLoader = function(a, b) {
    var c = this.useXHR;
    switch(a.type) {
      case createjs.LoadQueue.JSON:
      ;
      case createjs.LoadQueue.XML:
      ;
      case createjs.LoadQueue.TEXT:
        c = !0;
        break;
      case createjs.LoadQueue.SOUND:
      ;
      case createjs.LoadQueue.JSONP:
        c = !1;
        break;
      case null:
        return null
    }
    return null == b && (b = this._basePath), c ? new createjs.XHRLoader(a, b) : new createjs.TagLoader(a, b)
  }, b._loadNext = function() {
    if(!this._paused) {
      this._loadStartWasDispatched || (this._sendLoadStart(), this._loadStartWasDispatched = !0), this._numItems == this._numItemsLoaded ? (this.loaded = !0, this._sendComplete(), this.next && (this.next.load && this.next.load())) : this.loaded = !1;
      for(var a = 0;a < this._loadQueue.length && !(this._currentLoads.length >= this._maxConnections);a++) {
        var b = this._loadQueue[a];
        if(this.maintainScriptOrder && (b instanceof createjs.TagLoader && b.getItem().type == createjs.LoadQueue.JAVASCRIPT)) {
          if(this._currentlyLoadingScript) {
            continue
          }
          this._currentlyLoadingScript = !0
        }
        this._loadQueue.splice(a, 1), a--, this._loadItem(b)
      }
    }
  }, b._loadItem = function(a) {
    a.addEventListener("progress", createjs.proxy(this._handleProgress, this)), a.addEventListener("complete", createjs.proxy(this._handleFileComplete, this)), a.addEventListener("error", createjs.proxy(this._handleFileError, this)), this._currentLoads.push(a), this._sendFileStart(a.getItem()), a.load()
  }, b._handleFileError = function(a) {
    var b = a.target;
    this._numItemsLoaded++, this._updateProgress();
    var a = new createjs.Event("error");
    a.text = "FILE_LOAD_ERROR", a.item = b.getItem(), this._sendError(a), this.stopOnError || (this._removeLoadItem(b), this._loadNext())
  }, b._handleFileComplete = function(a) {
    var b = a.target, c = b.getItem();
    if(this._loadedResults[c.id] = b.getResult(), b instanceof createjs.XHRLoader && (this._loadedRawResults[c.id] = b.getResult(!0)), this._removeLoadItem(b), this.maintainScriptOrder && c.type == createjs.LoadQueue.JAVASCRIPT) {
      if(!(b instanceof createjs.TagLoader)) {
        return this._loadedScripts[createjs.indexOf(this._scriptOrder, c)] = c, this._checkScriptLoadOrder(b), void 0
      }
      this._currentlyLoadingScript = !1
    }
    this._processFinishedLoad(c, b)
  }, b._processFinishedLoad = function(a, b) {
    this._numItemsLoaded++, this._updateProgress(), this._sendFileComplete(a, b), this._loadNext()
  }, b._checkScriptLoadOrder = function() {
    for(var a = this._loadedScripts.length, b = 0;a > b;b++) {
      var c = this._loadedScripts[b];
      if(null === c) {
        break
      }
      c !== !0 && (this._processFinishedLoad(c), this._loadedScripts[b] = !0, b--, a--)
    }
  }, b._removeLoadItem = function(a) {
    for(var b = this._currentLoads.length, c = 0;b > c;c++) {
      if(this._currentLoads[c] == a) {
        this._currentLoads.splice(c, 1);
        break
      }
    }
  }, b._handleProgress = function(a) {
    var b = a.target;
    this._sendFileProgress(b.getItem(), b.progress), this._updateProgress()
  }, b._updateProgress = function() {
    var a = this._numItemsLoaded / this._numItems, b = this._numItems - this._numItemsLoaded;
    if(b > 0) {
      for(var c = 0, d = 0, e = this._currentLoads.length;e > d;d++) {
        c += this._currentLoads[d].progress
      }
      a += c / b * (b / this._numItems)
    }
    this._sendProgress(a)
  }, b._disposeItem = function(a) {
    delete this._loadedResults[a.id], delete this._loadedRawResults[a.id], delete this._loadItemsById[a.id], delete this._loadItemsBySrc[a.src]
  }, b._createTag = function(a) {
    var b = null;
    switch(a) {
      case createjs.LoadQueue.IMAGE:
        return document.createElement("img");
      case createjs.LoadQueue.SOUND:
        return b = document.createElement("audio"), b.autoplay = !1, b;
      case createjs.LoadQueue.JSONP:
      ;
      case createjs.LoadQueue.JAVASCRIPT:
        return b = document.createElement("script"), b.type = "text/javascript", b;
      case createjs.LoadQueue.CSS:
        return b = this.useXHR ? document.createElement("style") : document.createElement("link"), b.rel = "stylesheet", b.type = "text/css", b;
      case createjs.LoadQueue.SVG:
        return this.useXHR ? b = document.createElement("svg") : (b = document.createElement("object"), b.type = "image/svg+xml"), b
    }
    return null
  }, b._getTypeByExtension = function(a) {
    if(null == a) {
      return createjs.LoadQueue.TEXT
    }
    switch(a.toLowerCase()) {
      case "jpeg":
      ;
      case "jpg":
      ;
      case "gif":
      ;
      case "png":
      ;
      case "webp":
      ;
      case "bmp":
        return createjs.LoadQueue.IMAGE;
      case "ogg":
      ;
      case "mp3":
      ;
      case "wav":
        return createjs.LoadQueue.SOUND;
      case "json":
        return createjs.LoadQueue.JSON;
      case "xml":
        return createjs.LoadQueue.XML;
      case "css":
        return createjs.LoadQueue.CSS;
      case "js":
        return createjs.LoadQueue.JAVASCRIPT;
      case "svg":
        return createjs.LoadQueue.SVG;
      default:
        return createjs.LoadQueue.TEXT
    }
  }, b._sendFileProgress = function(a, b) {
    if(this._isCanceled()) {
      return this._cleanUp(), void 0
    }
    if(this.hasEventListener("fileprogress")) {
      var c = new createjs.Event("fileprogress");
      c.progress = b, c.loaded = b, c.total = 1, c.item = a, this.dispatchEvent(c)
    }
  }, b._sendFileComplete = function(a, b) {
    if(!this._isCanceled()) {
      var c = new createjs.Event("fileload");
      c.loader = b, c.item = a, c.result = this._loadedResults[a.id], c.rawResult = this._loadedRawResults[a.id], a.completeHandler && a.completeHandler(c), this.hasEventListener("fileload") && this.dispatchEvent(c)
    }
  }, b._sendFileStart = function(a) {
    var b = new createjs.Event("filestart");
    b.item = a, this.hasEventListener("filestart") && this.dispatchEvent(b)
  }, b.toString = function() {
    return"[PreloadJS LoadQueue]"
  }, createjs.LoadQueue = a;
  var d = function() {
  };
  d.init = function() {
    var a = navigator.userAgent;
    d.isFirefox = a.indexOf("Firefox") > -1, d.isOpera = null != window.opera, d.isChrome = a.indexOf("Chrome") > -1, d.isIOS = a.indexOf("iPod") > -1 || (a.indexOf("iPhone") > -1 || a.indexOf("iPad") > -1)
  }, d.init(), createjs.LoadQueue.BrowserDetect = d
}(), this.createjs = this.createjs || {}, function() {
  var a = function(a, b) {
    this.init(a, b)
  }, b = a.prototype = new createjs.AbstractLoader;
  b._loadTimeout = null, b._tagCompleteProxy = null, b._isAudio = !1, b._tag = null, b._jsonResult = null, b.init = function(a, b) {
    this._item = a, this._basePath = b, this._tag = a.tag, this._isAudio = window.HTMLAudioElement && a.tag instanceof HTMLAudioElement, this._tagCompleteProxy = createjs.proxy(this._handleLoad, this)
  }, b.getResult = function() {
    return this._item.type == createjs.LoadQueue.JSONP ? this._jsonResult : this._tag
  }, b.cancel = function() {
    this.canceled = !0, this._clean(), this.getItem()
  }, b.load = function() {
    var a = this._item, b = this._tag;
    clearTimeout(this._loadTimeout), this._loadTimeout = setTimeout(createjs.proxy(this._handleTimeout, this), createjs.LoadQueue.LOAD_TIMEOUT), this._isAudio && (b.src = null, b.preload = "auto"), b.onerror = createjs.proxy(this._handleError, this), this._isAudio ? (b.onstalled = createjs.proxy(this._handleStalled, this), b.addEventListener("canplaythrough", this._tagCompleteProxy, !1)) : (b.onload = createjs.proxy(this._handleLoad, this), b.onreadystatechange = createjs.proxy(this._handleReadyStateChange, 
    this));
    var c = this.buildPath(a.src, this._basePath, a.values);
    switch(a.type) {
      case createjs.LoadQueue.CSS:
        b.href = c;
        break;
      case createjs.LoadQueue.SVG:
        b.data = c;
        break;
      default:
        b.src = c
    }
    if(a.type == createjs.LoadQueue.JSONP) {
      if(null == a.callback) {
        throw new Error("callback is required for loading JSONP requests.");
      }
      if(null != window[a.callback]) {
        throw new Error('JSONP callback "' + a.callback + '" already exists on window. You need to specify a different callback. Or re-name the current one.');
      }
      window[a.callback] = createjs.proxy(this._handleJSONPLoad, this)
    }
    (a.type == createjs.LoadQueue.SVG || (a.type == createjs.LoadQueue.JSONP || (a.type == createjs.LoadQueue.JSON || (a.type == createjs.LoadQueue.JAVASCRIPT || a.type == createjs.LoadQueue.CSS)))) && (this._startTagVisibility = b.style.visibility, b.style.visibility = "hidden", (document.body || document.getElementsByTagName("body")[0]).appendChild(b)), null != b.load && b.load()
  }, b._handleJSONPLoad = function(a) {
    this._jsonResult = a
  }, b._handleTimeout = function() {
    this._clean();
    var a = new createjs.Event("error");
    a.text = "PRELOAD_TIMEOUT", this._sendError(a)
  }, b._handleStalled = function() {
  }, b._handleError = function() {
    this._clean();
    var a = new createjs.Event("error");
    this._sendError(a)
  }, b._handleReadyStateChange = function() {
    clearTimeout(this._loadTimeout);
    var a = this.getItem().tag;
    ("loaded" == a.readyState || "complete" == a.readyState) && this._handleLoad()
  }, b._handleLoad = function() {
    if(!this._isCanceled()) {
      var a = this.getItem(), b = a.tag;
      if(!(this.loaded || this.isAudio && 4 !== b.readyState)) {
        switch(this.loaded = !0, a.type) {
          case createjs.LoadQueue.SVG:
          ;
          case createjs.LoadQueue.JSONP:
            b.style.visibility = this._startTagVisibility, (document.body || document.getElementsByTagName("body")[0]).removeChild(b)
        }
        this._clean(), this._sendComplete()
      }
    }
  }, b._clean = function() {
    clearTimeout(this._loadTimeout);
    var a = this.getItem().tag;
    a.onload = null, a.removeEventListener && a.removeEventListener("canplaythrough", this._tagCompleteProxy, !1), a.onstalled = null, a.onprogress = null, a.onerror = null, a.parentNode && a.parentNode.removeChild(a);
    var b = this.getItem();
    b.type == createjs.LoadQueue.JSONP && (window[b.callback] = null)
  }, b.toString = function() {
    return"[PreloadJS TagLoader]"
  }, createjs.TagLoader = a
}(), this.createjs = this.createjs || {}, function() {
  var a = function(a, b) {
    this.init(a, b)
  }, b = a.prototype = new createjs.AbstractLoader;
  b._request = null, b._loadTimeout = null, b._xhrLevel = 1, b._response = null, b._rawResponse = null, b.init = function(a, b) {
    this._item = a, this._basePath = b, !this._createXHR(a)
  }, b.getResult = function(a) {
    return a && this._rawResponse ? this._rawResponse : this._response
  }, b.cancel = function() {
    this.canceled = !0, this._clean(), this._request.abort()
  }, b.load = function() {
    if(null == this._request) {
      return this._handleError(), void 0
    }
    this._request.onloadstart = createjs.proxy(this._handleLoadStart, this), this._request.onprogress = createjs.proxy(this._handleProgress, this), this._request.onabort = createjs.proxy(this._handleAbort, this), this._request.onerror = createjs.proxy(this._handleError, this), this._request.ontimeout = createjs.proxy(this._handleTimeout, this), 1 == this._xhrLevel && (this._loadTimeout = setTimeout(createjs.proxy(this._handleTimeout, this), createjs.LoadQueue.LOAD_TIMEOUT)), this._request.onload = 
    createjs.proxy(this._handleLoad, this), this._request.onreadystatechange = createjs.proxy(this._handleReadyStateChange, this);
    try {
      this._item.values && this._item.method != createjs.LoadQueue.GET ? this._item.method == createjs.LoadQueue.POST && this._request.send(this._formatQueryString(this._item.values)) : this._request.send()
    }catch(a) {
      var b = new createjs.Event("error");
      b.error = a, this._sendError(b)
    }
  }, b.getAllResponseHeaders = function() {
    return this._request.getAllResponseHeaders instanceof Function ? this._request.getAllResponseHeaders() : null
  }, b.getResponseHeader = function(a) {
    return this._request.getResponseHeader instanceof Function ? this._request.getResponseHeader(a) : null
  }, b._handleProgress = function(a) {
    if(a && !(a.loaded > 0 && 0 == a.total)) {
      var b = new createjs.Event("progress");
      b.loaded = a.loaded, b.total = a.total, this._sendProgress(b)
    }
  }, b._handleLoadStart = function() {
    clearTimeout(this._loadTimeout), this._sendLoadStart()
  }, b._handleAbort = function(a) {
    this._clean();
    var a = new createjs.Event("error");
    a.text = "XHR_ABORTED", this._sendError(a)
  }, b._handleError = function() {
    this._clean();
    var a = new createjs.Event("error");
    this._sendError(a)
  }, b._handleReadyStateChange = function() {
    4 == this._request.readyState && this._handleLoad()
  }, b._handleLoad = function() {
    if(!this.loaded) {
      if(this.loaded = !0, !this._checkError()) {
        return this._handleError(), void 0
      }
      this._response = this._getResponse(), this._clean();
      var a = this._generateTag();
      a && this._sendComplete()
    }
  }, b._handleTimeout = function(a) {
    this._clean();
    var b = new createjs.Event("error");
    b.text = "PRELOAD_TIMEOUT", this._sendError(a)
  }, b._checkError = function() {
    var a = parseInt(this._request.status);
    switch(a) {
      case 404:
      ;
      case 0:
        return!1
    }
    return!0
  }, b._getResponse = function() {
    if(null != this._response) {
      return this._response
    }
    if(null != this._request.response) {
      return this._request.response
    }
    try {
      if(null != this._request.responseText) {
        return this._request.responseText
      }
    }catch(a) {
    }
    try {
      if(null != this._request.responseXML) {
        return this._request.responseXML
      }
    }catch(a) {
    }
    return null
  }, b._createXHR = function(a) {
    var b = document.createElement("a");
    b.href = this.buildPath(a.src, this._basePath);
    var c = document.createElement("a");
    c.href = location.href;
    var d = "" != b.hostname && (b.port != c.port || (b.protocol != c.protocol || b.hostname != c.hostname)), e = null;
    if(d && window.XDomainRequest) {
      e = new XDomainRequest
    }else {
      if(window.XMLHttpRequest) {
        e = new XMLHttpRequest
      }else {
        try {
          e = new ActiveXObject("Msxml2.XMLHTTP.6.0")
        }catch(f) {
          try {
            e = new ActiveXObject("Msxml2.XMLHTTP.3.0")
          }catch(f) {
            try {
              e = new ActiveXObject("Msxml2.XMLHTTP")
            }catch(f) {
              return!1
            }
          }
        }
      }
    }
    a.type == createjs.LoadQueue.TEXT && (e.overrideMimeType && e.overrideMimeType("text/plain; charset=x-user-defined")), this._xhrLevel = "string" == typeof e.responseType ? 2 : 1;
    var g = null;
    return g = a.method == createjs.LoadQueue.GET ? this.buildPath(a.src, this._basePath, a.values) : this.buildPath(a.src, this._basePath), e.open(a.method || createjs.LoadQueue.GET, g, !0), d && (e instanceof XMLHttpRequest && (1 == this._xhrLevel && e.setRequestHeader("Origin", location.origin))), a.values && (a.method == createjs.LoadQueue.POST && e.setRequestHeader("Content-Type", "application/x-www-form-urlencoded")), createjs.LoadQueue.isBinary(a.type) && (e.responseType = "arraybuffer"), 
    this._request = e, !0
  }, b._clean = function() {
    clearTimeout(this._loadTimeout);
    var a = this._request;
    a.onloadstart = null, a.onprogress = null, a.onabort = null, a.onerror = null, a.onload = null, a.ontimeout = null, a.onloadend = null, a.onreadystatechange = null
  }, b._generateTag = function() {
    var a = this._item.type, b = this._item.tag;
    switch(a) {
      case createjs.LoadQueue.IMAGE:
        return b.onload = createjs.proxy(this._handleTagReady, this), b.src = this.buildPath(this._item.src, this._basePath, this._item.values), this._rawResponse = this._response, this._response = b, !1;
      case createjs.LoadQueue.JAVASCRIPT:
        return b = document.createElement("script"), b.text = this._response, this._rawResponse = this._response, this._response = b, !0;
      case createjs.LoadQueue.CSS:
        var c = document.getElementsByTagName("head")[0];
        if(c.appendChild(b), b.styleSheet) {
          b.styleSheet.cssText = this._response
        }else {
          var d = document.createTextNode(this._response);
          b.appendChild(d)
        }
        return this._rawResponse = this._response, this._response = b, !0;
      case createjs.LoadQueue.XML:
        var e = this._parseXML(this._response, "text/xml");
        return this._response = e, !0;
      case createjs.LoadQueue.SVG:
        var e = this._parseXML(this._response, "image/svg+xml");
        return this._rawResponse = this._response, null != e.documentElement ? (b.appendChild(e.documentElement), this._response = b) : this._response = e, !0;
      case createjs.LoadQueue.JSON:
        var f = {};
        try {
          f = JSON.parse(this._response)
        }catch(g) {
          f = g
        }
        return this._rawResponse = this._response, this._response = f, !0
    }
    return!0
  }, b._parseXML = function(a, b) {
    var c = null;
    if(window.DOMParser) {
      var d = new DOMParser;
      c = d.parseFromString(a, b)
    }else {
      c = new ActiveXObject("Microsoft.XMLDOM"), c.async = !1, c.loadXML(a)
    }
    return c
  }, b._handleTagReady = function() {
    this._sendComplete()
  }, b.toString = function() {
    return"[PreloadJS XHRLoader]"
  }, createjs.XHRLoader = a
}(), "object" != typeof JSON && (JSON = {}), function() {
  function f(a) {
    return 10 > a ? "0" + a : a
  }
  function quote(a) {
    return escapable.lastIndex = 0, escapable.test(a) ? '"' + a.replace(escapable, function(a) {
      var b = meta[a];
      return"string" == typeof b ? b : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
    }) + '"' : '"' + a + '"'
  }
  function str(a, b) {
    var c, d, e, f, g, h = gap, i = b[a];
    switch(i && ("object" == typeof i && ("function" == typeof i.toJSON && (i = i.toJSON(a)))), "function" == typeof rep && (i = rep.call(b, a, i)), typeof i) {
      case "string":
        return quote(i);
      case "number":
        return isFinite(i) ? String(i) : "null";
      case "boolean":
      ;
      case "null":
        return String(i);
      case "object":
        if(!i) {
          return"null"
        }
        if(gap += indent, g = [], "[object Array]" === Object.prototype.toString.apply(i)) {
          for(f = i.length, c = 0;f > c;c += 1) {
            g[c] = str(c, i) || "null"
          }
          return e = 0 === g.length ? "[]" : gap ? "[\n" + gap + g.join(",\n" + gap) + "\n" + h + "]" : "[" + g.join(",") + "]", gap = h, e
        }
        if(rep && "object" == typeof rep) {
          for(f = rep.length, c = 0;f > c;c += 1) {
            "string" == typeof rep[c] && (d = rep[c], e = str(d, i), e && g.push(quote(d) + (gap ? ": " : ":") + e))
          }
        }else {
          for(d in i) {
            Object.prototype.hasOwnProperty.call(i, d) && (e = str(d, i), e && g.push(quote(d) + (gap ? ": " : ":") + e))
          }
        }
        return e = 0 === g.length ? "{}" : gap ? "{\n" + gap + g.join(",\n" + gap) + "\n" + h + "}" : "{" + g.join(",") + "}", gap = h, e
    }
  }
  "function" != typeof Date.prototype.toJSON && (Date.prototype.toJSON = function() {
    return isFinite(this.valueOf()) ? this.getUTCFullYear() + "-" + f(this.getUTCMonth() + 1) + "-" + f(this.getUTCDate()) + "T" + f(this.getUTCHours()) + ":" + f(this.getUTCMinutes()) + ":" + f(this.getUTCSeconds()) + "Z" : null
  }, String.prototype.toJSON = Number.prototype.toJSON = Boolean.prototype.toJSON = function() {
    return this.valueOf()
  });
  var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = {"\b":"\\b", "\t":"\\t", "\n":"\\n", "\f":"\\f", "\r":"\\r", '"':'\\"', "\\":"\\\\"}, rep;
  "function" != typeof JSON.stringify && (JSON.stringify = function(a, b, c) {
    var d;
    if(gap = "", indent = "", "number" == typeof c) {
      for(d = 0;c > d;d += 1) {
        indent += " "
      }
    }else {
      "string" == typeof c && (indent = c)
    }
    if(rep = b, b && ("function" != typeof b && ("object" != typeof b || "number" != typeof b.length))) {
      throw new Error("JSON.stringify");
    }
    return str("", {"":a})
  }), "function" != typeof JSON.parse && (JSON.parse = function(text, reviver) {
    function walk(a, b) {
      var c, d, e = a[b];
      if(e && "object" == typeof e) {
        for(c in e) {
          Object.prototype.hasOwnProperty.call(e, c) && (d = walk(e, c), void 0 !== d ? e[c] = d : delete e[c])
        }
      }
      return reviver.call(a, b, e)
    }
    var j;
    if(text = String(text), cx.lastIndex = 0, cx.test(text) && (text = text.replace(cx, function(a) {
      return"\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4)
    })), /^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, ""))) {
      return j = eval("(" + text + ")"), "function" == typeof reviver ? walk({"":j}, "") : j
    }
    throw new SyntaxError("JSON.parse");
  })
}();
this.createjs = this.createjs || {}, function() {
  var a = function(a, b, c) {
    this.initialize(a, b, c)
  }, b = a.prototype;
  b.type = null, b.target = null, b.currentTarget = null, b.eventPhase = 0, b.bubbles = !1, b.cancelable = !1, b.timeStamp = 0, b.defaultPrevented = !1, b.propagationStopped = !1, b.immediatePropagationStopped = !1, b.removed = !1, b.initialize = function(a, b, c) {
    this.type = a, this.bubbles = b, this.cancelable = c, this.timeStamp = (new Date).getTime()
  }, b.preventDefault = function() {
    this.defaultPrevented = !0
  }, b.stopPropagation = function() {
    this.propagationStopped = !0
  }, b.stopImmediatePropagation = function() {
    this.immediatePropagationStopped = this.propagationStopped = !0
  }, b.remove = function() {
    this.removed = !0
  }, b.clone = function() {
    return new a(this.type, this.bubbles, this.cancelable)
  }, b.toString = function() {
    return"[Event (type=" + this.type + ")]"
  }, createjs.Event = a
}(), this.createjs = this.createjs || {}, function() {
  var a = function() {
    this.initialize()
  }, b = a.prototype;
  a.initialize = function(a) {
    a.addEventListener = b.addEventListener, a.on = b.on, a.removeEventListener = a.off = b.removeEventListener, a.removeAllEventListeners = b.removeAllEventListeners, a.hasEventListener = b.hasEventListener, a.dispatchEvent = b.dispatchEvent, a._dispatchEvent = b._dispatchEvent
  }, b._listeners = null, b._captureListeners = null, b.initialize = function() {
  }, b.addEventListener = function(a, b, c) {
    var d;
    d = c ? this._captureListeners = this._captureListeners || {} : this._listeners = this._listeners || {};
    var e = d[a];
    return e && this.removeEventListener(a, b, c), e = d[a], e ? e.push(b) : d[a] = [b], b
  }, b.on = function(a, b, c, d, e, f) {
    return b.handleEvent && (c = c || b, b = b.handleEvent), c = c || this, this.addEventListener(a, function(a) {
      b.call(c, a, e), d && a.remove()
    }, f)
  }, b.removeEventListener = function(a, b, c) {
    var d = c ? this._captureListeners : this._listeners;
    if(d) {
      var e = d[a];
      if(e) {
        for(var f = 0, g = e.length;g > f;f++) {
          if(e[f] == b) {
            1 == g ? delete d[a] : e.splice(f, 1);
            break
          }
        }
      }
    }
  }, b.off = b.removeEventListener, b.removeAllEventListeners = function(a) {
    a ? (this._listeners && delete this._listeners[a], this._captureListeners && delete this._captureListeners[a]) : this._listeners = this._captureListeners = null
  }, b.dispatchEvent = function(a, b) {
    if("string" == typeof a) {
      var c = this._listeners;
      if(!c || !c[a]) {
        return!1
      }
      a = new createjs.Event(a)
    }
    if(a.target = b || this, a.bubbles && this.parent) {
      for(var d = this, e = [d];d.parent;) {
        e.push(d = d.parent)
      }
      var f, g = e.length;
      for(f = g - 1;f >= 0 && !a.propagationStopped;f--) {
        e[f]._dispatchEvent(a, 1 + (0 == f))
      }
      for(f = 1;g > f && !a.propagationStopped;f++) {
        e[f]._dispatchEvent(a, 3)
      }
    }else {
      this._dispatchEvent(a, 2)
    }
    return a.defaultPrevented
  }, b.hasEventListener = function(a) {
    var b = this._listeners, c = this._captureListeners;
    return!!(b && b[a] || c && c[a])
  }, b.toString = function() {
    return"[EventDispatcher]"
  }, b._dispatchEvent = function(a, b) {
    var c, d = 1 == b ? this._captureListeners : this._listeners;
    if(a && d) {
      var e = d[a.type];
      if(!e || !(c = e.length)) {
        return
      }
      a.currentTarget = this, a.eventPhase = b, a.removed = !1, e = e.slice();
      for(var f = 0;c > f && !a.immediatePropagationStopped;f++) {
        var g = e[f];
        g.handleEvent ? g.handleEvent(a) : g(a), a.removed && (this.off(a.type, g, 1 == b), a.removed = !1)
      }
    }
  }, createjs.EventDispatcher = a
}(), this.createjs = this.createjs || {}, function() {
  var a = function(a, b, c) {
    this.initialize(a, b, c)
  }, b = a.prototype = new createjs.EventDispatcher;
  a.NONE = 0, a.LOOP = 1, a.REVERSE = 2, a.IGNORE = {}, a._tweens = [], a._plugins = {}, a.get = function(b, c, d, e) {
    return e && a.removeTweens(b), new a(b, c, d)
  }, a.tick = function(b, c) {
    for(var d = a._tweens.slice(), e = d.length - 1;e >= 0;e--) {
      var f = d[e];
      c && !f.ignoreGlobalPause || (f._paused || f.tick(f._useTicks ? 1 : b))
    }
  }, a.handleEvent = function(a) {
    "tick" == a.type && this.tick(a.delta, a.paused)
  }, a.removeTweens = function(b) {
    if(b.tweenjs_count) {
      for(var c = a._tweens, d = c.length - 1;d >= 0;d--) {
        c[d]._target == b && (c[d]._paused = !0, c.splice(d, 1))
      }
      b.tweenjs_count = 0
    }
  }, a.removeAllTweens = function() {
    for(var b = a._tweens, c = 0, d = b.length;d > c;c++) {
      var e = b[c];
      e.paused = !0, e.target.tweenjs_count = 0
    }
    b.length = 0
  }, a.hasActiveTweens = function(b) {
    return b ? b.tweenjs_count : a._tweens && !!a._tweens.length
  }, a.installPlugin = function(b, c) {
    var d = b.priority;
    null == d && (b.priority = d = 0);
    for(var e = 0, f = c.length, g = a._plugins;f > e;e++) {
      var h = c[e];
      if(g[h]) {
        for(var i = g[h], j = 0, k = i.length;k > j && !(d < i[j].priority);j++) {
        }
        g[h].splice(j, 0, b)
      }else {
        g[h] = [b]
      }
    }
  }, a._register = function(b, c) {
    var d = b._target, e = a._tweens;
    if(c) {
      d && (d.tweenjs_count = d.tweenjs_count ? d.tweenjs_count + 1 : 1), e.push(b), !a._inited && (createjs.Ticker && (createjs.Ticker.addEventListener("tick", a), a._inited = !0))
    }else {
      d && d.tweenjs_count--;
      for(var f = e.length;f--;) {
        if(e[f] == b) {
          return e.splice(f, 1), void 0
        }
      }
    }
  }, b.ignoreGlobalPause = !1, b.loop = !1, b.duration = 0, b.pluginData = null, b.target = null, b.position = null, b.passive = !1, b._paused = !1, b._curQueueProps = null, b._initQueueProps = null, b._steps = null, b._actions = null, b._prevPosition = 0, b._stepPosition = 0, b._prevPos = -1, b._target = null, b._useTicks = !1, b._inited = !1, b.initialize = function(b, c, d) {
    this.target = this._target = b, c && (this._useTicks = c.useTicks, this.ignoreGlobalPause = c.ignoreGlobalPause, this.loop = c.loop, c.onChange && this.addEventListener("change", c.onChange), c.override && a.removeTweens(b)), this.pluginData = d || {}, this._curQueueProps = {}, this._initQueueProps = {}, this._steps = [], this._actions = [], c && c.paused ? this._paused = !0 : a._register(this, !0), c && (null != c.position && this.setPosition(c.position, a.NONE))
  }, b.wait = function(a, b) {
    if(null == a || 0 >= a) {
      return this
    }
    var c = this._cloneProps(this._curQueueProps);
    return this._addStep({d:a, p0:c, e:this._linearEase, p1:c, v:b})
  }, b.to = function(a, b, c) {
    return(isNaN(b) || 0 > b) && (b = 0), this._addStep({d:b || 0, p0:this._cloneProps(this._curQueueProps), e:c, p1:this._cloneProps(this._appendQueueProps(a))})
  }, b.call = function(a, b, c) {
    return this._addAction({f:a, p:b ? b : [this], o:c ? c : this._target})
  }, b.set = function(a, b) {
    return this._addAction({f:this._set, o:this, p:[a, b ? b : this._target]})
  }, b.play = function(a) {
    return a || (a = this), this.call(a.setPaused, [!1], a)
  }, b.pause = function(a) {
    return a || (a = this), this.call(a.setPaused, [!0], a)
  }, b.setPosition = function(a, b) {
    0 > a && (a = 0), null == b && (b = 1);
    var c = a, d = !1;
    if(c >= this.duration && (this.loop ? c %= this.duration : (c = this.duration, d = !0)), c == this._prevPos) {
      return d
    }
    var e = this._prevPos;
    if(this.position = this._prevPos = c, this._prevPosition = a, this._target) {
      if(d) {
        this._updateTargetProps(null, 1)
      }else {
        if(this._steps.length > 0) {
          for(var f = 0, g = this._steps.length;g > f && !(this._steps[f].t > c);f++) {
          }
          var h = this._steps[f - 1];
          this._updateTargetProps(h, (this._stepPosition = c - h.t) / h.d)
        }
      }
    }
    return 0 != b && (this._actions.length > 0 && (this._useTicks ? this._runActions(c, c) : 1 == b && e > c ? (e != this.duration && this._runActions(e, this.duration), this._runActions(0, c, !0)) : this._runActions(e, c))), d && this.setPaused(!0), this.dispatchEvent("change"), d
  }, b.tick = function(a) {
    this._paused || this.setPosition(this._prevPosition + a)
  }, b.setPaused = function(b) {
    return this._paused = !!b, a._register(this, !b), this
  }, b.w = b.wait, b.t = b.to, b.c = b.call, b.s = b.set, b.toString = function() {
    return"[Tween]"
  }, b.clone = function() {
    throw"Tween can not be cloned.";
  }, b._updateTargetProps = function(b, c) {
    var d, e, f, g, h, i;
    if(b || 1 != c) {
      if(this.passive = !!b.v, this.passive) {
        return
      }
      b.e && (c = b.e(c, 0, 1, 1)), d = b.p0, e = b.p1
    }else {
      this.passive = !1, d = e = this._curQueueProps
    }
    for(var j in this._initQueueProps) {
      null == (g = d[j]) && (d[j] = g = this._initQueueProps[j]), null == (h = e[j]) && (e[j] = h = g), f = g == h || (0 == c || (1 == c || "number" != typeof g)) ? 1 == c ? h : g : g + (h - g) * c;
      var k = !1;
      if(i = a._plugins[j]) {
        for(var l = 0, m = i.length;m > l;l++) {
          var n = i[l].tween(this, j, f, d, e, c, !!b && d == e, !b);
          n == a.IGNORE ? k = !0 : f = n
        }
      }
      k || (this._target[j] = f)
    }
  }, b._runActions = function(a, b, c) {
    var d = a, e = b, f = -1, g = this._actions.length, h = 1;
    for(a > b && (d = b, e = a, f = g, g = h = -1);(f += h) != g;) {
      var i = this._actions[f], j = i.t;
      (j == e || (j > d && e > j || c && j == a)) && i.f.apply(i.o, i.p)
    }
  }, b._appendQueueProps = function(b) {
    var c, d, e, f, g;
    for(var h in b) {
      if(void 0 === this._initQueueProps[h]) {
        if(d = this._target[h], c = a._plugins[h]) {
          for(e = 0, f = c.length;f > e;e++) {
            d = c[e].init(this, h, d)
          }
        }
        this._initQueueProps[h] = this._curQueueProps[h] = void 0 === d ? null : d
      }else {
        d = this._curQueueProps[h]
      }
    }
    for(var h in b) {
      if(d = this._curQueueProps[h], c = a._plugins[h]) {
        for(g = g || {}, e = 0, f = c.length;f > e;e++) {
          c[e].step && c[e].step(this, h, d, b[h], g)
        }
      }
      this._curQueueProps[h] = b[h]
    }
    return g && this._appendQueueProps(g), this._curQueueProps
  }, b._cloneProps = function(a) {
    var b = {};
    for(var c in a) {
      b[c] = a[c]
    }
    return b
  }, b._addStep = function(a) {
    return a.d > 0 && (this._steps.push(a), a.t = this.duration, this.duration += a.d), this
  }, b._addAction = function(a) {
    return a.t = this.duration, this._actions.push(a), this
  }, b._set = function(a, b) {
    for(var c in a) {
      b[c] = a[c]
    }
  }, createjs.Tween = a
}(), this.createjs = this.createjs || {}, function() {
  var a = function(a, b, c) {
    this.initialize(a, b, c)
  }, b = a.prototype = new createjs.EventDispatcher;
  b.ignoreGlobalPause = !1, b.duration = 0, b.loop = !1, b.position = null, b._paused = !1, b._tweens = null, b._labels = null, b._labelList = null, b._prevPosition = 0, b._prevPos = -1, b._useTicks = !1, b.initialize = function(a, b, c) {
    this._tweens = [], c && (this._useTicks = c.useTicks, this.loop = c.loop, this.ignoreGlobalPause = c.ignoreGlobalPause, c.onChange && this.addEventListener("change", c.onChange)), a && this.addTween.apply(this, a), this.setLabels(b), c && c.paused ? this._paused = !0 : createjs.Tween._register(this, !0), c && (null != c.position && this.setPosition(c.position, createjs.Tween.NONE))
  }, b.addTween = function(a) {
    var b = arguments.length;
    if(b > 1) {
      for(var c = 0;b > c;c++) {
        this.addTween(arguments[c])
      }
      return arguments[0]
    }
    return 0 == b ? null : (this.removeTween(a), this._tweens.push(a), a.setPaused(!0), a._paused = !1, a._useTicks = this._useTicks, a.duration > this.duration && (this.duration = a.duration), this._prevPos >= 0 && a.setPosition(this._prevPos, createjs.Tween.NONE), a)
  }, b.removeTween = function(a) {
    var b = arguments.length;
    if(b > 1) {
      for(var c = !0, d = 0;b > d;d++) {
        c = c && this.removeTween(arguments[d])
      }
      return c
    }
    if(0 == b) {
      return!1
    }
    for(var e = this._tweens, d = e.length;d--;) {
      if(e[d] == a) {
        return e.splice(d, 1), a.duration >= this.duration && this.updateDuration(), !0
      }
    }
    return!1
  }, b.addLabel = function(a, b) {
    this._labels[a] = b;
    var c = this._labelList;
    if(c) {
      for(var d = 0, e = c.length;e > d && !(b < c[d].position);d++) {
      }
      c.splice(d, 0, {label:a, position:b})
    }
  }, b.setLabels = function(a) {
    this._labels = a ? a : {}
  }, b.getLabels = function() {
    var a = this._labelList;
    if(!a) {
      a = this._labelList = [];
      var b = this._labels;
      for(var c in b) {
        a.push({label:c, position:b[c]})
      }
      a.sort(function(a, b) {
        return a.position - b.position
      })
    }
    return a
  }, b.getCurrentLabel = function() {
    var a = this.getLabels(), b = this.position, c = a.length;
    if(c) {
      for(var d = 0;c > d && !(b < a[d].position);d++) {
      }
      return 0 == d ? null : a[d - 1].label
    }
    return null
  }, b.gotoAndPlay = function(a) {
    this.setPaused(!1), this._goto(a)
  }, b.gotoAndStop = function(a) {
    this.setPaused(!0), this._goto(a)
  }, b.setPosition = function(a, b) {
    0 > a && (a = 0);
    var c = this.loop ? a % this.duration : a, d = !this.loop && a >= this.duration;
    if(c == this._prevPos) {
      return d
    }
    this._prevPosition = a, this.position = this._prevPos = c;
    for(var e = 0, f = this._tweens.length;f > e;e++) {
      if(this._tweens[e].setPosition(c, b), c != this._prevPos) {
        return!1
      }
    }
    return d && this.setPaused(!0), this.dispatchEvent("change"), d
  }, b.setPaused = function(a) {
    this._paused = !!a, createjs.Tween._register(this, !a)
  }, b.updateDuration = function() {
    this.duration = 0;
    for(var a = 0, b = this._tweens.length;b > a;a++) {
      var c = this._tweens[a];
      c.duration > this.duration && (this.duration = c.duration)
    }
  }, b.tick = function(a) {
    this.setPosition(this._prevPosition + a)
  }, b.resolve = function(a) {
    var b = parseFloat(a);
    return isNaN(b) && (b = this._labels[a]), b
  }, b.toString = function() {
    return"[Timeline]"
  }, b.clone = function() {
    throw"Timeline can not be cloned.";
  }, b._goto = function(a) {
    var b = this.resolve(a);
    null != b && this.setPosition(b)
  }, createjs.Timeline = a
}(), this.createjs = this.createjs || {}, function() {
  var a = function() {
    throw"Ease cannot be instantiated.";
  };
  a.linear = function(a) {
    return a
  }, a.none = a.linear, a.get = function(a) {
    return-1 > a && (a = -1), a > 1 && (a = 1), function(b) {
      return 0 == a ? b : 0 > a ? b * (b * -a + 1 + a) : b * ((2 - b) * a + (1 - a))
    }
  }, a.getPowIn = function(a) {
    return function(b) {
      return Math.pow(b, a)
    }
  }, a.getPowOut = function(a) {
    return function(b) {
      return 1 - Math.pow(1 - b, a)
    }
  }, a.getPowInOut = function(a) {
    return function(b) {
      return(b *= 2) < 1 ? 0.5 * Math.pow(b, a) : 1 - 0.5 * Math.abs(Math.pow(2 - b, a))
    }
  }, a.quadIn = a.getPowIn(2), a.quadOut = a.getPowOut(2), a.quadInOut = a.getPowInOut(2), a.cubicIn = a.getPowIn(3), a.cubicOut = a.getPowOut(3), a.cubicInOut = a.getPowInOut(3), a.quartIn = a.getPowIn(4), a.quartOut = a.getPowOut(4), a.quartInOut = a.getPowInOut(4), a.quintIn = a.getPowIn(5), a.quintOut = a.getPowOut(5), a.quintInOut = a.getPowInOut(5), a.sineIn = function(a) {
    return 1 - Math.cos(a * Math.PI / 2)
  }, a.sineOut = function(a) {
    return Math.sin(a * Math.PI / 2)
  }, a.sineInOut = function(a) {
    return-0.5 * (Math.cos(Math.PI * a) - 1)
  }, a.getBackIn = function(a) {
    return function(b) {
      return b * b * ((a + 1) * b - a)
    }
  }, a.backIn = a.getBackIn(1.7), a.getBackOut = function(a) {
    return function(b) {
      return--b * b * ((a + 1) * b + a) + 1
    }
  }, a.backOut = a.getBackOut(1.7), a.getBackInOut = function(a) {
    return a *= 1.525, function(b) {
      return(b *= 2) < 1 ? 0.5 * b * b * ((a + 1) * b - a) : 0.5 * ((b -= 2) * b * ((a + 1) * b + a) + 2)
    }
  }, a.backInOut = a.getBackInOut(1.7), a.circIn = function(a) {
    return-(Math.sqrt(1 - a * a) - 1)
  }, a.circOut = function(a) {
    return Math.sqrt(1 - --a * a)
  }, a.circInOut = function(a) {
    return(a *= 2) < 1 ? -0.5 * (Math.sqrt(1 - a * a) - 1) : 0.5 * (Math.sqrt(1 - (a -= 2) * a) + 1)
  }, a.bounceIn = function(b) {
    return 1 - a.bounceOut(1 - b)
  }, a.bounceOut = function(a) {
    return 1 / 2.75 > a ? 7.5625 * a * a : 2 / 2.75 > a ? 7.5625 * (a -= 1.5 / 2.75) * a + 0.75 : 2.5 / 2.75 > a ? 7.5625 * (a -= 2.25 / 2.75) * a + 0.9375 : 7.5625 * (a -= 2.625 / 2.75) * a + 0.984375
  }, a.bounceInOut = function(b) {
    return 0.5 > b ? 0.5 * a.bounceIn(2 * b) : 0.5 * a.bounceOut(2 * b - 1) + 0.5
  }, a.getElasticIn = function(a, b) {
    var c = 2 * Math.PI;
    return function(d) {
      if(0 == d || 1 == d) {
        return d
      }
      var e = b / c * Math.asin(1 / a);
      return-(a * Math.pow(2, 10 * (d -= 1)) * Math.sin((d - e) * c / b))
    }
  }, a.elasticIn = a.getElasticIn(1, 0.3), a.getElasticOut = function(a, b) {
    var c = 2 * Math.PI;
    return function(d) {
      if(0 == d || 1 == d) {
        return d
      }
      var e = b / c * Math.asin(1 / a);
      return a * Math.pow(2, -10 * d) * Math.sin((d - e) * c / b) + 1
    }
  }, a.elasticOut = a.getElasticOut(1, 0.3), a.getElasticInOut = function(a, b) {
    var c = 2 * Math.PI;
    return function(d) {
      var e = b / c * Math.asin(1 / a);
      return(d *= 2) < 1 ? -0.5 * a * Math.pow(2, 10 * (d -= 1)) * Math.sin((d - e) * c / b) : 0.5 * a * Math.pow(2, -10 * (d -= 1)) * Math.sin((d - e) * c / b) + 1
    }
  }, a.elasticInOut = a.getElasticInOut(1, 0.3 * 1.5), createjs.Ease = a
}(), this.createjs = this.createjs || {}, function() {
  var a = function() {
    throw"MotionGuidePlugin cannot be instantiated.";
  };
  a.priority = 0, a._rotOffS, a._rotOffE, a._rotNormS, a._rotNormE, a.install = function() {
    return createjs.Tween.installPlugin(a, ["guide", "x", "y", "rotation"]), createjs.Tween.IGNORE
  }, a.init = function(a, b, c) {
    var d = a.target;
    return d.hasOwnProperty("x") || (d.x = 0), d.hasOwnProperty("y") || (d.y = 0), d.hasOwnProperty("rotation") || (d.rotation = 0), "rotation" == b && (a.__needsRot = !0), "guide" == b ? null : c
  }, a.step = function(b, c, d, e, f) {
    if("rotation" == c && (b.__rotGlobalS = d, b.__rotGlobalE = e, a.testRotData(b, f)), "guide" != c) {
      return e
    }
    var g, h = e;
    h.hasOwnProperty("path") || (h.path = []);
    var i = h.path;
    if(h.hasOwnProperty("end") || (h.end = 1), h.hasOwnProperty("start") || (h.start = d && (d.hasOwnProperty("end") && d.path === i) ? d.end : 0), h.hasOwnProperty("_segments") && h._length) {
      return e
    }
    var j = i.length, k = 10;
    if(!(j >= 6 && 0 == (j - 2) % 4)) {
      throw"invalid 'path' data, please see documentation for valid paths";
    }
    h._segments = [], h._length = 0;
    for(var l = 2;j > l;l += 4) {
      for(var m, n, o = i[l - 2], p = i[l - 1], q = i[l + 0], r = i[l + 1], s = i[l + 2], t = i[l + 3], u = o, v = p, w = 0, x = [], y = 1;k >= y;y++) {
        var z = y / k, A = 1 - z;
        m = A * A * o + 2 * A * z * q + z * z * s, n = A * A * p + 2 * A * z * r + z * z * t, w += x[x.push(Math.sqrt((g = m - u) * g + (g = n - v) * g)) - 1], u = m, v = n
      }
      h._segments.push(w), h._segments.push(x), h._length += w
    }
    g = h.orient, h.orient = !0;
    var B = {};
    return a.calc(h, h.start, B), b.__rotPathS = Number(B.rotation.toFixed(5)), a.calc(h, h.end, B), b.__rotPathE = Number(B.rotation.toFixed(5)), h.orient = !1, a.calc(h, h.end, f), h.orient = g, h.orient ? (b.__guideData = h, a.testRotData(b, f), e) : e
  }, a.testRotData = function(a, b) {
    if(void 0 === a.__rotGlobalS || void 0 === a.__rotGlobalE) {
      if(a.__needsRot) {
        return
      }
      a.__rotGlobalS = a.__rotGlobalE = void 0 !== a._curQueueProps.rotation ? a._curQueueProps.rotation : b.rotation = a.target.rotation || 0
    }
    if(void 0 !== a.__guideData) {
      var c = a.__guideData, d = a.__rotGlobalE - a.__rotGlobalS, e = a.__rotPathE - a.__rotPathS, f = d - e;
      if("auto" == c.orient) {
        f > 180 ? f -= 360 : -180 > f && (f += 360)
      }else {
        if("cw" == c.orient) {
          for(;0 > f;) {
            f += 360
          }
          0 == f && (d > 0 && (180 != d && (f += 360)))
        }else {
          if("ccw" == c.orient) {
            for(f = d - (e > 180 ? 360 - e : e);f > 0;) {
              f -= 360
            }
            0 == f && (0 > d && (-180 != d && (f -= 360)))
          }
        }
      }
      c.rotDelta = f, c.rotOffS = a.__rotGlobalS - a.__rotPathS, a.__rotGlobalS = a.__rotGlobalE = a.__guideData = a.__needsRot = void 0
    }
  }, a.tween = function(b, c, d, e, f, g, h) {
    var i = f.guide;
    if(void 0 == i || i === e.guide) {
      return d
    }
    if(i.lastRatio != g) {
      var j = (i.end - i.start) * (h ? i.end : g) + i.start;
      switch(a.calc(i, j, b.target), i.orient) {
        case "cw":
        ;
        case "ccw":
        ;
        case "auto":
          b.target.rotation += i.rotOffS + i.rotDelta * g;
          break;
        case "fixed":
        ;
        default:
          b.target.rotation += i.rotOffS
      }
      i.lastRatio = g
    }
    return"rotation" != c || i.orient && "false" != i.orient ? b.target[c] : d
  }, a.calc = function(b, c, d) {
    void 0 == b._segments && a.validate(b), void 0 == d && (d = {x:0, y:0, rotation:0});
    for(var e = b._segments, f = b.path, g = b._length * c, h = e.length - 2, i = 0;g > e[i] && h > i;) {
      g -= e[i], i += 2
    }
    var j = e[i + 1], k = 0;
    for(h = j.length - 1;g > j[k] && h > k;) {
      g -= j[k], k++
    }
    var l = k / ++h + g / (h * j[k]);
    i = 2 * i + 2;
    var m = 1 - l;
    return d.x = m * m * f[i - 2] + 2 * m * l * f[i + 0] + l * l * f[i + 2], d.y = m * m * f[i - 1] + 2 * m * l * f[i + 1] + l * l * f[i + 3], b.orient && (d.rotation = 57.2957795 * Math.atan2((f[i + 1] - f[i - 1]) * m + (f[i + 3] - f[i + 1]) * l, (f[i + 0] - f[i - 2]) * m + (f[i + 2] - f[i + 0]) * l)), d
  }, createjs.MotionGuidePlugin = a
}(), this.createjs = this.createjs || {}, function() {
  var a = createjs.TweenJS = createjs.TweenJS || {};
  a.version = "0.5.0", a.buildDate = "Wed, 25 Sep 2013 17:09:35 GMT"
}();
this.createjs = this.createjs || {}, function() {
  var a = createjs.SoundJS = createjs.SoundJS || {};
  a.version = "0.5.0", a.buildDate = "Wed, 25 Sep 2013 17:09:35 GMT"
}(), this.createjs = this.createjs || {}, function() {
  var a = function() {
  }, b = a.prototype;
  a.initialize = function(a) {
    a.addEventListener = b.addEventListener, a.on = b.on, a.removeEventListener = a.off = b.removeEventListener, a.removeAllEventListeners = b.removeAllEventListeners, a.hasEventListener = b.hasEventListener, a.dispatchEvent = b.dispatchEvent, a._dispatchEvent = b._dispatchEvent
  }, b._listeners = null, b._captureListeners = null, b.initialize = function() {
  }, b.addEventListener = function(a, b, c) {
    var d;
    d = c ? this._captureListeners = this._captureListeners || {} : this._listeners = this._listeners || {};
    var e = d[a];
    return e && this.removeEventListener(a, b, c), e = d[a], e ? e.push(b) : d[a] = [b], b
  }, b.on = function(a, b, c, d, e, f) {
    return b.handleEvent && (c = c || b, b = b.handleEvent), c = c || this, this.addEventListener(a, function(a) {
      b.call(c, a, e), d && a.remove()
    }, f)
  }, b.removeEventListener = function(a, b, c) {
    var d = c ? this._captureListeners : this._listeners;
    if(d) {
      var e = d[a];
      if(e) {
        for(var f = 0, g = e.length;g > f;f++) {
          if(e[f] == b) {
            1 == g ? delete d[a] : e.splice(f, 1);
            break
          }
        }
      }
    }
  }, b.off = b.removeEventListener, b.removeAllEventListeners = function(a) {
    a ? (this._listeners && delete this._listeners[a], this._captureListeners && delete this._captureListeners[a]) : this._listeners = this._captureListeners = null
  }, b.dispatchEvent = function(a, b) {
    if("string" == typeof a) {
      var c = this._listeners;
      if(!c || !c[a]) {
        return!1
      }
      a = new createjs.Event(a)
    }
    if(a.target = b || this, a.bubbles && this.parent) {
      for(var d = this, e = [d];d.parent;) {
        e.push(d = d.parent)
      }
      var f, g = e.length;
      for(f = g - 1;f >= 0 && !a.propagationStopped;f--) {
        e[f]._dispatchEvent(a, 1 + (0 == f))
      }
      for(f = 1;g > f && !a.propagationStopped;f++) {
        e[f]._dispatchEvent(a, 3)
      }
    }else {
      this._dispatchEvent(a, 2)
    }
    return a.defaultPrevented
  }, b.hasEventListener = function(a) {
    var b = this._listeners, c = this._captureListeners;
    return!!(b && b[a] || c && c[a])
  }, b.toString = function() {
    return"[EventDispatcher]"
  }, b._dispatchEvent = function(a, b) {
    var c, d = 1 == b ? this._captureListeners : this._listeners;
    if(a && d) {
      var e = d[a.type];
      if(!e || !(c = e.length)) {
        return
      }
      a.currentTarget = this, a.eventPhase = b, a.removed = !1, e = e.slice();
      for(var f = 0;c > f && !a.immediatePropagationStopped;f++) {
        var g = e[f];
        g.handleEvent ? g.handleEvent(a) : g(a), a.removed && (this.off(a.type, g, 1 == b), a.removed = !1)
      }
    }
  }, createjs.EventDispatcher = a
}(), this.createjs = this.createjs || {}, function() {
  var a = function(a, b, c) {
    this.initialize(a, b, c)
  }, b = a.prototype;
  b.type = null, b.target = null, b.currentTarget = null, b.eventPhase = 0, b.bubbles = !1, b.cancelable = !1, b.timeStamp = 0, b.defaultPrevented = !1, b.propagationStopped = !1, b.immediatePropagationStopped = !1, b.removed = !1, b.initialize = function(a, b, c) {
    this.type = a, this.bubbles = b, this.cancelable = c, this.timeStamp = (new Date).getTime()
  }, b.preventDefault = function() {
    this.defaultPrevented = !0
  }, b.stopPropagation = function() {
    this.propagationStopped = !0
  }, b.stopImmediatePropagation = function() {
    this.immediatePropagationStopped = this.propagationStopped = !0
  }, b.remove = function() {
    this.removed = !0
  }, b.clone = function() {
    return new a(this.type, this.bubbles, this.cancelable)
  }, b.toString = function() {
    return"[Event (type=" + this.type + ")]"
  }, createjs.Event = a
}(), this.createjs = this.createjs || {}, function() {
  createjs.indexOf = function(a, b) {
    for(var c = 0, d = a.length;d > c;c++) {
      if(b === a[c]) {
        return c
      }
    }
    return-1
  }
}(), this.createjs = this.createjs || {}, function() {
  createjs.proxy = function(a, b) {
    var c = Array.prototype.slice.call(arguments, 2);
    return function() {
      return a.apply(b, Array.prototype.slice.call(arguments, 0).concat(c))
    }
  }
}(), this.createjs = this.createjs || {}, function() {
  function a() {
    throw"Sound cannot be instantiated";
  }
  function b(a, b) {
    this.init(a, b)
  }
  function c() {
    this.isDefault = !0, this.addEventListener = this.removeEventListener = this.removeAllEventListener = this.dispatchEvent = this.hasEventListener = this._listeners = this.interrupt = this.playFailed = this.pause = this.resume = this.play = this.beginPlaying = this.cleanUp = this.stop = this.setMasterVolume = this.setVolume = this.mute = this.setMute = this.getMute = this.setPan = this.getPosition = this.setPosition = function() {
      return!1
    }, this.getVolume = this.getPan = this.getDuration = function() {
      return 0
    }, this.playState = a.PLAY_FAILED, this.toString = function() {
      return"[Sound Default Sound Instance]"
    }
  }
  function d() {
  }
  var e = a;
  e.DELIMITER = "|", e.AUDIO_TIMEOUT = 8E3, e.INTERRUPT_ANY = "any", e.INTERRUPT_EARLY = "early", e.INTERRUPT_LATE = "late", e.INTERRUPT_NONE = "none", e.PLAY_INITED = "playInited", e.PLAY_SUCCEEDED = "playSucceeded", e.PLAY_INTERRUPTED = "playInterrupted", e.PLAY_FINISHED = "playFinished", e.PLAY_FAILED = "playFailed", e.SUPPORTED_EXTENSIONS = ["mp3", "ogg", "mpeg", "wav", "m4a", "mp4", "aiff", "wma", "mid"], e.EXTENSION_MAP = {m4a:"mp4"}, e.FILE_PATTERN = /^(?:(\w+:)\/{2}(\w+(?:\.\w+)*\/?))?([/.]*?(?:[^?]+)?\/)?((?:[^/?]+)\.(\w+))(?:\?(\S+)?)?$/, 
  e.defaultInterruptBehavior = e.INTERRUPT_NONE, e.lastId = 0, e.activePlugin = null, e.pluginsRegistered = !1, e.masterVolume = 1, e.masterMute = !1, e.instances = [], e.idHash = {}, e.preloadHash = {}, e.defaultSoundInstance = null, e.addEventListener = null, e.removeEventListener = null, e.removeAllEventListeners = null, e.dispatchEvent = null, e.hasEventListener = null, e._listeners = null, createjs.EventDispatcher.initialize(e), e.sendFileLoadEvent = function(a) {
    if(e.preloadHash[a]) {
      for(var b = 0, c = e.preloadHash[a].length;c > b;b++) {
        var d = e.preloadHash[a][b];
        if(e.preloadHash[a][b] = !0, e.hasEventListener("fileload")) {
          var f = new createjs.Event("fileload");
          f.src = d.src, f.id = d.id, f.data = d.data, e.dispatchEvent(f)
        }
      }
    }
  }, e.getPreloadHandlers = function() {
    return{callback:createjs.proxy(e.initLoad, e), types:["sound"], extensions:e.SUPPORTED_EXTENSIONS}
  }, e.registerPlugin = function(a) {
    return e.pluginsRegistered = !0, null == a ? !1 : a.isSupported() ? (e.activePlugin = new a, !0) : !1
  }, e.registerPlugins = function(a) {
    for(var b = 0, c = a.length;c > b;b++) {
      var d = a[b];
      if(e.registerPlugin(d)) {
        return!0
      }
    }
    return!1
  }, e.initializeDefaultPlugins = function() {
    return null != e.activePlugin ? !0 : e.pluginsRegistered ? !1 : e.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin]) ? !0 : !1
  }, e.isReady = function() {
    return null != e.activePlugin
  }, e.getCapabilities = function() {
    return null == e.activePlugin ? null : e.activePlugin.capabilities
  }, e.getCapability = function(a) {
    return null == e.activePlugin ? null : e.activePlugin.capabilities[a]
  }, e.initLoad = function(a, b, c, d, f) {
    var g = e.registerSound(a, c, d, !1, f);
    return null == g ? !1 : g
  }, e.registerSound = function(a, c, d, f, g) {
    if(!e.initializeDefaultPlugins()) {
      return!1
    }
    a instanceof Object && (g = c, c = a.id, d = a.data, a = a.src);
    var h = e.parsePath(a, "sound", c, d);
    if(null == h) {
      return!1
    }
    null != c && (e.idHash[c] = h.src);
    var i = null;
    null != d && (isNaN(d.channels) ? isNaN(d) || (i = parseInt(d)) : i = parseInt(d.channels));
    var j = e.activePlugin.register(h.src, i);
    if(null != j && (null != j.numChannels && (i = j.numChannels), b.create(h.src, i), null != d && isNaN(d) ? d.channels = h.data.channels = i || b.maxPerChannel() : d = h.data = i || b.maxPerChannel(), null != j.tag ? h.tag = j.tag : j.src && (h.src = j.src), null != j.completeHandler && (h.completeHandler = j.completeHandler), j.type && (h.type = j.type)), 0 != f) {
      if(e.preloadHash[h.src] || (e.preloadHash[h.src] = []), e.preloadHash[h.src].push({src:a, id:c, data:d}), 1 == e.preloadHash[h.src].length) {
        null == g && (g = ""), e.activePlugin.preload(h.src, j, g)
      }else {
        if(1 == e.preloadHash[h.src][0]) {
          return!0
        }
      }
    }
    return h
  }, e.registerManifest = function(a, b) {
    for(var c = [], d = 0, e = a.length;e > d;d++) {
      c[d] = createjs.Sound.registerSound(a[d].src, a[d].id, a[d].data, a[d].preload, b)
    }
    return c
  }, e.removeSound = function(a) {
    if(null == e.activePlugin) {
      return!1
    }
    a instanceof Object && (a = a.src), a = e.getSrcById(a);
    var c = e.parsePath(a);
    if(null == c) {
      return!1
    }
    a = c.src;
    for(var d in e.idHash) {
      e.idHash[d] == a && delete e.idHash[d]
    }
    return b.removeSrc(a), delete e.preloadHash[a], e.activePlugin.removeSound(a), !0
  }, e.removeManifest = function(a) {
    for(var b = [], c = 0, d = a.length;d > c;c++) {
      b[c] = createjs.Sound.removeSound(a[c].src)
    }
    return b
  }, e.removeAllSounds = function() {
    e.idHash = {}, e.preloadHash = {}, b.removeAll(), e.activePlugin.removeAllSounds()
  }, e.loadComplete = function(a) {
    var b = e.parsePath(a, "sound");
    return a = b ? e.getSrcById(b.src) : e.getSrcById(a), 1 == e.preloadHash[a][0]
  }, e.parsePath = function(a, b, c, d) {
    "string" != typeof a && (a = a.toString());
    for(var f = a.split(e.DELIMITER), g = {type:b || "sound", id:c, data:d}, h = e.getCapabilities(), i = 0, j = f.length;j > i;i++) {
      var k = f[i], l = k.match(e.FILE_PATTERN);
      if(null == l) {
        return!1
      }
      var m = l[4], n = l[5];
      if(h[n] && createjs.indexOf(e.SUPPORTED_EXTENSIONS, n) > -1) {
        return g.name = m, g.src = k, g.extension = n, g
      }
    }
    return null
  }, e.play = function(a, b, c, d, f, g, h) {
    var i = e.createInstance(a), j = e.playInstance(i, b, c, d, f, g, h);
    return j || i.playFailed(), i
  }, e.createInstance = function(c) {
    if(!e.initializeDefaultPlugins()) {
      return e.defaultSoundInstance
    }
    c = e.getSrcById(c);
    var d = e.parsePath(c, "sound"), f = null;
    return null != d && null != d.src ? (b.create(d.src), f = e.activePlugin.create(d.src)) : f = a.defaultSoundInstance, f.uniqueId = e.lastId++, f
  }, e.setVolume = function(a) {
    if(null == Number(a)) {
      return!1
    }
    if(a = Math.max(0, Math.min(1, a)), e.masterVolume = a, !this.activePlugin || (!this.activePlugin.setVolume || !this.activePlugin.setVolume(a))) {
      for(var b = this.instances, c = 0, d = b.length;d > c;c++) {
        b[c].setMasterVolume(a)
      }
    }
  }, e.getVolume = function() {
    return e.masterVolume
  }, e.setMute = function(a) {
    if(null == a || void 0 == a) {
      return!1
    }
    if(this.masterMute = a, !this.activePlugin || (!this.activePlugin.setMute || !this.activePlugin.setMute(a))) {
      for(var b = this.instances, c = 0, d = b.length;d > c;c++) {
        b[c].setMasterMute(a)
      }
    }
    return!0
  }, e.getMute = function() {
    return this.masterMute
  }, e.stop = function() {
    for(var a = this.instances, b = a.length;b--;) {
      a[b].stop()
    }
  }, e.playInstance = function(a, b, c, d, f, g, h) {
    if(b instanceof Object && (c = b.delay, d = b.offset, f = b.loop, g = b.volume, h = b.pan), b = b || e.defaultInterruptBehavior, null == c && (c = 0), null == d && (d = a.getPosition()), null == f && (f = 0), null == g && (g = a.volume), null == h && (h = a.pan), 0 == c) {
      var i = e.beginPlaying(a, b, d, f, g, h);
      if(!i) {
        return!1
      }
    }else {
      var j = setTimeout(function() {
        e.beginPlaying(a, b, d, f, g, h)
      }, c);
      a.delayTimeoutId = j
    }
    return this.instances.push(a), !0
  }, e.beginPlaying = function(a, c, d, e, f, g) {
    if(!b.add(a, c)) {
      return!1
    }
    var h = a.beginPlaying(d, e, f, g);
    if(!h) {
      var i = createjs.indexOf(this.instances, a);
      return i > -1 && this.instances.splice(i, 1), !1
    }
    return!0
  }, e.getSrcById = function(a) {
    return null == e.idHash || null == e.idHash[a] ? a : e.idHash[a]
  }, e.playFinished = function(a) {
    b.remove(a);
    var c = createjs.indexOf(this.instances, a);
    c > -1 && this.instances.splice(c, 1)
  }, createjs.Sound = a, b.channels = {}, b.create = function(a, c) {
    var d = b.get(a);
    return null == d ? (b.channels[a] = new b(a, c), !0) : !1
  }, b.removeSrc = function(a) {
    var c = b.get(a);
    return null == c ? !1 : (c.removeAll(), delete b.channels[a], !0)
  }, b.removeAll = function() {
    for(var a in b.channels) {
      b.channels[a].removeAll()
    }
    b.channels = {}
  }, b.add = function(a, c) {
    var d = b.get(a.src);
    return null == d ? !1 : d.add(a, c)
  }, b.remove = function(a) {
    var c = b.get(a.src);
    return null == c ? !1 : (c.remove(a), !0)
  }, b.maxPerChannel = function() {
    return f.maxDefault
  }, b.get = function(a) {
    return b.channels[a]
  };
  var f = b.prototype;
  f.src = null, f.max = null, f.maxDefault = 100, f.length = 0, f.init = function(a, b) {
    this.src = a, this.max = b || this.maxDefault, -1 == this.max && this.max == this.maxDefault, this.instances = []
  }, f.get = function(a) {
    return this.instances[a]
  }, f.add = function(a, b) {
    return this.getSlot(b, a) ? (this.instances.push(a), this.length++, !0) : !1
  }, f.remove = function(a) {
    var b = createjs.indexOf(this.instances, a);
    return-1 == b ? !1 : (this.instances.splice(b, 1), this.length--, !0)
  }, f.removeAll = function() {
    for(var a = this.length - 1;a >= 0;a--) {
      this.instances[a].stop()
    }
  }, f.getSlot = function(b) {
    for(var c, d, e = 0, f = this.max;f > e;e++) {
      if(c = this.get(e), null == c) {
        return!0
      }
      (b != a.INTERRUPT_NONE || c.playState == a.PLAY_FINISHED) && (0 != e ? c.playState == a.PLAY_FINISHED || (c.playState == a.PLAY_INTERRUPTED || c.playState == a.PLAY_FAILED) ? d = c : (b == a.INTERRUPT_EARLY && c.getPosition() < d.getPosition() || b == a.INTERRUPT_LATE && c.getPosition() > d.getPosition()) && (d = c) : d = c)
    }
    return null != d ? (d.interrupt(), this.remove(d), !0) : !1
  }, f.toString = function() {
    return"[Sound SoundChannel]"
  }, a.defaultSoundInstance = new c, null == createjs.proxy && (createjs.proxy = function() {
    throw"Proxy has been moved to an external file, and must be included separately.";
  }), d.init = function() {
    var a = window.navigator.userAgent;
    d.isFirefox = a.indexOf("Firefox") > -1, d.isOpera = null != window.opera, d.isChrome = a.indexOf("Chrome") > -1, d.isIOS = a.indexOf("iPod") > -1 || (a.indexOf("iPhone") > -1 || a.indexOf("iPad") > -1), d.isAndroid = a.indexOf("Android") > -1, d.isBlackberry = a.indexOf("Blackberry") > -1
  }, d.init(), createjs.Sound.BrowserDetect = d
}(), this.createjs = this.createjs || {}, function() {
  function a() {
    this.init()
  }
  var b = a;
  b.capabilities = null, b.isSupported = function() {
    var a = createjs.Sound.BrowserDetect.isIOS || (createjs.Sound.BrowserDetect.isAndroid || createjs.Sound.BrowserDetect.isBlackberry);
    return"file:" != location.protocol || (a || this.isFileXHRSupported()) ? (b.generateCapabilities(), null == b.context ? !1 : !0) : !1
  }, b.isFileXHRSupported = function() {
    var a = !0, b = new XMLHttpRequest;
    try {
      b.open("GET", "fail.fail", !1)
    }catch(c) {
      return a = !1
    }
    b.onerror = function() {
      a = !1
    }, b.onload = function() {
      a = 404 == this.status || (200 == this.status || 0 == this.status && "" != this.response)
    };
    try {
      b.send()
    }catch(c) {
      a = !1
    }
    return a
  }, b.generateCapabilities = function() {
    if(null == b.capabilities) {
      var a = document.createElement("audio");
      if(null == a.canPlayType) {
        return null
      }
      if(window.webkitAudioContext) {
        b.context = new webkitAudioContext
      }else {
        if(!window.AudioContext) {
          return null
        }
        b.context = new AudioContext
      }
      b.compatibilitySetUp(), b.playEmptySound(), b.capabilities = {panning:!0, volume:!0, tracks:-1};
      for(var c = createjs.Sound.SUPPORTED_EXTENSIONS, d = createjs.Sound.EXTENSION_MAP, e = 0, f = c.length;f > e;e++) {
        var g = c[e], h = d[g] || g;
        b.capabilities[g] = "no" != a.canPlayType("audio/" + g) && "" != a.canPlayType("audio/" + g) || "no" != a.canPlayType("audio/" + h) && "" != a.canPlayType("audio/" + h)
      }
      b.context.destination.numberOfChannels < 2 && (b.capabilities.panning = !1), b.dynamicsCompressorNode = b.context.createDynamicsCompressor(), b.dynamicsCompressorNode.connect(b.context.destination), b.gainNode = b.context.createGain(), b.gainNode.connect(b.dynamicsCompressorNode)
    }
  }, b.compatibilitySetUp = function() {
    if(!b.context.createGain) {
      b.context.createGain = b.context.createGainNode;
      var a = b.context.createBufferSource();
      a.__proto__.start = a.__proto__.noteGrainOn, a.__proto__.stop = a.__proto__.noteOff, this.panningModel = 0
    }
  }, b.playEmptySound = function() {
    var a = this.context.createBuffer(1, 1, 22050), b = this.context.createBufferSource();
    b.buffer = a, b.connect(this.context.destination), b.start(0, 0, 0)
  };
  var c = a.prototype;
  c.capabilities = null, c.volume = 1, c.context = null, c.panningModel = "equalpower", c.dynamicsCompressorNode = null, c.gainNode = null, c.arrayBuffers = null, c.init = function() {
    this.capabilities = b.capabilities, this.arrayBuffers = {}, this.context = b.context, this.gainNode = b.gainNode, this.dynamicsCompressorNode = b.dynamicsCompressorNode
  }, c.register = function(a) {
    this.arrayBuffers[a] = !0;
    var b = new createjs.WebAudioPlugin.Loader(a, this);
    return{tag:b}
  }, c.isPreloadStarted = function(a) {
    return null != this.arrayBuffers[a]
  }, c.isPreloadComplete = function(a) {
    return!(null == this.arrayBuffers[a] || 1 == this.arrayBuffers[a])
  }, c.removeFromPreload = function(a) {
    delete this.arrayBuffers[a]
  }, c.removeSound = function(a) {
    delete this.arrayBuffers[a]
  }, c.removeAllSounds = function() {
    this.arrayBuffers = {}
  }, c.addPreloadResults = function(a, b) {
    this.arrayBuffers[a] = b
  }, c.handlePreloadComplete = function() {
    createjs.Sound.sendFileLoadEvent(this.src)
  }, c.preload = function(a, b, c) {
    this.arrayBuffers[a] = !0;
    var d = new createjs.WebAudioPlugin.Loader(a, this);
    d.onload = this.handlePreloadComplete, null != c && (d.src = c + d.src), d.load()
  }, c.create = function(a) {
    return this.isPreloadStarted(a) || this.preload(a), new createjs.WebAudioPlugin.SoundInstance(a, this)
  }, c.setVolume = function(a) {
    return this.volume = a, this.updateVolume(), !0
  }, c.updateVolume = function() {
    var a = createjs.Sound.masterMute ? 0 : this.volume;
    a != this.gainNode.gain.value && (this.gainNode.gain.value = a)
  }, c.getVolume = function() {
    return this.volume
  }, c.setMute = function() {
    return this.updateVolume(), !0
  }, c.toString = function() {
    return"[WebAudioPlugin]"
  }, createjs.WebAudioPlugin = a
}(), function() {
  function a(a, b) {
    this.init(a, b)
  }
  var b = a.prototype;
  b.src = null, b.uniqueId = -1, b.playState = null, b.owner = null, b.offset = 0, b.delay = 0, b._volume = 1, Object.defineProperty(b, "volume", {get:function() {
    return this._volume
  }, set:function(a) {
    return null == Number(a) ? !1 : (a = Math.max(0, Math.min(1, a)), this._volume = a, this.updateVolume(), void 0)
  }}), b._pan = 0, Object.defineProperty(b, "pan", {get:function() {
    return this._pan
  }, set:function(a) {
    return this.owner.capabilities.panning && null != Number(a) ? (a = Math.max(-1, Math.min(1, a)), this._pan = a, this.panNode.setPosition(a, 0, -0.5), void 0) : !1
  }}), b.duration = 0, b.remainingLoops = 0, b.delayTimeoutId = null, b.soundCompleteTimeout = null, b.panNode = null, b.gainNode = null, b.sourceNode = null, b.sourceNodeNext = null, b.muted = !1, b.paused = !1, b.startTime = 0, b.addEventListener = null, b.removeEventListener = null, b.removeAllEventListeners = null, b.dispatchEvent = null, b.hasEventListener = null, b._listeners = null, b.endedHandler = null, b.readyHandler = null, b.stalledHandler = null, b.sendEvent = function(a) {
    var b = new createjs.Event(a);
    this.dispatchEvent(b)
  }, b.init = function(a, b) {
    this.owner = b, this.src = a, this.panNode = this.owner.context.createPanner(), this.panNode.panningModel = this.owner.panningModel, this.gainNode = this.owner.context.createGain(), this.gainNode.connect(this.panNode), this.owner.isPreloadComplete(this.src) && (this.duration = 1E3 * this.owner.arrayBuffers[this.src].duration), this.endedHandler = createjs.proxy(this.handleSoundComplete, this), this.readyHandler = createjs.proxy(this.handleSoundReady, this), this.stalledHandler = createjs.proxy(this.handleSoundStalled, 
    this)
  }, b.cleanUp = function() {
    this.sourceNode && (this.sourceNode.playbackState != this.sourceNode.UNSCHEDULED_STATE && (this.sourceNode = this.cleanUpAudioNode(this.sourceNode), this.sourceNodeNext = this.cleanUpAudioNode(this.sourceNodeNext))), 0 != this.panNode.numberOfOutputs && this.panNode.disconnect(0), clearTimeout(this.delayTimeoutId), clearTimeout(this.soundCompleteTimeout), this.startTime = 0, null != window.createjs && createjs.Sound.playFinished(this)
  }, b.cleanUpAudioNode = function(a) {
    return a && (a.stop(0), a.disconnect(this.gainNode), a = null), a
  }, b.interrupt = function() {
    this.playState = createjs.Sound.PLAY_INTERRUPTED, this.cleanUp(), this.paused = !1, this.sendEvent("interrupted")
  }, b.handleSoundStalled = function() {
    this.sendEvent("failed")
  }, b.handleSoundReady = function() {
    if(null != window.createjs) {
      if(1E3 * this.offset > this.getDuration()) {
        return this.playFailed(), void 0
      }
      this.offset < 0 && (this.offset = 0), this.playState = createjs.Sound.PLAY_SUCCEEDED, this.paused = !1, this.panNode.connect(this.owner.gainNode);
      var a = this.owner.arrayBuffers[this.src].duration;
      this.sourceNode = this.createAndPlayAudioNode(this.owner.context.currentTime - a, this.offset), this.duration = 1E3 * a, this.startTime = this.sourceNode.startTime - this.offset, this.soundCompleteTimeout = setTimeout(this.endedHandler, 1E3 * (a - this.offset)), 0 != this.remainingLoops && (this.sourceNodeNext = this.createAndPlayAudioNode(this.startTime, 0))
    }
  }, b.createAndPlayAudioNode = function(a, b) {
    var c = this.owner.context.createBufferSource();
    return c.buffer = this.owner.arrayBuffers[this.src], c.connect(this.gainNode), this.owner.context.currentTime, c.startTime = a + c.buffer.duration, c.start(c.startTime, b, c.buffer.duration - b), c
  }, b.play = function(a, b, c, d, e, f) {
    this.cleanUp(), createjs.Sound.playInstance(this, a, b, c, d, e, f)
  }, b.beginPlaying = function(a, b, c, d) {
    return null != window.createjs && this.src ? (this.offset = a / 1E3, this.remainingLoops = b, this.volume = c, this.pan = d, this.owner.isPreloadComplete(this.src) ? (this.handleSoundReady(null), this.sendEvent("succeeded"), 1) : (this.playFailed(), void 0)) : void 0
  }, b.pause = function() {
    return this.paused || this.playState != createjs.Sound.PLAY_SUCCEEDED ? !1 : (this.paused = !0, this.offset = this.owner.context.currentTime - this.startTime, this.cleanUpAudioNode(this.sourceNode), this.cleanUpAudioNode(this.sourceNodeNext), 0 != this.panNode.numberOfOutputs && this.panNode.disconnect(), clearTimeout(this.delayTimeoutId), clearTimeout(this.soundCompleteTimeout), !0)
  }, b.resume = function() {
    return this.paused ? (this.handleSoundReady(null), !0) : !1
  }, b.stop = function() {
    return this.playState = createjs.Sound.PLAY_FINISHED, this.cleanUp(), this.offset = 0, !0
  }, b.setVolume = function(a) {
    return this.volume = a, !0
  }, b.updateVolume = function() {
    var a = this.muted ? 0 : this._volume;
    return a != this.gainNode.gain.value ? (this.gainNode.gain.value = a, !0) : !1
  }, b.getVolume = function() {
    return this.volume
  }, b.setMute = function(a) {
    return null == a || void 0 == a ? !1 : (this.muted = a, this.updateVolume(), !0)
  }, b.getMute = function() {
    return this.muted
  }, b.setPan = function(a) {
    return this.pan = a, this.pan != a ? !1 : void 0
  }, b.getPan = function() {
    return this.pan
  }, b.getPosition = function() {
    if(this.paused || null == this.sourceNode) {
      var a = this.offset
    }else {
      var a = this.owner.context.currentTime - this.startTime
    }
    return 1E3 * a
  }, b.setPosition = function(a) {
    return this.offset = a / 1E3, this.sourceNode && (this.sourceNode.playbackState != this.sourceNode.UNSCHEDULED_STATE && (this.cleanUpAudioNode(this.sourceNode), this.cleanUpAudioNode(this.sourceNodeNext), clearTimeout(this.soundCompleteTimeout))), this.paused || (this.playState != createjs.Sound.PLAY_SUCCEEDED || this.handleSoundReady(null)), !0
  }, b.getDuration = function() {
    return this.duration
  }, b.handleSoundComplete = function() {
    return this.offset = 0, 0 != this.remainingLoops ? (this.remainingLoops--, this.sourceNodeNext ? (this.cleanUpAudioNode(this.sourceNode), this.sourceNode = this.sourceNodeNext, this.startTime = this.sourceNode.startTime, this.sourceNodeNext = this.createAndPlayAudioNode(this.startTime, 0), this.soundCompleteTimeout = setTimeout(this.endedHandler, this.duration)) : this.handleSoundReady(null), this.sendEvent("loop"), void 0) : (null != window.createjs && (this.playState = createjs.Sound.PLAY_FINISHED, 
    this.cleanUp(), this.sendEvent("complete")), void 0)
  }, b.playFailed = function() {
    null != window.createjs && (this.playState = createjs.Sound.PLAY_FAILED, this.cleanUp(), this.sendEvent("failed"))
  }, b.toString = function() {
    return"[WebAudioPlugin SoundInstance]"
  }, createjs.EventDispatcher.initialize(a.prototype), createjs.WebAudioPlugin.SoundInstance = a
}(), function() {
  function a(a, b) {
    this.init(a, b)
  }
  var b = a.prototype;
  b.request = null, b.owner = null, b.progress = -1, b.src = null, b.originalSrc = null, b.result = null, b.onload = null, b.onprogress = null, b.onError = null, b.init = function(a, b) {
    this.src = a, this.originalSrc = a, this.owner = b
  }, b.load = function(a) {
    null != a && (this.src = a), this.request = new XMLHttpRequest, this.request.open("GET", this.src, !0), this.request.responseType = "arraybuffer", this.request.onload = createjs.proxy(this.handleLoad, this), this.request.onError = createjs.proxy(this.handleError, this), this.request.onprogress = createjs.proxy(this.handleProgress, this), this.request.send()
  }, b.handleProgress = function(a, b) {
    this.progress = a / b, null != this.onprogress && this.onprogress({loaded:a, total:b, progress:this.progress})
  }, b.handleLoad = function() {
    this.owner.context.decodeAudioData(this.request.response, createjs.proxy(this.handleAudioDecoded, this), createjs.proxy(this.handleError, this))
  }, b.handleAudioDecoded = function(a) {
    this.progress = 1, this.result = a, this.src = this.originalSrc, this.owner.addPreloadResults(this.src, this.result), this.onload && this.onload()
  }, b.handleError = function(a) {
    this.owner.removeSound(this.src), this.onerror && this.onerror(a)
  }, b.toString = function() {
    return"[WebAudioPlugin Loader]"
  }, createjs.WebAudioPlugin.Loader = a
}(), this.createjs = this.createjs || {}, function() {
  function a() {
    this.init()
  }
  var b = a;
  b.MAX_INSTANCES = 30, b.capabilities = null, b.AUDIO_READY = "canplaythrough", b.AUDIO_ENDED = "ended", b.AUDIO_SEEKED = "seeked", b.AUDIO_ERROR = "error", b.AUDIO_STALLED = "stalled", b.enableIOS = !1, b.isSupported = function() {
    if(createjs.Sound.BrowserDetect.isIOS && !b.enableIOS) {
      return!1
    }
    b.generateCapabilities();
    var a = b.tag;
    return null == a || null == b.capabilities ? !1 : !0
  }, b.generateCapabilities = function() {
    if(null == b.capabilities) {
      var a = b.tag = document.createElement("audio");
      if(null == a.canPlayType) {
        return null
      }
      b.capabilities = {panning:!0, volume:!0, tracks:-1};
      for(var c = createjs.Sound.SUPPORTED_EXTENSIONS, d = createjs.Sound.EXTENSION_MAP, e = 0, f = c.length;f > e;e++) {
        var g = c[e], h = d[g] || g;
        b.capabilities[g] = "no" != a.canPlayType("audio/" + g) && "" != a.canPlayType("audio/" + g) || "no" != a.canPlayType("audio/" + h) && "" != a.canPlayType("audio/" + h)
      }
    }
  };
  var c = a.prototype;
  c.capabilities = null, c.audioSources = null, c.defaultNumChannels = 2, c.loadedHandler = null, c.init = function() {
    this.capabilities = b.capabilities, this.audioSources = {}
  }, c.register = function(a, b) {
    this.audioSources[a] = !0;
    for(var c = createjs.HTMLAudioPlugin.TagPool.get(a), d = null, e = b || this.defaultNumChannels, f = 0;e > f;f++) {
      d = this.createTag(a), c.add(d)
    }
    if(d.id = a, this.loadedHandler = createjs.proxy(this.handleTagLoad, this), d.addEventListener && d.addEventListener("canplaythrough", this.loadedHandler), null == d.onreadystatechange) {
      d.onreadystatechange = this.loadedHandler
    }else {
      var g = d.onreadystatechange;
      d.onreadystatechange = function() {
        g(), this.loadedHandler()
      }
    }
    return{tag:d, numChannels:e}
  }, c.handleTagLoad = function(a) {
    a.target.removeEventListener && a.target.removeEventListener("canplaythrough", this.loadedHandler), a.target.onreadystatechange = null, a.target.src != a.target.id && createjs.HTMLAudioPlugin.TagPool.checkSrc(a.target.id)
  }, c.createTag = function(a) {
    var b = document.createElement("audio");
    return b.autoplay = !1, b.preload = "none", b.src = a, b
  }, c.removeSound = function(a) {
    delete this.audioSources[a], createjs.HTMLAudioPlugin.TagPool.remove(a)
  }, c.removeAllSounds = function() {
    this.audioSources = {}, createjs.HTMLAudioPlugin.TagPool.removeAll()
  }, c.create = function(a) {
    if(!this.isPreloadStarted(a)) {
      var b = createjs.HTMLAudioPlugin.TagPool.get(a), c = this.createTag(a);
      c.id = a, b.add(c), this.preload(a, {tag:c})
    }
    return new createjs.HTMLAudioPlugin.SoundInstance(a, this)
  }, c.isPreloadStarted = function(a) {
    return null != this.audioSources[a]
  }, c.preload = function(a, b, c) {
    this.audioSources[a] = !0, null != c && (b.tag.src = c + a), new createjs.HTMLAudioPlugin.Loader(a, b.tag)
  }, c.toString = function() {
    return"[HTMLAudioPlugin]"
  }, createjs.HTMLAudioPlugin = a
}(), function() {
  function a(a, b) {
    this.init(a, b)
  }
  var b = a.prototype;
  b.src = null, b.uniqueId = -1, b.playState = null, b.owner = null, b.loaded = !1, b.offset = 0, b.delay = 0, b._volume = 1, Object.defineProperty(b, "volume", {get:function() {
    return this._volume
  }, set:function(a) {
    null != Number(a) && (a = Math.max(0, Math.min(1, a)), this._volume = a, this.updateVolume())
  }}), b.pan = 0, b.duration = 0, b.remainingLoops = 0, b.delayTimeoutId = null, b.tag = null, b.muted = !1, b.paused = !1, b.addEventListener = null, b.removeEventListener = null, b.removeAllEventListeners = null, b.dispatchEvent = null, b.hasEventListener = null, b._listeners = null, b.endedHandler = null, b.readyHandler = null, b.stalledHandler = null, b.loopHandler = null, b.init = function(a, b) {
    this.src = a, this.owner = b, this.endedHandler = createjs.proxy(this.handleSoundComplete, this), this.readyHandler = createjs.proxy(this.handleSoundReady, this), this.stalledHandler = createjs.proxy(this.handleSoundStalled, this), this.loopHandler = createjs.proxy(this.handleSoundLoop, this)
  }, b.sendEvent = function(a) {
    var b = new createjs.Event(a);
    this.dispatchEvent(b)
  }, b.cleanUp = function() {
    var a = this.tag;
    if(null != a) {
      a.pause(), a.removeEventListener(createjs.HTMLAudioPlugin.AUDIO_ENDED, this.endedHandler, !1), a.removeEventListener(createjs.HTMLAudioPlugin.AUDIO_READY, this.readyHandler, !1), a.removeEventListener(createjs.HTMLAudioPlugin.AUDIO_SEEKED, this.loopHandler, !1);
      try {
        a.currentTime = 0
      }catch(b) {
      }
      createjs.HTMLAudioPlugin.TagPool.setInstance(this.src, a), this.tag = null
    }
    clearTimeout(this.delayTimeoutId), null != window.createjs && createjs.Sound.playFinished(this)
  }, b.interrupt = function() {
    null != this.tag && (this.playState = createjs.Sound.PLAY_INTERRUPTED, this.cleanUp(), this.paused = !1, this.sendEvent("interrupted"))
  }, b.play = function(a, b, c, d, e, f) {
    this.cleanUp(), createjs.Sound.playInstance(this, a, b, c, d, e, f)
  }, b.beginPlaying = function(a, b, c, d) {
    if(null == window.createjs) {
      return-1
    }
    var e = this.tag = createjs.HTMLAudioPlugin.TagPool.getInstance(this.src);
    return null == e ? (this.playFailed(), -1) : (e.addEventListener(createjs.HTMLAudioPlugin.AUDIO_ENDED, this.endedHandler, !1), this.offset = a, this.volume = c, this.pan = d, this.updateVolume(), this.remainingLoops = b, 4 !== e.readyState ? (e.addEventListener(createjs.HTMLAudioPlugin.AUDIO_READY, this.readyHandler, !1), e.addEventListener(createjs.HTMLAudioPlugin.AUDIO_STALLED, this.stalledHandler, !1), e.preload = "auto", e.load()) : this.handleSoundReady(null), this.sendEvent("succeeded"), 
    1)
  }, b.handleSoundStalled = function() {
    this.cleanUp(), this.sendEvent("failed")
  }, b.handleSoundReady = function() {
    if(null != window.createjs) {
      if(this.duration = 1E3 * this.tag.duration, this.playState = createjs.Sound.PLAY_SUCCEEDED, this.paused = !1, this.tag.removeEventListener(createjs.HTMLAudioPlugin.AUDIO_READY, this.readyHandler, !1), this.offset >= this.getDuration()) {
        return this.playFailed(), void 0
      }
      this.offset > 0 && (this.tag.currentTime = 0.001 * this.offset), -1 == this.remainingLoops && (this.tag.loop = !0), 0 != this.remainingLoops && (this.tag.addEventListener(createjs.HTMLAudioPlugin.AUDIO_SEEKED, this.loopHandler, !1), this.tag.loop = !0), this.tag.play()
    }
  }, b.pause = function() {
    return this.paused || (this.playState != createjs.Sound.PLAY_SUCCEEDED || null == this.tag) ? !1 : (this.paused = !0, this.tag.pause(), clearTimeout(this.delayTimeoutId), !0)
  }, b.resume = function() {
    return this.paused && null != this.tag ? (this.paused = !1, this.tag.play(), !0) : !1
  }, b.stop = function() {
    return this.offset = 0, this.pause(), this.playState = createjs.Sound.PLAY_FINISHED, this.cleanUp(), !0
  }, b.setMasterVolume = function() {
    return this.updateVolume(), !0
  }, b.setVolume = function(a) {
    return this.volume = a, !0
  }, b.updateVolume = function() {
    if(null != this.tag) {
      var a = this.muted || createjs.Sound.masterMute ? 0 : this._volume * createjs.Sound.masterVolume;
      return a != this.tag.volume && (this.tag.volume = a), !0
    }
    return!1
  }, b.getVolume = function() {
    return this.volume
  }, b.setMasterMute = function() {
    return this.updateVolume(), !0
  }, b.setMute = function(a) {
    return null == a || void 0 == a ? !1 : (this.muted = a, this.updateVolume(), !0)
  }, b.getMute = function() {
    return this.muted
  }, b.setPan = function() {
    return!1
  }, b.getPan = function() {
    return 0
  }, b.getPosition = function() {
    return null == this.tag ? this.offset : 1E3 * this.tag.currentTime
  }, b.setPosition = function(a) {
    if(null == this.tag) {
      this.offset = a
    }else {
      this.tag.removeEventListener(createjs.HTMLAudioPlugin.AUDIO_SEEKED, this.loopHandler, !1);
      try {
        this.tag.currentTime = 0.001 * a
      }catch(b) {
        return!1
      }
      this.tag.addEventListener(createjs.HTMLAudioPlugin.AUDIO_SEEKED, this.loopHandler, !1)
    }
    return!0
  }, b.getDuration = function() {
    return this.duration
  }, b.handleSoundComplete = function() {
    this.offset = 0, null != window.createjs && (this.playState = createjs.Sound.PLAY_FINISHED, this.cleanUp(), this.sendEvent("complete"))
  }, b.handleSoundLoop = function() {
    this.offset = 0, this.remainingLoops--, 0 == this.remainingLoops && (this.tag.loop = !1, this.tag.removeEventListener(createjs.HTMLAudioPlugin.AUDIO_SEEKED, this.loopHandler, !1)), this.sendEvent("loop")
  }, b.playFailed = function() {
    null != window.createjs && (this.playState = createjs.Sound.PLAY_FAILED, this.cleanUp(), this.sendEvent("failed"))
  }, b.toString = function() {
    return"[HTMLAudioPlugin SoundInstance]"
  }, createjs.EventDispatcher.initialize(a.prototype), createjs.HTMLAudioPlugin.SoundInstance = a
}(), function() {
  function a(a, b) {
    this.init(a, b)
  }
  var b = a.prototype;
  b.src = null, b.tag = null, b.preloadTimer = null, b.loadedHandler = null, b.init = function(a, b) {
    if(this.src = a, this.tag = b, this.preloadTimer = setInterval(createjs.proxy(this.preloadTick, this), 200), this.loadedHandler = createjs.proxy(this.sendLoadedEvent, this), this.tag.addEventListener && this.tag.addEventListener("canplaythrough", this.loadedHandler), null == this.tag.onreadystatechange) {
      this.tag.onreadystatechange = createjs.proxy(this.sendLoadedEvent, this)
    }else {
      var c = this.tag.onreadystatechange;
      this.tag.onreadystatechange = function() {
        c(), this.tag.onreadystatechange = createjs.proxy(this.sendLoadedEvent, this)
      }
    }
    this.tag.preload = "auto", this.tag.load()
  }, b.preloadTick = function() {
    var a = this.tag.buffered, b = this.tag.duration;
    a.length > 0 && (a.end(0) >= b - 1 && this.handleTagLoaded())
  }, b.handleTagLoaded = function() {
    clearInterval(this.preloadTimer)
  }, b.sendLoadedEvent = function() {
    this.tag.removeEventListener && this.tag.removeEventListener("canplaythrough", this.loadedHandler), this.tag.onreadystatechange = null, createjs.Sound.sendFileLoadEvent(this.src)
  }, b.toString = function() {
    return"[HTMLAudioPlugin Loader]"
  }, createjs.HTMLAudioPlugin.Loader = a
}(), function() {
  function a(a) {
    this.init(a)
  }
  var b = a;
  b.tags = {}, b.get = function(c) {
    var d = b.tags[c];
    return null == d && (d = b.tags[c] = new a(c)), d
  }, b.remove = function(a) {
    var c = b.tags[a];
    return null == c ? !1 : (c.removeAll(), delete b.tags[a], !0)
  }, b.removeAll = function() {
    for(var a in b.tags) {
      b.tags[a].removeAll()
    }
    b.tags = {}
  }, b.getInstance = function(a) {
    var c = b.tags[a];
    return null == c ? null : c.get()
  }, b.setInstance = function(a, c) {
    var d = b.tags[a];
    return null == d ? null : d.set(c)
  }, b.checkSrc = function(a) {
    var c = b.tags[a];
    return null == c ? null : (c.checkSrcChange(), void 0)
  };
  var c = a.prototype;
  c.src = null, c.length = 0, c.available = 0, c.tags = null, c.init = function(a) {
    this.src = a, this.tags = []
  }, c.add = function(a) {
    this.tags.push(a), this.length++, this.available++
  }, c.removeAll = function() {
    for(;this.length--;) {
      delete this.tags[this.length]
    }
    this.src = null, this.tags.length = 0
  }, c.get = function() {
    if(0 == this.tags.length) {
      return null
    }
    this.available = this.tags.length;
    var a = this.tags.pop();
    return null == a.parentNode && document.body.appendChild(a), a
  }, c.set = function(a) {
    var b = createjs.indexOf(this.tags, a);
    -1 == b && this.tags.push(a), this.available = this.tags.length
  }, c.checkSrcChange = function() {
    for(var a = this.tags.length - 1, b = this.tags[a].src;a--;) {
      this.tags[a].src = b
    }
  }, c.toString = function() {
    return"[HTMLAudioPlugin TagPool]"
  }, createjs.HTMLAudioPlugin.TagPool = a
}();
(function(window) {
  window.hideAddressbar = function(elem) {
    elem = typeof elem === "string" ? document.querySelector(elem) : elem;
    var ua = navigator.userAgent, iphone = ~ua.indexOf("iPhone") || ~ua.indexOf("iPod"), ipad = ~ua.indexOf("iPad"), ios = iphone || ipad, android = ~ua.indexOf("Android"), fullscreen = window.navigator.standalone, lastWidth = 0;
    if(!(ios || android) || !elem) {
      return
    }
    if(android) {
      window.addEventListener("scroll", function() {
        elem.style.height = window.innerHeight + "px"
      }, false)
    }
    var setupScroll = function() {
      var height = 0;
      if(ios) {
        height = document.documentElement.clientHeight;
        if(iphone && !fullscreen) {
          height += 60
        }
      }else {
        if(android) {
          height = window.innerHeight + 56
        }
      }
      elem.style.height = height + "px";
      setTimeout(scrollTo, 0, 0, 1)
    };
    (function resize() {
      var pageWidth = elem.offsetWidth;
      if(lastWidth === pageWidth) {
        return
      }
      lastWidth = pageWidth;
      setupScroll();
      window.addEventListener("resize", resize, false);
      console.log("resizefunt")
    })()
  }
})(this);
function isArrayContains(arr, obj) {
  return arr.indexOf(obj) > -1
}
function addToArray(arr, obj) {
  if(!isArrayContains(arr, obj)) {
    arr.push(obj)
  }
}
function removeFromArray(arr, obj) {
  if(isArrayContains(arr, obj)) {
    arr.splice(arr.indexOf(obj, 0), 1)
  }
}
function setCacheFromOther(objTo, objFrom) {
  objTo.cacheCanvas = objFrom.cacheCanvas;
  objTo.cacheID = objFrom.cacheID;
  objTo._cacheWidth = objFrom._cacheWidth;
  objTo._cacheHeight = objFrom._cacheHeight;
  objTo._cacheOffsetX = objFrom._cacheOffsetX;
  objTo._cacheOffsetY = objFrom._cacheOffsetY;
  objTo._cacheScale = objFrom._cacheScale
}
function deleteCache(obj) {
  obj.cacheCanvas = null;
  obj.cacheID = 0
}
function trace(obj) {
  if(isLevelEditor) {
    console.log(obj)
  }
}
function onHoverScale(target) {
  target.scaleX = target.scaleY = spriteScale * 1.2 * (target.defaultScale ? target.defaultScale : 1)
}
function onOutScale(target) {
  target.scaleX = target.scaleY = spriteScale * (target.defaultScale ? target.defaultScale : 1)
}
function removeFromParent(obj) {
  if(obj.parent) {
    obj.parent.removeChild(obj)
  }
}
function addToParent(obj, parent) {
  removeFromParent(obj);
  if(parent) {
    parent.addChild(obj)
  }
}
function setSpriteScale(obj, scale) {
  obj.scaleX = obj.scaleY = scale
}
function setTextAndCenter(x, y, text, field) {
  if(field.text == text) {
    return
  }
  field.text = text;
  var bounds = field.getBounds();
  field.x = x - (bounds.width >> 1) * field.scaleX;
  if(y) {
    field.y = y - (bounds.height >> 1) * field.scaleY
  }
}
function setAnimationSpeed(vision, speed) {
  vision._animation.speed = speed
}
function setNextAnimation(vision, nextFrame) {
  vision._animation.next = nextFrame
}
function randomizeAnimFrame(vision) {
  vision.currentAnimationFrame = Math.floor(Math.random() * 30)
}
function addToParentWithIndex(obj, parent, index) {
  removeFromParent(obj);
  if(parent) {
    parent.addChildAt(obj, index)
  }
}
var spilLogo;
var logoDefaultY = 0;
var logoDefaultX = 0;
var currentLogoHorizPos = 0;
var currentLogoVertPos = 0;
var LOGO_TOP_POS = 0;
var LOGO_BOTTOM_POS = 1;
var LOGO_VERTICAL_ANY_POS = 2;
var LOGO_LEFT_POS = 3;
var LOGO_RIGHT_POS = 4;
var LOGO_HORIZ_ANY_POS = 5;
var logoPosDivisor = 1;
var sponsorLogoFrame = "splashlogo";
var currentLogoParams = {x:0, y:0, scale:1};
function createSponsorLogo() {
  spilLogo = new createjs.Container
}
function showSponsorLogo(x, y, scale, parent, alpha, horizPos, vertPos, posDivisor, index) {
  if(!spilLogo) {
    createSponsorLogo()
  }
  if(isSponsorLogoError) {
    return
  }
  if(index !== null && (index !== undefined && index > -1)) {
    addToParentWithIndex(spilLogo, parent, index)
  }else {
    addToParent(spilLogo, parent)
  }
  currentLogoHorizPos = horizPos;
  currentLogoVertPos = vertPos;
  spilLogo.alpha = alpha ? alpha : 1;
  logoPosDivisor = posDivisor;
  currentLogoParams.x = x;
  currentLogoParams.y = y;
  currentLogoParams.scale = scale;
  updateLogoSize();
  updateLogoPos()
}
function updateLogoSize() {
  var logoScale = 40 / sponsorLogoDefHeight;
  logoScale = Math.min(logoScale, 320 / sponsorLogoDefWidth);
  logoScale *= currentLogoParams.scale;
  var width = sponsorLogoDefWidth * logoScale;
  var heigth = sponsorLogoDefHeight * logoScale;
  logoDefaultY = currentLogoParams.y - Math.floor(heigth / 2);
  logoDefaultX = currentLogoParams.x - Math.floor(width / 2);
  if(sponsorLogoBitmap) {
    sponsorLogoBitmap.scaleX = sponsorLogoBitmap.scaleY = logoScale;
    sponsorLogoBitmap.setBoundingBox(0, 0, width, heigth)
  }
}
function updateLogoPos() {
  if(!spilLogo) {
    return
  }
  if(isSponsorLogoError) {
    return
  }
  spilLogo.x = logoDefaultX;
  spilLogo.y = logoDefaultY;
  if(currentLogoHorizPos === LOGO_LEFT_POS) {
    spilLogo.x += deltaForHLeft()
  }else {
    if(currentLogoHorizPos === LOGO_RIGHT_POS) {
      spilLogo.x -= deltaForHLeft()
    }
  }
  if(currentLogoVertPos === LOGO_TOP_POS) {
    spilLogo.y += deltaForVTop() / logoPosDivisor
  }else {
    if(currentLogoVertPos === LOGO_BOTTOM_POS) {
      spilLogo.y -= deltaForVTop() / logoPosDivisor
    }
  }
}
var isAdPauseSoundMuted = false;
function startSponsorAds() {
  if(sponsorApi) {
    isAdPauseSoundMuted = isMute;
    sponsorApi.GameBreak.request(onAdBeginPause, onAdEndUnpause)
  }
}
function onAdBeginPause() {
  trace("ad pause, , sound is muted: " + isMute);
  isAdPauseSoundMuted = isMute;
  isMute = true;
  createjs.Sound.setMute(true);
  stopBgMusic();
  stopWindSound()
}
function onAdEndUnpause() {
  trace("ad unpause, sound was muted: " + isAdPauseSoundMuted);
  isMute = isAdPauseSoundMuted;
  createjs.Sound.setMute(false);
  if(!isMute) {
    playBgMusic()
  }
}
function showTopLogo(scale) {
  showSponsorLogo(160, 26, scale * 0.9, container, 1, LOGO_HORIZ_ANY_POS, LOGO_TOP_POS, 2)
}
var moreGamesConfig;
function initSpilApi() {
  try {
    var SpilData = {id:"576742227280298054"};
    GameAPI.loadAPI(function(apiInstance) {
      sponsorApi = apiInstance;
      if(window.console && window.console.log) {
        console.log("GameAPI version " + apiInstance.version + " loaded!")
      }
      logoConfig = sponsorApi.Branding.getLogo();
      moreGamesConfig = sponsorApi.Branding.getLink("more_games");
      trace(logoConfig);
      if(logoConfig.image) {
        sponsorPreload = new createjs.LoadQueue(false, "", true);
        sponsorPreload.addEventListener("complete", handleSponsorLogoComplete);
        sponsorPreload.addEventListener("fileload", handleFileLoad);
        sponsorPreload.addEventListener("error", handleFileLoadError);
        var sponsorManifest = [];
        var imgUrl = "" + logoConfig.image;
        sponsorManifest.push({src:imgUrl, id:"sponsorLogoImg", type:createjs.LoadQueue.IMAGE});
        sponsorPreload.loadManifest(sponsorManifest)
      }else {
        isSponsorLogoError = true;
        if(isAllFilesLoaded) {
          startGame()
        }
      }
    }, SpilData)
  }catch(event) {
    trace("init api fail!");
    isSponsorLogoError = true;
    if(isAllFilesLoaded) {
      startGame()
    }
  }
}
function showGameAfterSplash() {
}
function handleFileLoadError(event) {
  trace("Logo loading error!");
  isSponsorLogoError = true
}
var isSponsorLogoError = false;
function handleSponsorLogoComplete(event) {
  if(isSponsorLogoError) {
    if(isAllFilesLoaded) {
      startGame()
    }
    return
  }
  if(!spilLogo) {
    createSponsorLogo()
  }
  trace("logo loaded!");
  var image = files["sponsorLogoImg"];
  var w = sponsorLogoDefWidth = image.width ? image.width : 200;
  var h = sponsorLogoDefHeight = image.height ? image.height : 50;
  var scale = 1;
  var bmp = sponsorLogoBitmap = (new createjs.Bitmap(image)).set({scaleX:scale, scaleY:scale, regX:0, regY:0, cursor:"pointer", x:0, y:0});
  bmp.isOnlyBoundsCheck = true;
  bmp.setBoundingBox(0, 0, w * scale, h * scale);
  bmp.addEventListener("mousedown", logoDownAction);
  bmp.addEventListener("pressup", logoAction);
  spilLogo.addChild(bmp);
  updateLogoSize();
  updateLogoPos();
  if(loaderBar) {
    showSponsorLogo(160, 80, 1, loaderBar, 1, LOGO_HORIZ_ANY_POS, LOGO_VERTICAL_ANY_POS, 2)
  }
  isLogoReady = true;
  if(isAllFilesLoaded) {
    startGame()
  }
}
function logoAction(event) {
  logoConfig.action()
}
function logoDownAction(event) {
}
var logoConfig, sponsorLogoBitmap, sponsorPreload;
var sponsorLogoDefWidth = 200;
var sponsorLogoDefHeight = 50;
var sponsorApi;
var isLogoReady = false;
var isGameInited = false;
function createBgFromFile(fileName) {
  var bg;
  if(files[fileName + ""]) {
    var image = files[fileName];
    bg = new createjs.Bitmap(image);
    if(isLowGfx) {
      setSpriteScale(bg, spriteScale)
    }
  }
  allBgs.push(bg)
}
function createBitmapFromFile(fileName, x, y, scale, parent) {
  var btm = new createjs.Bitmap(files[fileName]);
  btm.x = x;
  btm.y = y;
  setSpriteScale(btm, scale);
  addToParent(btm, parent);
  return btm
}
function animateButtonShow(b, waitTime, isUpdateAlign) {
  setSpritePosAndAngle(b, b.defaultParams.x, b.defaultParams.y, -90);
  if(isUpdateAlign) {
    updateObjectPos(b)
  }
  setSpriteScale(b, 0);
  createjs.Tween.get(b, {override:true}).wait(waitTime).to({scaleX:b.defaultParams.scaleX, scaleY:b.defaultParams.scaleY, rotation:0}, 1E3, createjs.Ease.elasticOut)
}
function animateButtonShow2(b, waitTime, isUpdateAlign) {
  setSpritePosAndAngle(b, b.defaultParams.x, b.defaultParams.y, 90);
  if(isUpdateAlign) {
    updateObjectPos(b)
  }
  setSpriteScale(b, 0);
  createjs.Tween.get(b, {override:true}).wait(waitTime).to({scaleX:b.defaultParams.scaleX, scaleY:b.defaultParams.scaleY, rotation:0}, 1E3, createjs.Ease.elasticOut)
}
function setSpritePosAndAngle(obj, x, y, rotation) {
  obj.x = x;
  obj.y = y;
  if(rotation) {
    obj.rotation = rotation
  }
}
function animateButtonShowX(b, waitTime, startX, time, override) {
  updateObjectPos(b);
  var target = b.x;
  b.x += startX;
  createjs.Tween.get(b, {override:override}).wait(waitTime).to({x:target}, time, createjs.Ease.elasticOut)
}
function animateButtonShow3(b, waitTime) {
  setSpritePosAndAngle(b, b.defaultParams.x, b.defaultParams.y, 0);
  setSpriteScale(b, 0);
  createjs.Tween.get(b, {override:true}).wait(waitTime).to({scaleX:b.defaultParams.scaleX, scaleY:b.defaultParams.scaleY}, 1E3, createjs.Ease.elasticOut)
}
function animateButtonShow4(b, waitTime) {
  setSpritePosAndAngle(b, b.defaultParams.x, b.defaultParams.y, 70);
  setSpriteScale(b, b.defaultParams.scaleX - 0.3);
  createjs.Tween.get(b, {override:true}).wait(waitTime).to({scaleX:b.defaultParams.scaleX, scaleY:b.defaultParams.scaleY, rotation:0}, 800, createjs.Ease.elasticOut)
}
function animateButtonShowX2(b, waitTime, startX, time, override) {
  updateObjectPos(b);
  var target = b.x;
  b.x += startX;
  createjs.Tween.get(b, {override:override}).wait(waitTime).to({x:target}, time, createjs.Ease.sineOut)
}
function updateObjectPos(obj) {
  if(!obj) {
    return
  }
  if(!isArrayContains(allAutoAligned, obj)) {
    return
  }
  obj.x = obj.defaultParams.x;
  obj.y = obj.defaultParams.y;
  var alignDevisor = obj.defaultParams.alignDevisor;
  var vertAlign = obj.defaultParams.vertAlign;
  var horizAlign = obj.defaultParams.horizAlign;
  if(horizAlign === LOGO_LEFT_POS) {
    obj.x += deltaForHLeft() / alignDevisor
  }else {
    if(horizAlign === LOGO_RIGHT_POS) {
      obj.x -= deltaForHLeft() / alignDevisor
    }
  }
  if(vertAlign === LOGO_TOP_POS) {
    obj.y += deltaForVTop() / alignDevisor
  }else {
    if(vertAlign === LOGO_BOTTOM_POS) {
      obj.y -= deltaForVTop() / alignDevisor
    }
  }
}
var allAutoAligned = [];
function addAutoAlignToObj(obj) {
  allAutoAligned.push(obj)
}
function updateAutoAlign() {
  var obj;
  for(var i = allAutoAligned.length - 1;i >= 0;i--) {
    obj = allAutoAligned[i];
    updateObjectPos(obj)
  }
}
function rememberDefaultParames(obj, objHorizAlign, objVertAlign, alignDevisor) {
  obj.defaultParams = {x:obj.x, y:obj.y, parent:obj.parent, scaleX:obj.scaleX, scaleY:obj.scaleY, rotation:obj.rotation, horizAlign:objHorizAlign, vertAlign:objVertAlign, alignDevisor:alignDevisor}
}
function moregamesClick(event) {
  onOutScale(event.target);
  if(moreGamesConfig && moreGamesConfig.action) {
    moreGamesConfig.action()
  }
}
var onVisibilityChangeSoundMuted = false;
var visibilityState;
var isWasTouch = false;
function initVisibilityChanger() {
  var hidden = "hidden";
  if(hidden in document) {
    document.addEventListener("visibilitychange", onchange)
  }else {
    if((hidden = "mozHidden") in document) {
      document.addEventListener("mozvisibilitychange", onchange)
    }else {
      if((hidden = "webkitHidden") in document) {
        document.addEventListener("webkitvisibilitychange", onchange)
      }else {
        if((hidden = "msHidden") in document) {
          document.addEventListener("msvisibilitychange", onchange)
        }else {
          if("onfocusin" in document) {
            document.onfocusin = document.onfocusout = onchange
          }else {
            window.onpageshow = window.onpagehide = window.onfocus = window.onblur = onchange
          }
        }
      }
    }
  }
  function onchange(evt) {
    var v = "visible", h = "hidden", evtMap = {focus:v, focusin:v, pageshow:v, blur:h, focusout:h, pagehide:h};
    evt = evt || window.event;
    if(evt.type in evtMap) {
      visibilityState = evtMap[evt.type]
    }else {
      visibilityState = this[hidden] ? "hidden" : "visible"
    }
    if(visibilityState == h) {
      if(isWasTouch) {
        onVisibilityChangeSoundMuted = isMute;
        isMute = true;
        createjs.Sound.setMute(true);
        stopBgMusic();
        stopWindSound()
      }
    }else {
      if(isWasTouch) {
        isMute = onVisibilityChangeSoundMuted;
        createjs.Sound.setMute(false);
        if(!isMute) {
          playBgMusic()
        }
      }
    }
  }
}
function centerSpriteToX(sprite, posX) {
  var frame = sprite.spriteSheet._frames[sprite._animation.frames[0]];
  sprite.x = posX - frame.rect.width / 2 + frame.regX
}
(function(context, factory) {
  [].indexOf || (Array.prototype.indexOf = function(a, b, c) {
    for(c = this.length, b = (c + ~~b) % c;b < c && (!(b in this) || this[b] !== a);b++) {
    }
    return b ^ c ? b : -1
  });
  if(typeof define === "function" && define.amd) {
    define(constructAMD)
  }else {
    constructGlobal()
  }
  function constructAMD() {
    return init();
    function init() {
      var library;
      library = factory("amd");
      library.fork = init;
      return library
    }
  }
  function constructGlobal() {
    var library;
    library = init();
    library.noConflict("KeyboardJS", "k");
    function init() {
      var library, namespaces = [], previousValues = {};
      library = factory("global");
      library.fork = init;
      library.noConflict = noConflict;
      return library;
      function noConflict() {
        var args, nI, newNamespaces;
        newNamespaces = Array.prototype.slice.apply(arguments);
        for(nI = 0;nI < namespaces.length;nI += 1) {
          if(typeof previousValues[namespaces[nI]] === "undefined") {
            delete context[namespaces[nI]]
          }else {
            context[namespaces[nI]] = previousValues[namespaces[nI]]
          }
        }
        previousValues = {};
        for(nI = 0;nI < newNamespaces.length;nI += 1) {
          if(typeof newNamespaces[nI] !== "string") {
            throw new Error("Cannot replace namespaces. All new namespaces must be strings.");
          }
          previousValues[newNamespaces[nI]] = context[newNamespaces[nI]];
          context[newNamespaces[nI]] = library
        }
        namespaces = newNamespaces;
        return namespaces
      }
    }
  }
})(this, function(env) {
  var KeyboardJS = {}, locales = {}, locale, map, macros, activeKeys = [], bindings = [], activeBindings = [], activeMacros = [], aI, usLocale;
  usLocale = {"map":{3:["cancel"], 8:["backspace"], 9:["tab"], 12:["clear"], 13:["enter"], 16:["shift"], 17:["ctrl"], 18:["alt", "menu"], 19:["pause", "break"], 20:["capslock"], 27:["escape", "esc"], 32:["space", "spacebar"], 33:["pageup"], 34:["pagedown"], 35:["end"], 36:["home"], 37:["left"], 38:["up"], 39:["right"], 40:["down"], 41:["select"], 42:["printscreen"], 43:["execute"], 44:["snapshot"], 45:["insert", "ins"], 46:["delete", "del"], 47:["help"], 91:["command", "windows", "win", "super", 
  "leftcommand", "leftwindows", "leftwin", "leftsuper"], 92:["command", "windows", "win", "super", "rightcommand", "rightwindows", "rightwin", "rightsuper"], 145:["scrolllock", "scroll"], 186:["semicolon", ";"], 187:["equal", "equalsign", "="], 188:["comma", ","], 189:["dash", "-"], 190:["period", "."], 191:["slash", "forwardslash", "/"], 192:["graveaccent", "`"], 219:["openbracket", "["], 220:["backslash", "\\"], 221:["closebracket", "]"], 222:["apostrophe", "'"], 48:["zero", "0"], 49:["one", "1"], 
  50:["two", "2"], 51:["three", "3"], 52:["four", "4"], 53:["five", "5"], 54:["six", "6"], 55:["seven", "7"], 56:["eight", "8"], 57:["nine", "9"], 96:["numzero", "num0"], 97:["numone", "num1"], 98:["numtwo", "num2"], 99:["numthree", "num3"], 100:["numfour", "num4"], 101:["numfive", "num5"], 102:["numsix", "num6"], 103:["numseven", "num7"], 104:["numeight", "num8"], 105:["numnine", "num9"], 106:["nummultiply", "num*"], 107:["numadd", "num+"], 108:["numenter"], 109:["numsubtract", "num-"], 110:["numdecimal", 
  "num."], 111:["numdevide", "num/"], 144:["numlock", "num"], 112:["f1"], 113:["f2"], 114:["f3"], 115:["f4"], 116:["f5"], 117:["f6"], 118:["f7"], 119:["f8"], 120:["f9"], 121:["f10"], 122:["f11"], 123:["f12"]}, "macros":[["shift + `", ["tilde", "~"]], ["shift + 1", ["exclamation", "exclamationpoint", "!"]], ["shift + 2", ["at", "@"]], ["shift + 3", ["number", "#"]], ["shift + 4", ["dollar", "dollars", "dollarsign", "$"]], ["shift + 5", ["percent", "%"]], ["shift + 6", ["caret", "^"]], ["shift + 7", 
  ["ampersand", "and", "&"]], ["shift + 8", ["asterisk", "*"]], ["shift + 9", ["openparen", "("]], ["shift + 0", ["closeparen", ")"]], ["shift + -", ["underscore", "_"]], ["shift + =", ["plus", "+"]], ["shift + (", ["opencurlybrace", "opencurlybracket", "{"]], ["shift + )", ["closecurlybrace", "closecurlybracket", "}"]], ["shift + \\", ["verticalbar", "|"]], ["shift + ;", ["colon", ":"]], ["shift + '", ["quotationmark", '"']], ["shift + !,", ["openanglebracket", "<"]], ["shift + .", ["closeanglebracket", 
  ">"]], ["shift + /", ["questionmark", "?"]]]};
  for(aI = 65;aI <= 90;aI += 1) {
    usLocale.map[aI] = String.fromCharCode(aI + 32);
    usLocale.macros.push(["shift + " + String.fromCharCode(aI + 32) + ", capslock + " + String.fromCharCode(aI + 32), [String.fromCharCode(aI)]])
  }
  registerLocale("us", usLocale);
  getSetLocale("us");
  enable();
  KeyboardJS.enable = enable;
  KeyboardJS.disable = disable;
  KeyboardJS.activeKeys = getActiveKeys;
  KeyboardJS.isPressed = isPressed;
  KeyboardJS.on = createBinding;
  KeyboardJS.clear = removeBindingByKeyCombo;
  KeyboardJS.clear.key = removeBindingByKeyName;
  KeyboardJS.locale = getSetLocale;
  KeyboardJS.locale.register = registerLocale;
  KeyboardJS.macro = createMacro;
  KeyboardJS.macro.remove = removeMacro;
  KeyboardJS.key = {};
  KeyboardJS.key.name = getKeyName;
  KeyboardJS.key.code = getKeyCode;
  KeyboardJS.combo = {};
  KeyboardJS.combo.active = isSatisfiedCombo;
  KeyboardJS.combo.parse = parseKeyCombo;
  KeyboardJS.combo.stringify = stringifyKeyCombo;
  return KeyboardJS;
  function enable() {
    if(window.addEventListener) {
      document.addEventListener("keydown", keydown, false);
      document.addEventListener("keyup", keyup, false);
      window.addEventListener("blur", reset, false);
      window.addEventListener("webkitfullscreenchange", reset, false);
      window.addEventListener("mozfullscreenchange", reset, false)
    }else {
      if(window.attachEvent) {
        document.attachEvent("onkeydown", keydown);
        document.attachEvent("onkeyup", keyup);
        window.attachEvent("onblur", reset)
      }
    }
  }
  function disable() {
    reset();
    if(window.removeEventListener) {
      document.removeEventListener("keydown", keydown, false);
      document.removeEventListener("keyup", keyup, false);
      window.removeEventListener("blur", reset, false);
      window.removeEventListener("webkitfullscreenchange", reset, false);
      window.removeEventListener("mozfullscreenchange", reset, false)
    }else {
      if(window.detachEvent) {
        document.detachEvent("onkeydown", keydown);
        document.detachEvent("onkeyup", keyup);
        window.detachEvent("onblur", reset)
      }
    }
  }
  function reset(event) {
    activeKeys = [];
    pruneMacros();
    pruneBindings(event)
  }
  function keydown(event) {
    var keyNames, kI;
    keyNames = getKeyName(event.keyCode);
    if(keyNames.length < 1) {
      return
    }
    for(kI = 0;kI < keyNames.length;kI += 1) {
      addActiveKey(keyNames[kI])
    }
    executeMacros();
    executeBindings(event)
  }
  function keyup(event) {
    var keyNames, kI;
    keyNames = getKeyName(event.keyCode);
    if(keyNames.length < 1) {
      return
    }
    for(kI = 0;kI < keyNames.length;kI += 1) {
      removeActiveKey(keyNames[kI])
    }
    pruneMacros();
    pruneBindings(event)
  }
  function getKeyName(keyCode) {
    return map[keyCode] || []
  }
  function getKeyCode(keyName) {
    var keyCode;
    for(keyCode in map) {
      if(!map.hasOwnProperty(keyCode)) {
        continue
      }
      if(map[keyCode].indexOf(keyName) > -1) {
        return keyCode
      }
    }
    return false
  }
  function createMacro(combo, injectedKeys) {
    if(typeof combo !== "string" && (typeof combo !== "object" || typeof combo.push !== "function")) {
      throw new Error("Cannot create macro. The combo must be a string or array.");
    }
    if(typeof injectedKeys !== "object" || typeof injectedKeys.push !== "function") {
      throw new Error("Cannot create macro. The injectedKeys must be an array.");
    }
    macros.push([combo, injectedKeys])
  }
  function removeMacro(combo) {
    var macro;
    if(typeof combo !== "string" && (typeof combo !== "object" || typeof combo.push !== "function")) {
      throw new Error("Cannot remove macro. The combo must be a string or array.");
    }
    for(mI = 0;mI < macros.length;mI += 1) {
      macro = macros[mI];
      if(compareCombos(combo, macro[0])) {
        removeActiveKey(macro[1]);
        macros.splice(mI, 1);
        break
      }
    }
  }
  function executeMacros() {
    var mI, combo, kI;
    for(mI = 0;mI < macros.length;mI += 1) {
      combo = parseKeyCombo(macros[mI][0]);
      if(activeMacros.indexOf(macros[mI]) === -1 && isSatisfiedCombo(combo)) {
        activeMacros.push(macros[mI]);
        for(kI = 0;kI < macros[mI][1].length;kI += 1) {
          addActiveKey(macros[mI][1][kI])
        }
      }
    }
  }
  function pruneMacros() {
    var mI, combo, kI;
    for(mI = 0;mI < activeMacros.length;mI += 1) {
      combo = parseKeyCombo(activeMacros[mI][0]);
      if(isSatisfiedCombo(combo) === false) {
        for(kI = 0;kI < activeMacros[mI][1].length;kI += 1) {
          removeActiveKey(activeMacros[mI][1][kI])
        }
        activeMacros.splice(mI, 1);
        mI -= 1
      }
    }
  }
  function createBinding(keyCombo, keyDownCallback, keyUpCallback) {
    var api = {}, binding, subBindings = [], bindingApi = {}, kI, subCombo;
    if(typeof keyCombo === "string") {
      keyCombo = parseKeyCombo(keyCombo)
    }
    for(kI = 0;kI < keyCombo.length;kI += 1) {
      binding = {};
      subCombo = stringifyKeyCombo([keyCombo[kI]]);
      if(typeof subCombo !== "string") {
        throw new Error("Failed to bind key combo. The key combo must be string.");
      }
      binding.keyCombo = subCombo;
      binding.keyDownCallback = [];
      binding.keyUpCallback = [];
      if(keyDownCallback) {
        binding.keyDownCallback.push(keyDownCallback)
      }
      if(keyUpCallback) {
        binding.keyUpCallback.push(keyUpCallback)
      }
      bindings.push(binding);
      subBindings.push(binding)
    }
    api.clear = clear;
    api.on = on;
    return api;
    function clear() {
      var bI;
      for(bI = 0;bI < subBindings.length;bI += 1) {
        bindings.splice(bindings.indexOf(subBindings[bI]), 1)
      }
    }
    function on(eventName) {
      var api = {}, callbacks, cI, bI;
      if(typeof eventName !== "string") {
        throw new Error("Cannot bind callback. The event name must be a string.");
      }
      if(eventName !== "keyup" && eventName !== "keydown") {
        throw new Error('Cannot bind callback. The event name must be a "keyup" or "keydown".');
      }
      callbacks = Array.prototype.slice.apply(arguments, [1]);
      for(cI = 0;cI < callbacks.length;cI += 1) {
        if(typeof callbacks[cI] === "function") {
          if(eventName === "keyup") {
            for(bI = 0;bI < subBindings.length;bI += 1) {
              subBindings[bI].keyUpCallback.push(callbacks[cI])
            }
          }else {
            if(eventName === "keydown") {
              for(bI = 0;bI < subBindings.length;bI += 1) {
                subBindings[bI].keyDownCallback.push(callbacks[cI])
              }
            }
          }
        }
      }
      api.clear = clear;
      return api;
      function clear() {
        var cI, bI;
        for(cI = 0;cI < callbacks.length;cI += 1) {
          if(typeof callbacks[cI] === "function") {
            if(eventName === "keyup") {
              for(bI = 0;bI < subBindings.length;bI += 1) {
                subBindings[bI].keyUpCallback.splice(subBindings[bI].keyUpCallback.indexOf(callbacks[cI]), 1)
              }
            }else {
              for(bI = 0;bI < subBindings.length;bI += 1) {
                subBindings[bI].keyDownCallback.splice(subBindings[bI].keyDownCallback.indexOf(callbacks[cI]), 1)
              }
            }
          }
        }
      }
    }
  }
  function removeBindingByKeyCombo(keyCombo) {
    var bI, binding, keyName;
    for(bI = 0;bI < bindings.length;bI += 1) {
      binding = bindings[bI];
      if(compareCombos(keyCombo, binding.keyCombo)) {
        bindings.splice(bI, 1);
        bI -= 1
      }
    }
  }
  function removeBindingByKeyName(keyName) {
    var bI, kI, binding;
    if(keyName) {
      for(bI = 0;bI < bindings.length;bI += 1) {
        binding = bindings[bI];
        for(kI = 0;kI < binding.keyCombo.length;kI += 1) {
          if(binding.keyCombo[kI].indexOf(keyName) > -1) {
            bindings.splice(bI, 1);
            bI -= 1;
            break
          }
        }
      }
    }else {
      bindings = []
    }
  }
  function executeBindings(event) {
    var bI, sBI, binding, bindingKeys, remainingKeys, cI, killEventBubble, kI, bindingKeysSatisfied, index, sortedBindings = [], bindingWeight;
    remainingKeys = [].concat(activeKeys);
    for(bI = 0;bI < bindings.length;bI += 1) {
      bindingWeight = extractComboKeys(bindings[bI].keyCombo).length;
      if(!sortedBindings[bindingWeight]) {
        sortedBindings[bindingWeight] = []
      }
      sortedBindings[bindingWeight].push(bindings[bI])
    }
    for(sBI = sortedBindings.length - 1;sBI >= 0;sBI -= 1) {
      if(!sortedBindings[sBI]) {
        continue
      }
      for(bI = 0;bI < sortedBindings[sBI].length;bI += 1) {
        binding = sortedBindings[sBI][bI];
        bindingKeys = extractComboKeys(binding.keyCombo);
        bindingKeysSatisfied = true;
        for(kI = 0;kI < bindingKeys.length;kI += 1) {
          if(remainingKeys.indexOf(bindingKeys[kI]) === -1) {
            bindingKeysSatisfied = false;
            break
          }
        }
        if(bindingKeysSatisfied && isSatisfiedCombo(binding.keyCombo)) {
          activeBindings.push(binding);
          for(kI = 0;kI < bindingKeys.length;kI += 1) {
            index = remainingKeys.indexOf(bindingKeys[kI]);
            if(index > -1) {
              remainingKeys.splice(index, 1);
              kI -= 1
            }
          }
          for(cI = 0;cI < binding.keyDownCallback.length;cI += 1) {
            if(binding.keyDownCallback[cI](event, getActiveKeys(), binding.keyCombo) === false) {
              killEventBubble = true
            }
          }
          if(killEventBubble === true) {
            event.preventDefault();
            event.stopPropagation()
          }
        }
      }
    }
  }
  function pruneBindings(event) {
    var bI, cI, binding, killEventBubble;
    for(bI = 0;bI < activeBindings.length;bI += 1) {
      binding = activeBindings[bI];
      if(isSatisfiedCombo(binding.keyCombo) === false) {
        for(cI = 0;cI < binding.keyUpCallback.length;cI += 1) {
          if(binding.keyUpCallback[cI](event, getActiveKeys(), binding.keyCombo) === false) {
            killEventBubble = true
          }
        }
        if(killEventBubble === true) {
          event.preventDefault();
          event.stopPropagation()
        }
        activeBindings.splice(bI, 1);
        bI -= 1
      }
    }
  }
  function compareCombos(keyComboArrayA, keyComboArrayB) {
    var cI, sI, kI;
    keyComboArrayA = parseKeyCombo(keyComboArrayA);
    keyComboArrayB = parseKeyCombo(keyComboArrayB);
    if(keyComboArrayA.length !== keyComboArrayB.length) {
      return false
    }
    for(cI = 0;cI < keyComboArrayA.length;cI += 1) {
      if(keyComboArrayA[cI].length !== keyComboArrayB[cI].length) {
        return false
      }
      for(sI = 0;sI < keyComboArrayA[cI].length;sI += 1) {
        if(keyComboArrayA[cI][sI].length !== keyComboArrayB[cI][sI].length) {
          return false
        }
        for(kI = 0;kI < keyComboArrayA[cI][sI].length;kI += 1) {
          if(keyComboArrayB[cI][sI].indexOf(keyComboArrayA[cI][sI][kI]) === -1) {
            return false
          }
        }
      }
    }
    return true
  }
  function isSatisfiedCombo(keyCombo) {
    var cI, sI, stage, kI, stageOffset = 0, index, comboMatches;
    keyCombo = parseKeyCombo(keyCombo);
    for(cI = 0;cI < keyCombo.length;cI += 1) {
      comboMatches = true;
      stageOffset = 0;
      for(sI = 0;sI < keyCombo[cI].length;sI += 1) {
        stage = [].concat(keyCombo[cI][sI]);
        for(kI = stageOffset;kI < activeKeys.length;kI += 1) {
          index = stage.indexOf(activeKeys[kI]);
          if(index > -1) {
            stage.splice(index, 1);
            stageOffset = kI
          }
        }
        if(stage.length !== 0) {
          comboMatches = false;
          break
        }
      }
      if(comboMatches) {
        return true
      }
    }
    return false
  }
  function extractComboKeys(keyCombo) {
    var cI, sI, kI, keys = [];
    keyCombo = parseKeyCombo(keyCombo);
    for(cI = 0;cI < keyCombo.length;cI += 1) {
      for(sI = 0;sI < keyCombo[cI].length;sI += 1) {
        keys = keys.concat(keyCombo[cI][sI])
      }
    }
    return keys
  }
  function parseKeyCombo(keyCombo) {
    var s = keyCombo, i = 0, op = 0, ws = false, nc = false, combos = [], combo = [], stage = [], key = "";
    if(typeof keyCombo === "object" && typeof keyCombo.push === "function") {
      return keyCombo
    }
    if(typeof keyCombo !== "string") {
      throw new Error('Cannot parse "keyCombo" because its type is "' + typeof keyCombo + '". It must be a "string".');
    }
    while(s.charAt(i) === " ") {
      i += 1
    }
    while(true) {
      if(s.charAt(i) === " ") {
        while(s.charAt(i) === " ") {
          i += 1
        }
        ws = true
      }else {
        if(s.charAt(i) === ",") {
          if(op || nc) {
            throw new Error("Failed to parse key combo. Unexpected , at character index " + i + ".");
          }
          nc = true;
          i += 1
        }else {
          if(s.charAt(i) === "+") {
            if(key.length) {
              stage.push(key);
              key = ""
            }
            if(op || nc) {
              throw new Error("Failed to parse key combo. Unexpected + at character index " + i + ".");
            }
            op = true;
            i += 1
          }else {
            if(s.charAt(i) === ">") {
              if(key.length) {
                stage.push(key);
                key = ""
              }
              if(stage.length) {
                combo.push(stage);
                stage = []
              }
              if(op || nc) {
                throw new Error("Failed to parse key combo. Unexpected > at character index " + i + ".");
              }
              op = true;
              i += 1
            }else {
              if(i < s.length - 1 && (s.charAt(i) === "!" && (s.charAt(i + 1) === ">" || (s.charAt(i + 1) === "," || s.charAt(i + 1) === "+")))) {
                key += s.charAt(i + 1);
                op = false;
                ws = false;
                nc = false;
                i += 2
              }else {
                if(i < s.length && (s.charAt(i) !== "+" && (s.charAt(i) !== ">" && (s.charAt(i) !== "," && s.charAt(i) !== " ")))) {
                  if(op === false && ws === true || nc === true) {
                    if(key.length) {
                      stage.push(key);
                      key = ""
                    }
                    if(stage.length) {
                      combo.push(stage);
                      stage = []
                    }
                    if(combo.length) {
                      combos.push(combo);
                      combo = []
                    }
                  }
                  op = false;
                  ws = false;
                  nc = false;
                  while(i < s.length && (s.charAt(i) !== "+" && (s.charAt(i) !== ">" && (s.charAt(i) !== "," && s.charAt(i) !== " ")))) {
                    key += s.charAt(i);
                    i += 1
                  }
                }else {
                  i += 1;
                  continue
                }
              }
            }
          }
        }
      }
      if(i >= s.length) {
        if(key.length) {
          stage.push(key);
          key = ""
        }
        if(stage.length) {
          combo.push(stage);
          stage = []
        }
        if(combo.length) {
          combos.push(combo);
          combo = []
        }
        break
      }
    }
    return combos
  }
  function stringifyKeyCombo(keyComboArray) {
    var cI, ccI, output = [];
    if(typeof keyComboArray === "string") {
      return keyComboArray
    }
    if(typeof keyComboArray !== "object" || typeof keyComboArray.push !== "function") {
      throw new Error("Cannot stringify key combo.");
    }
    for(cI = 0;cI < keyComboArray.length;cI += 1) {
      output[cI] = [];
      for(ccI = 0;ccI < keyComboArray[cI].length;ccI += 1) {
        output[cI][ccI] = keyComboArray[cI][ccI].join(" + ")
      }
      output[cI] = output[cI].join(" > ")
    }
    return output.join(" ")
  }
  function getActiveKeys(keyName) {
    return[].concat(activeKeys)
  }
  function isPressed(keyName) {
    return activeKeys.indexOf(keyName) > -1
  }
  function addActiveKey(keyName) {
    if(keyName.match(/\s/)) {
      throw new Error("Cannot add key name " + keyName + " to active keys because it contains whitespace.");
    }
    if(activeKeys.indexOf(keyName) > -1) {
      return
    }
    activeKeys.push(keyName)
  }
  function removeActiveKey(keyName) {
    var keyCode = getKeyCode(keyName);
    if(keyCode === "91" || keyCode === "92") {
      activeKeys = []
    }else {
      activeKeys.splice(activeKeys.indexOf(keyName), 1)
    }
  }
  function registerLocale(localeName, localeMap) {
    if(typeof localeName !== "string") {
      throw new Error("Cannot register new locale. The locale name must be a string.");
    }
    if(typeof localeMap !== "object") {
      throw new Error("Cannot register " + localeName + " locale. The locale map must be an object.");
    }
    if(typeof localeMap.map !== "object") {
      throw new Error("Cannot register " + localeName + " locale. The locale map is invalid.");
    }
    if(!localeMap.macros) {
      localeMap.macros = []
    }
    locales[localeName] = localeMap
  }
  function getSetLocale(localeName) {
    if(localeName) {
      if(typeof localeName !== "string") {
        throw new Error("Cannot set locale. The locale name must be a string.");
      }
      if(!locales[localeName]) {
        throw new Error("Cannot set locale to " + localeName + " because it does not exist. If you would like to submit a " + localeName + " locale map for KeyboardJS please submit it at https://github.com/RobertWHurst/KeyboardJS/issues.");
      }
      map = locales[localeName].map;
      macros = locales[localeName].macros;
      locale = localeName
    }
    return locale
  }
});
var allLevels = [[["DECOR_HELP_1_TYPE", 261.9, 312.3, 0.9, 0.9, 0, [""]], ["TABLE_1_TYPE", 99.9, 447, 0.8, 0.8, 0, ["SKIN_14"]], ["TABLE_2_TYPE", 89.6, 65.1, 0.8, 0.8, 0, ["SKIN_8"]], ["TABLE_1_TYPE", 241, 455.15, 0.8, 0.8, 180, ["SKIN_15"]], ["BUYER_TYPE", 110.75, 197, 0.7, 0.7, 0, [""]], ["ZOMBIE_TYPE", 178.35, 390.3, 0.7, 0.7, 0, ["SKIN_2"]], ["BONUS_STAR_TYPE", 156.85, 329.4, 0.79, 0.79, 0, [""]], ["BONUS_STAR_TYPE", 137.6, 267.55, 0.79, 0.79, 0, [""]], ["BONUS_STAR_TYPE", 83.65, 118.9, 0.7, 
0.7, 0, ["2"]], ["DECOR_SCREAMER_TYPE", 178, 365.4, 1, 1, 0, [""]]], [["TABLE_1_TYPE", 247.7, 187.8, 0.8, 0.8, 0, ["SKIN_11"]], ["TABLE_1_TYPE", 72.75, 354.15, 0.8, 0.8, 0, ["SKIN_8"]], ["BUSH_DANGER_TYPE", 42.8, 83.65, 0.8, 0.8, 0, [""]], ["ZOMBIE_TYPE", 273.3, 396.8, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 220.6, 116.65, 0.7, 0.7, 0, ["SKIN_6"]], ["BUYER_TYPE", 89.1, 273.15, 0.7, 0.7, 0, ["SKIN_5"]], ["BONUS_STAR_TYPE", 204.1, 313.75, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 279.35, 87.25, 0.7, 
0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 21.6, 196.9, 0.7, 0.7, 0, ["2"]]], [["TABLE_1_TYPE", 250.2, 450, 0.8, 0.8, 0, ["SKIN_1"]], ["TABLE_1_TYPE", 31.25, 408.25, 0.8, 0.8, 90, ["SKIN_2"]], ["TABLE_2_TYPE", 58.75, 103.1, 0.8, 0.8, -45, ["SKIN_2"]], ["ZOMBIE_TYPE", 122.25, 419.15, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 231.85, 181.75, 0.7, 0.7, 0, [""]], ["BUYER_TYPE", 100, 251.25, 0.7, 0.7, 0, [""]], ["BONUS_STAR_TYPE", 290.6, 165.8, 0.79, 0.79, 0, [""]], ["BONUS_STAR_TYPE", 136.5, 192.45, 0.7, 0.7, 
0, ["2"]]], [["TABLE_2_TYPE", 37.8, 365.65, 0.8, 0.8, 90, ["SKIN_1"]], ["TABLE_2_TYPE", 50.6, 208.85, 0.8, 0.8, 0, ["SKIN_2"]], ["TABLE_2_TYPE", 142.55, 274.9, 0.8, 0.8, 0, ["SKIN_5"]], ["TABLE_4_TYPE", 50.2, 442.5, 0.8, 0.8, 0, ["SKIN_1"]], ["TABLE_3_TYPE", 285.35, 431.4, 0.8, 0.8, -90, ["SKIN_1"]], ["TABLE_1_TYPE", 253.75, 206.5, 0.8, 0.8, 0, ["SKIN_12"]], ["TELEPORT_TYPE", 260.15, 328.55, 1, 1, 0, ["A"]], ["TELEPORT_TYPE", 143.25, 198.05, 1, 1, 0, ["A"]], ["BUYER_TYPE", 231.65, 87, 0.7, 0.7, 0, 
[""]], ["ZOMBIE_TYPE", 183.9, 430.45, 0.7, 0.7, 0, ["SKIN_1"]], ["BONUS_STAR_TYPE", 181.9, 134.6, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 177.1, 349.35, 0.7, 0.7, 0, ["2"]], ["DECOR_HELP_3_TYPE", 80.4, 96.05, 1, 1, 0, [""]]], [["BOMB_TYPE", 160.35, 171.35, 0.8, 0.8, -38, ["140_500"]], ["TABLE_1_TYPE", 164.25, 269.65, 0.8, 0.8, 0, ["SKIN_13"]], ["TABLE_1_TYPE", 236.7, 363.1, 0.8, 0.8, 90, ["SKIN_14"]], ["TABLE_2_TYPE", 164.25, 60.05, 0.8, 0.8, 0, ["SKIN_8"]], ["TABLE_5_TYPE", 258.8, 57.65, 0.8, 0.8, 
0, ["SKIN_5"]], ["TABLE_5_TYPE", 69.75, 60.05, 0.8, 0.8, 0, ["SKIN_5"]], ["TABLE_1_TYPE", 102.05, 365.5, 0.8, 0.8, 90, ["SKIN_14"]], ["ZOMBIE_TYPE", 291.3, 385.85, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 216.65, 213.8, 0.7, 0.7, 0, [""]], ["BUYER_TYPE", 110.8, 133, 0.7, 0.7, 37, ["SKIN_7"]], ["BUYER_TYPE", 220.45, 129.85, 0.7, 0.7, 0, ["SKIN_3"]], ["BUYER_TYPE", 112.7, 215.2, 0.7, 0.7, 0, ["SKIN_5"]], ["ZOMBIE_TYPE", 34.5, 387.15, 0.7, 0.7, 0, ["SKIN_7"]], ["BONUS_STAR_TYPE", 34.05, 298.45, 0.7, 
0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 289.35, 294.7, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 34.05, 168.55, 0.7, 0.7, 0, ["2"]], ["DECOR_HELP_2_TYPE", 207.3, 62.8, 1, 1, 0, [""]]], [["ELECTRO_DANGER_TYPE", 239.2, 387.85, 0.8, 0.8, 0, ["1000_1000_0"]], ["ELECTRO_DANGER_TYPE", 159.95, 227.7, 0.8, 0.8, 0, ["1000_1000_0"]], ["TABLE_1_TYPE", 232.95, 93.4, 0.8, 0.8, 0, ["SKIN_5"]], ["TABLE_1_TYPE", 78.5, 397.6, 0.8, 0.8, 0, ["SKIN_7"]], ["BUSH_DANGER_TYPE", 41.2, 230.95, 0.8, 0.8, 0, [""]], ["STAIRS_DANGER_TYPE", 
282.85, 226.7, 0.75, 0.75, 0, [""]], ["ZOMBIE_TYPE", 254.25, 443.75, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 66.4, 107.3, 0.7, 0.7, 0, [""]], ["BUYER_TYPE", 235.65, 314.6, 0.7, 0.7, 0, ["SKIN_4_IDLE"]], ["BONUS_STAR_TYPE", 46.7, 310.1, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 129, 149.8, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 146.75, 308.9, 0.7, 0.7, 0, ["2"]]], [["BUTTON_TYPE", 131, 81.45, 1, 1, 0, ["RED"]], ["TABLE_1_TYPE", 197.2, 146.75, 0.8, 0.8, 0, ["SKIN_10"]], ["TABLE_1_TYPE", 71.4, 445.3, 
0.8, 0.8, 0, ["SKIN_8"]], ["TABLE_2_TYPE", 293.55, 372.15, 0.8, 0.8, 90, ["SKIN_3"]], ["STAIRS_DANGER_TYPE", 290.15, 221.1, 0.75, 0.75, 0, [""]], ["BUSH_DANGER_TYPE", 46, 83.25, 0.8, 0.8, 0, [""]], ["TABLE_5_TYPE", 103, 146.05, 0.8, 0.8, 0, ["SKIN_2"]], ["TABLE_1_TYPE", 98.45, 242.3, 0.8, 0.8, -90, ["SKIN_11"]], ["DOOR_REMOTE_TYPE", 201, 283.75, 1, 1, 0, ["RED"]], ["BUYER_TYPE", 219.1, 212.15, 0.7, 0.7, 0, [""]], ["ZOMBIE_TYPE", 260.1, 82.95, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 208.9, 419.2, 
0.7, 0.7, 0, [""]], ["ZOMBIE_TYPE", 62.1, 365.9, 0.7, 0.7, 0, ["SKIN_1"]], ["BONUS_STAR_TYPE", 153.4, 235.65, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 193.25, 80.9, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 200.15, 346.25, 0.7, 0.7, 0, ["2"]]], [["TABLE_1_TYPE", 250.45, 183.35, 0.8, 0.8, 0, ["SKIN_10"]], ["TABLE_1_TYPE", 31.25, 109.35, 0.8, 0.8, 90, ["SKIN_8"]], ["BUSH_DANGER_TYPE", 40.6, 216.1, 0.8, 0.8, 0, [""]], ["TABLE_1_TYPE", 241.2, 448.15, 0.8, 0.8, 0, ["SKIN_9"]], ["TABLE_1_TYPE", 67.35, 304.65, 
0.8, 0.8, 0, ["SKIN_9"]], ["ELECTRO_DANGER_TYPE", 202.7, 274.1, 0.8, 0.8, -45, ["1000_1000_0"]], ["TABLE_5_TYPE", 147, 448.85, 0.8, 0.8, 0, ["SKIN_2"]], ["BUYER_TYPE", 135.8, 180.15, 0.7, 0.7, 0, ["SKIN_5"]], ["BUYER_TYPE", 258.4, 120.1, 0.7, 0.7, 0, ["SKIN_1"]], ["ZOMBIE_TYPE", 63.9, 396.35, 0.7, 0.7, 0, ["SKIN_2"]], ["BUYER_TYPE", 273.65, 372.05, 0.7, 0.7, 0, ["SKIN_3"]], ["BONUS_STAR_TYPE", 159.35, 381.85, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 119.25, 241.55, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 
288.7, 64.1, 0.7, 0.7, 0, ["2"]]], [["BUSH_DANGER_TYPE", 281.15, 85.05, 0.8, 0.8, 0, [""]], ["STAIRS_DANGER_TYPE", 272.15, 302.6, 0.75, 0.75, 0, [""]], ["BANANA_TYPE", 255, 226.45, 0.8, 0.8, 0, [""]], ["TABLE_1_TYPE", 29.3, 196.5, 0.8, 0.8, 90, ["SKIN_5"]], ["TABLE_1_TYPE", 32.8, 389.95, 0.8, 0.8, 90, ["SKIN_7"]], ["TABLE_1_TYPE", 71.4, 290.7, 0.8, 0.8, 0, ["SKIN_12"]], ["TELEPORT_TYPE", 181.95, 440.9, 1, 1, 0, ["A"]], ["TELEPORT_TYPE", 268.95, 164.95, 1, 1, -122, ["A"]], ["TABLE_4_TYPE", 189.35, 
288.25, 0.8, 0.8, 0, ["SKIN_1"]], ["TABLE_5_TYPE", 27, 79.05, 0.8, 0.8, 0, ["SKIN_4"]], ["TABLE_5_TYPE", 299.65, 384.4, 0.8, 0.8, 0, ["SKIN_3"]], ["BUYER_TYPE", 142.2, 95.3, 0.7, 0.7, 133, [""]], ["ZOMBIE_TYPE", 103.5, 363.8, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 138.6, 192.85, 0.7, 0.7, 0, ["SKIN_7"]], ["DECOR_HELP_5_TYPE", 188.15, 327.3, 1, 1, 0, [""]]], [["TABLE_2_TYPE", 270, 344.4, 0.8, 0.8, 0, ["SKIN_2"]], ["TABLE_3_TYPE", 242, 274.35, 0.8, 0.8, -90, ["SKIN_1"]], ["TABLE_3_TYPE", 107.1, 279.1, 
0.8, 0.8, -90, ["SKIN_3"]], ["TABLE_1_TYPE", 70.5, 344.7, 0.8, 0.8, 0, ["SKIN_1"]], ["TABLE_1_TYPE", 89.55, 67.7, 0.8, 0.8, 0, ["SKIN_2"]], ["TABLE_1_TYPE", 246.4, 65.95, 0.8, 0.8, 0, ["SKIN_5"]], ["STAIRS_DANGER_TYPE", 249.1, 410.15, 0.75, 0.75, 0, [""]], ["BUSH_DANGER_TYPE", 37.6, 140.25, 0.8, 0.8, 0, [""]], ["BANANA_TYPE", 169, 134.4, 0.8, 0.8, 0, ["SKIN_2"]], ["ZOMBIE_TYPE", 64.45, 411.8, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 51, 281.4, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 260.4, 132.4, 
0.7, 0.7, 180, ["SKIN_2"]]], [["INVISIBLE_TYPE", 78.5, 318.85, 0.8, 0.8, 0, ["2000_3000_0"]], ["INVISIBLE_TYPE", 160.45, 271.9, 0.8, 0.8, 90, ["1000_500_0"]], ["INVISIBLE_TYPE", 24.45, 428.4, 0.8, 0.8, 90, ["3000_4000_2000_SKIN_2"]], ["INVISIBLE_TYPE", 158.45, 145.9, 0.8, 0.8, 90, ["1000_500_0"]], ["INVISIBLE_TYPE", 74.5, 99.9, 0.8, 0.8, 0, ["2000_3000_0"]], ["TABLE_1_TYPE", 199.3, 448.65, 0.8, 0.8, 0, ["SKIN_9"]], ["TABLE_1_TYPE", 297.8, 350.9, 0.8, 0.8, 90, ["SKIN_8"]], ["TABLE_1_TYPE", 248.85, 
199.15, 0.8, 0.8, 0, ["SKIN_10"]], ["BUYER_TYPE", 265.55, 136, 0.7, 0.7, 0, ["SKIN_6"]], ["ZOMBIE_TYPE", 191.95, 388.05, 0.7, 0.7, 0, ["SKIN_1"]], ["BONUS_STAR_TYPE", 127, 388.9, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 80, 221.95, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 289, 65.95, 0.7, 0.7, 0, ["2"]]], [["TABLE_1_TYPE", 148.75, 186.65, 0.8, 0.8, 0, ["SKIN_1"]], ["TABLE_1_TYPE", 246.65, 370.45, 0.8, 0.8, 0, ["SKIN_5"]], ["INVISIBLE_TYPE", 18.75, 416.15, 0.8, 0.8, 90, ["2000_3000_0"]], ["INVISIBLE_TYPE", 
176.25, 278.65, 0.8, 0.8, 90, ["2000_3000_0"]], ["INVISIBLE_TYPE", 45, 60.65, 0.8, 0.8, 0, ["1000_1000_0_SKIN_2"]], ["INVISIBLE_TYPE", 303.8, 102.35, 0.8, 0.8, 90, ["2000_3000_0"]], ["BUYER_TYPE", 152.5, 120.6, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 263, 306.55, 0.7, 0.7, 0, ["SKIN_2"]], ["ZOMBIE_TYPE", 267.1, 435.5, 0.7, 0.7, 0, ["SKIN_1"]], ["BONUS_STAR_TYPE", 70.35, 448.5, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 64.95, 101.95, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 266.15, 143.3, 0.7, 0.7, 
0, ["2"]]], [["TABLE_1_TYPE", 68.4, 286.6, 0.8, 0.8, 0, ["SKIN_14"]], ["TABLE_2_TYPE", 268.25, 284.15, 0.8, 0.8, 0, ["SKIN_6"]], ["TABLE_5_TYPE", 138.95, 339.65, 0.8, 0.8, 0, ["SKIN_5"]], ["INVISIBLE_TYPE", 241.95, 432.65, 0.8, 0.8, 90, ["1000_1000_0_SKIN_2"]], ["BOMB_TYPE", 189.45, 362.75, 0.8, 0.8, 0, ["140_300"]], ["DECOR_SCREAMER_TYPE", 54, 426.4, 1, 1, 0, [""]], ["ZOMBIE_TYPE", 46.75, 446.5, 0.7, 0.7, 0, ["SKIN_1"]], ["ZOMBIE_TYPE", 127.45, 150.45, 0.7, 0.7, 0, ["SKIN_1_SLEEP"]], ["ZOMBIE_TYPE", 
129.7, 223.1, 0.7, 0.7, 0, ["SKIN_1_SLEEP"]], ["BUYER_TYPE", 46.8, 225.2, 0.7, 0.7, 0, ["SKIN_6"]], ["BUYER_TYPE", 43.55, 151.2, 0.7, 0.7, 0, ["SKIN_3"]], ["BONUS_STAR_TYPE", 286.15, 435.55, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 36.4, 76.4, 0.7, 0.7, 0, ["2"]]], [["TABLE_1_TYPE", 70.5, 283.65, 0.8, 0.8, 0, ["SKIN_9"]], ["TABLE_1_TYPE", 247.6, 284.2, 0.8, 0.8, 0, ["SKIN_10"]], ["TELEPORT_TYPE", 106.25, 352.7, 1, 1, 0, [""]], ["TELEPORT_TYPE", 208.75, 225.2, 1, 1, 0, [""]], ["TRAP_TYPE", 61.4, 227.4, 
0.8, 0.8, 0, [""]], ["TABLE_5_TYPE", 206.25, 154.5, 0.8, 0.8, 0, ["SKIN_2"]], ["INVISIBLE_TYPE", 62.5, 57.35, 0.8, 0.8, 0, ["2000_3000_0"]], ["TRAP_TYPE", 276.35, 205.7, 0.8, 0.8, 0, [""]], ["INVISIBLE_TYPE", 306.3, 430.75, 0.8, 0.8, 90, ["1000_1000_0_SKIN_2"]], ["ZOMBIE_TYPE", 44.95, 448.85, 0.7, 0.7, 0, ["SKIN_1"]], ["ZOMBIE_TYPE", 181.2, 354.65, 0.7, 0.7, 0, ["SKIN_1_SLEEP"]], ["BUYER_TYPE", 271.1, 89.85, 0.7, 0.7, 0, ["SKIN_6"]], ["BONUS_STAR_TYPE", 291.1, 358.5, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 
30.55, 96.9, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 119.65, 236.8, 0.7, 0.7, 0, ["2"]]], [["TABLE_1_TYPE", 72.5, 262.15, 0.8, 0.8, 0, ["SKIN_7"]], ["TABLE_1_TYPE", 248.8, 263.4, 0.8, 0.8, 0, ["SKIN_12"]], ["TABLE_4_TYPE", 166.9, 357.35, 0.8, 0.8, 90, ["SKIN_1"]], ["TABLE_5_TYPE", 163.75, 443.55, 0.8, 0.8, 0, ["SKIN_4"]], ["TABLE_2_TYPE", 163.8, 180.65, 0.8, 0.8, 0, ["SKIN_5"]], ["TELEPORT_TYPE", 61.25, 338.95, 1, 1, 0, ["A"]], ["TELEPORT_TYPE", 256.3, 333.95, 1, 1, 0, ["B"]], ["TELEPORT_TYPE", 
58.75, 193.9, 1, 1, 0, ["A"]], ["TELEPORT_TYPE", 265.05, 191.4, 1, 1, 0, ["B"]], ["BUYER_TYPE", 269.3, 101, 0.7, 0.7, 0, ["SKIN_6"]], ["BUYER_TYPE", 256.65, 437.55, 0.7, 0.7, 0, ["SKIN_4_IDLE"]], ["ZOMBIE_TYPE", 66.2, 436.35, 0.7, 0.7, 0, ["SKIN_1"]], ["BONUS_STAR_TYPE", 24.4, 56.65, 0.7, 0.7, 0, ["2"]]], [["TABLE_1_TYPE", 71.45, 188.35, 0.8, 0.8, 0, ["SKIN_8"]], ["TABLE_1_TYPE", 122.5, 290.5, 0.8, 0.8, 90, ["SKIN_10"]], ["TABLE_5_TYPE", 120, 389.55, 0.8, 0.8, 0, ["SKIN_2"]], ["TABLE_1_TYPE", 73.75, 
444.65, 0.8, 0.8, 0, ["SKIN_11"]], ["SPIKE_TYPE", 54.3, 396.75, 1, 1, 0, ["2000_1000_0"]], ["TELEPORT_TYPE", 50, 253.95, 1, 1, 0, [""]], ["BUYER_TYPE", 48, 326.05, 0.7, 0.7, 0, ["SKIN_6"]], ["INVISIBLE_TYPE", 216.3, 418.65, 0.8, 0.8, 90, ["2000_3000_0"]], ["TELEPORT_TYPE", 280.05, 435.2, 1, 1, 0, [""]], ["INVISIBLE_TYPE", 275.05, 370.7, 0.8, 0.8, 0, ["1000_1000_0_SKIN_2"]], ["ELECTRO_DANGER_TYPE", 153.95, 117.8, 0.8, 0.8, 90, ["1000_1000_0"]], ["INVISIBLE_TYPE", 303.85, 117.35, 0.8, 0.8, 90, ["2000_3000_0"]], 
["BUYER_TYPE", 181.6, 272.55, 0.7, 0.7, 90, ["SKIN_4_IDLE"]], ["BUYER_TYPE", 262.7, 319.65, 0.7, 0.7, 0, ["SKIN_2"]], ["BONUS_STAR_TYPE", 175.8, 385.75, 0.7, 0.7, 0, ["2"]], ["ZOMBIE_TYPE", 52.45, 108.8, 0.7, 0.7, 0, ["SKIN_1"]]], [["TABLE_1_TYPE", 205, 409.65, 0.8, 0.8, 90, ["SKIN_15"]], ["TABLE_2_TYPE", 202.95, 286.25, 0.8, 0.8, 90, ["SKIN_6"]], ["TABLE_2_TYPE", 171.25, 199.55, 0.8, 0.8, 0, ["SKIN_8"]], ["TELEPORT_TYPE", 56.25, 198.9, 1, 1, 0, [""]], ["TELEPORT_TYPE", 273.8, 435.2, 1, 1, 0, [""]], 
["INVISIBLE_TYPE", 270.05, 239.45, 0.8, 0.8, 0, ["1000_1000_0_SKIN_2"]], ["SPIKE_TYPE", 268.1, 296.75, 1, 1, 0, ["2000_1000_0"]], ["TABLE_2_TYPE", 197.5, 118.75, 0.8, 0.8, 90, ["SKIN_7"]], ["TABLE_2_TYPE", 60, 72.05, 0.8, 0.8, 0, ["SKIN_8"]], ["BUYER_TYPE", 264.15, 125.05, 0.7, 0.7, 0, ["SKIN_4_IDLE"]], ["ZOMBIE_TYPE", 132.5, 441.85, 0.7, 0.7, 0, ["SKIN_7"]], ["BONUS_STAR_TYPE", 35.15, 414.45, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 235.35, 45.9, 0.7, 0.7, 0, ["2"]]], [["TABLE_2_TYPE", 270.05, 84.65, 
0.8, 0.8, 0, ["SKIN_3"]], ["TABLE_1_TYPE", 152.25, 83.65, 0.8, 0.8, 0, ["SKIN_9"]], ["DOOR_REMOTE_TYPE", 269.05, 250.3, 1, 1, 0, ["RED_SKIN_1"]], ["BUTTON_TYPE", 41.75, 220, 1, 1, 0, ["RED"]], ["TABLE_1_TYPE", 113.15, 176.45, 0.8, 0.8, 90, ["SKIN_8"]], ["TABLE_1_TYPE", 151, 265.95, 0.8, 0.8, 0, ["SKIN_10"]], ["ZOMBIE_TYPE", 43.45, 311, 0.7, 0.7, 0, ["SKIN_1_SLEEP"]], ["ZOMBIE_TYPE", 266.25, 443.9, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 184.55, 144.55, 0.7, 0.7, 0, ["SKIN_6"]], ["BUYER_TYPE", 183.05, 
214.75, 0.7, 0.7, 0, ["SKIN_5"]], ["BUYER_TYPE", 266.55, 148.5, 0.7, 0.7, 0, ["SKIN_5"]]], [["TABLE_3_TYPE", 168, 312.8, 0.8, 0.8, -90, ["SKIN_3"]], ["TABLE_1_TYPE", 245.4, 157.95, 0.8, 0.8, 0, ["SKIN_5"]], ["TRAP_TYPE", 47.55, 237, 0.8, 0.8, 0, [""]], ["TRAP_TYPE", 285.1, 433.25, 0.8, 0.8, 0, [""]], ["TABLE_3_TYPE", 289.35, 314.5, 0.8, 0.8, -90, ["SKIN_1"]], ["TABLE_1_TYPE", 75, 328.8, 0.8, 0.8, 0, ["SKIN_2"]], ["ZOMBIE_TYPE", 69.95, 408.9, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 206.05, 84.35, 
0.7, 0.7, 0, ["SKIN_4_IDLE"]], ["BUYER_TYPE", 124.1, 86.3, 0.7, 0.7, 0, ["SKIN_4_IDLE"]], ["BUYER_TYPE", 282.75, 82.7, 0.7, 0.7, 0, ["SKIN_7"]], ["BONUS_STAR_TYPE", 236.35, 424.85, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 98.65, 235.35, 0.7, 0.7, 0, ["2"]]], [["TABLE_2_TYPE", 54.4, 220.95, 0.8, 0.8, 0, ["SKIN_4"]], ["TABLE_2_TYPE", 263.2, 218.45, 0.8, 0.8, 0, ["SKIN_3"]], ["BANANA_TYPE", 112.5, 350.75, 0.8, 0.8, 0, [""]], ["TRAP_TYPE", 56.3, 292, 0.8, 0.8, 0, [""]], ["TABLE_1_TYPE", 218.8, 330.45, 
0.8, 0.8, 90, ["SKIN_4"]], ["TELEPORT_TYPE", 280.05, 427.75, 1, 1, 0, [""]], ["TELEPORT_TYPE", 165, 71.45, 1, 1, 0, [""]], ["BUSH_DANGER_TYPE", 209.65, 437.05, 0.8, 0.8, 0, [""]], ["BUYER_TYPE", 282.75, 310.2, 0.7, 0.7, 0, ["SKIN_7"]], ["ZOMBIE_TYPE", 161.2, 153, 0.7, 0.7, 0, ["SKIN_1_SLEEP"]], ["ZOMBIE_TYPE", 159.95, 225.5, 0.7, 0.7, 0, ["SKIN_1_SLEEP"]], ["ZOMBIE_TYPE", 46.25, 439.35, 0.7, 0.7, 0, ["SKIN_7"]], ["BONUS_STAR_TYPE", 155.3, 445.35, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 100.6, 109.4, 
0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 224.6, 106.45, 0.7, 0.7, 0, ["2"]]], [["BUSH_DANGER_TYPE", 279.55, 436.2, 0.8, 0.8, 0, [""]], ["TABLE_1_TYPE", 251.95, 280.7, 0.8, 0.8, 0, ["SKIN_11"]], ["TELEPORT_TYPE", 42, 359.9, 1, 1, 0, ["A"]], ["TABLE_2_TYPE", 125.05, 283.65, 0.8, 0.8, 0, ["SKIN_3"]], ["TABLE_5_TYPE", 40, 284.05, 0.8, 0.8, 0, ["SKIN_2"]], ["TELEPORT_TYPE", 277.95, 206.95, 1, 1, 0, ["A"]], ["TELEPORT_TYPE", 277.95, 354.9, 1, 1, 0, ["B"]], ["TELEPORT_TYPE", 40, 81.95, 1, 1, 0, ["B"]], 
["ELECTRO_DANGER_TYPE", 124.45, 397.05, 0.8, 0.8, 90, ["1000_1000_0"]], ["ZOMBIE_TYPE", 47.15, 439.9, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 175.7, 87.05, 0.7, 0.7, 0, ["SKIN_6"]], ["BONUS_STAR_TYPE", 219.95, 445.4, 0.7, 0.7, 0, ["2"]], ["BUYER_TYPE", 45.5, 227.5, 0.7, 0.7, 0, ["SKIN_5"]], ["BONUS_STAR_TYPE", 264.95, 81.45, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 166.95, 211.45, 0.7, 0.7, 0, ["2"]]], [["INVISIBLE_TYPE", 121.25, 312.4, 0.8, 0.8, 0, ["2000_3000_0"]], ["TABLE_1_TYPE", 210.05, 115.1, 
0.8, 0.8, 90, ["SKIN_5"]], ["BUYER_TYPE", 278, 172.05, 0.7, 0.7, 0, ["SKIN_6"]], ["TABLE_1_TYPE", 210, 255.45, 0.8, 0.8, 90, ["SKIN_1"]], ["TELEPORT_TYPE", 275, 286.45, 1, 1, 0, [""]], ["TABLE_2_TYPE", 263.75, 352.45, 0.8, 0.8, 0, ["SKIN_2"]], ["TRAP_TYPE", 43.8, 247, 0.8, 0.8, 0, [""]], ["TELEPORT_TYPE", 142.45, 111.4, 1, 1, 0, [""]], ["BUYER_TYPE", 81.45, 437.7, 0.7, 0.7, 0, ["SKIN_7"]], ["ZOMBIE_TYPE", 276.5, 444.05, 0.7, 0.7, 0, ["SKIN_1"]], ["BONUS_STAR_TYPE", 36.25, 339.45, 0.7, 0.7, 0, ["2"]], 
["BONUS_STAR_TYPE", 277.5, 73.15, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 23.75, 70.6, 0.7, 0.7, 0, ["2"]]], [["TELEPORT_TYPE", 273.7, 87.75, 1, 1, 0, ["A"]], ["TELEPORT_TYPE", 58.1, 389.5, 1, 1, 0, ["A"]], ["TELEPORT_TYPE", 58.05, 292.2, 1, 1, 0, ["B"]], ["TELEPORT_TYPE", 165.35, 197.95, 1, 1, 0, ["B"]], ["STAIRS_DANGER_TYPE", 279.8, 289.45, 0.75, 0.75, 0, [""]], ["INVISIBLE_TYPE", 275.7, 339.85, 0.8, 0.8, 0, ["1000_1000_0_SKIN_2"]], ["TABLE_2_TYPE", 279.7, 187.75, 0.8, 0.8, 90, ["SKIN_3"]], ["ZOMBIE_TYPE", 
283.8, 441.7, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 55.35, 95.1, 0.7, 0.7, 0, ["SKIN_4_IDLE"]], ["INVISIBLE_TYPE", 59.1, 240.6, 0.8, 0.8, 0, ["1000_1000_0_SKIN_2"]], ["BONUS_STAR_TYPE", 62.95, 201.45, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 173.3, 100.9, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 166.35, 329.6, 0.7, 0.7, 0, ["2"]], ["BUYER_TYPE", 173.8, 444.25, 0.7, 0.7, 0, ["SKIN_6"]]], [["TABLE_1_TYPE", 74.15, 242.85, 0.8, 0.8, 0, ["SKIN_12"]], ["TABLE_1_TYPE", 74.15, 86.35, 0.8, 0.8, 0, ["SKIN_7"]], 
["TABLE_2_TYPE", 122.3, 329.9, 0.8, 0.8, 90, ["SKIN_5"]], ["INVISIBLE_TYPE", 258.6, 458.4, 0.8, 0.8, 0, ["2000_3000_0"]], ["SPIKE_TYPE", 174, 173, 1, 1, 0, ["2000_1000_0"]], ["INVISIBLE_TYPE", 127.35, 425.15, 0.8, 0.8, 90, ["1000_1000_0_SKIN_2"]], ["BUYER_TYPE", 50.15, 313.85, 0.7, 0.7, 0, [""]], ["BUYER_TYPE", 35.05, 173.95, 0.7, 0.7, 0, ["SKIN_7"]], ["BANANA_TYPE", 274.75, 102.3, 0.8, 0.8, 0, ["SKIN_2"]], ["ZOMBIE_TYPE", 279.7, 257.2, 0.7, 0.7, 0, ["SKIN_1"]], ["ZOMBIE_TYPE", 203.6, 328.8, 0.7, 
0.7, 0, ["SKIN_1"]], ["BONUS_STAR_TYPE", 285.15, 146.5, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 175.8, 441.45, 0.7, 0.7, 0, ["2"]]], [["ELECTRO_DANGER_TYPE", 225.05, 208.2, 0.8, 0.8, 0, ["1000_1000_0"]], ["ELECTRO_DANGER_TYPE", 98, 334.75, 0.8, 0.8, 0, ["1000_1000_0"]], ["ELECTRO_DANGER_TYPE", 161.85, 401.6, 0.8, 0.8, 90, ["1000_1000_0"]], ["TABLE_3_TYPE", 287.55, 268.75, 0.8, 0.8, -90, ["SKIN_1"]], ["TABLE_3_TYPE", 26.35, 97.15, 0.8, 0.8, -90, ["SKIN_3"]], ["TABLE_1_TYPE", 249.65, 343.7, 0.8, 0.8, 
0, ["SKIN_2"]], ["TABLE_1_TYPE", 159.45, 119.35, 0.8, 0.8, 90, ["SKIN_1"]], ["BUYER_TYPE", 96.65, 106.2, 0.7, 0.7, 90, ["SKIN_2"]], ["ZOMBIE_TYPE", 243.55, 440.6, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 225.3, 127.95, 0.7, 0.7, 90, ["SKIN_6"]], ["BUYER_TYPE", 137.3, 270.2, 0.7, 0.7, 0, ["SKIN_7"]], ["BONUS_STAR_TYPE", 62.5, 437.55, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 234.4, 269.55, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 93.75, 180.1, 0.7, 0.7, 0, ["2"]]], [["BUSH_DANGER_TYPE", 113.95, 108.05, 
0.8, 0.8, 0, [""]], ["BUSH_DANGER_TYPE", 258.35, 200.25, 0.8, 0.8, 0, [""]], ["BUSH_DANGER_TYPE", 116.85, 299.6, 0.8, 0.8, 0, [""]], ["BUSH_DANGER_TYPE", 268.25, 408.8, 0.8, 0.8, 0, [""]], ["ZOMBIE_TYPE", 53.95, 434.7, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 275.5, 315.45, 0.7, 0.7, 0, ["SKIN_6"]], ["BUYER_TYPE", 33.8, 206.15, 0.7, 0.7, 0, ["SKIN_6"]], ["BUYER_TYPE", 263.05, 110.9, 0.7, 0.7, 0, ["SKIN_4_IDLE"]], ["BONUS_STAR_TYPE", 174.85, 378, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 131.85, 218.75, 
0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 195.35, 62.45, 0.7, 0.7, 0, ["2"]]], [["TABLE_2_TYPE", 167.6, 225.15, 0.8, 0.8, 90, ["SKIN_3"]], ["TABLE_1_TYPE", 167.15, 66.7, 0.8, 0.8, 90, ["SKIN_9"]], ["BUTTON_TYPE", 46.45, 445.1, 1, 1, 0, ["RED"]], ["DOOR_REMOTE_TYPE", 74.95, 273.8, 1, 1, 0, ["RED"]], ["DOOR_REMOTE_TYPE", 75.45, 138, 1, 1, 0, ["BLUE"]], ["BUTTON_TYPE", 274.15, 443.95, 1, 1, 0, ["BLUE_SKIN_1"]], ["DOOR_REMOTE_TYPE", 249.65, 139.35, 1, 1, 0, ["GREEN"]], ["BUTTON_TYPE", 159.9, 440.6, 1, 
1, 0, ["GREEN_SKIN_2"]], ["DOOR_REMOTE_TYPE", 251.6, 273.7, 1, 1, 0, ["RED"]], ["ZOMBIE_TYPE", 182.35, 364.9, 0.7, 0.7, 0, ["SKIN_1"]], ["ZOMBIE_TYPE", 75.6, 362.4, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 254.35, 85.25, 0.7, 0.7, 0, ["SKIN_2"]], ["BUYER_TYPE", 65.2, 78.5, 0.7, 0.7, 0, ["SKIN_3"]], ["BONUS_STAR_TYPE", 104, 435.45, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 221, 211.45, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 274, 364.45, 0.79, 0.79, 0, [""]]], [["BUTTON_TYPE", 47.9, 430.7, 1, 1, 0, 
["RED"]], ["DOOR_REMOTE_TYPE", 269.95, 195.65, 1, 1, 0, ["RED_SKIN_1"]], ["TABLE_1_TYPE", 150.55, 205.55, 0.8, 0.8, 0, ["SKIN_2"]], ["TABLE_1_TYPE", 110.4, 111.4, 0.8, 0.8, 90, ["SKIN_1"]], ["BANANA_TYPE", 157.55, 332.3, 0.8, 0.8, 0, ["SKIN_2"]], ["ZOMBIE_TYPE", 160.5, 436.1, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 185.65, 123, 0.7, 0.7, 0, ["SKIN_7"]], ["DECOR_HELP_4_TYPE", 263.1, 373.9, 1, 1, 0, [""]], ["BUYER_TYPE", 274.8, 118.05, 0.7, 0.7, 0, ["SKIN_6"]], ["BUYER_TYPE", 46.5, 105.95, 0.7, 0.7, 
0, ["SKIN_4_IDLE"]], ["BUSH_DANGER_TYPE", 359.4, 212.3, 0.8, 0.8, 0, [""]], ["BUSH_DANGER_TYPE", 108.45, 3, 0.8, 0.8, 0, [""]]], [["TABLE_1_TYPE", 245.65, 332.85, 0.8, 0.8, 0, ["SKIN_14"]], ["TABLE_1_TYPE", 251.35, 170.95, 0.8, 0.8, 0, ["SKIN_13"]], ["BUTTON_TYPE", 278.15, 266.1, 1, 1, 0, ["GREEN_SKIN_2"]], ["DOOR_REMOTE_TYPE", 216, 95.75, 1, 1, 90, ["GREEN_SKIN_1"]], ["BUTTON_TYPE", 273.45, 420.55, 1, 1, 0, ["RED"]], ["DOOR_REMOTE_TYPE", 221.55, 258.8, 1, 1, 90, ["RED_SKIN_1"]], ["ELECTRO_DANGER_TYPE", 
95.6, 341.6, 0.8, 0.8, 0, ["1000_1000_0"]], ["TABLE_2_TYPE", 31.4, 273.1, 0.8, 0.8, 90, ["SKIN_8"]], ["TABLE_5_TYPE", 27.65, 61.85, 0.8, 0.8, 0, ["SKIN_5"]], ["ZOMBIE_TYPE", 35.2, 154.35, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 280.4, 100.1, 0.7, 0.7, 0, ["SKIN_6"]], ["BUYER_TYPE", 113, 292.2, 0.7, 0.7, 0, ["SKIN_3"]], ["BONUS_STAR_TYPE", 122.4, 432.15, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 156.85, 70.85, 0.7, 0.7, 0, ["2"]]], [["TABLE_2_TYPE", 183.3, 446.1, 0.8, 0.8, 0, ["SKIN_5"]], ["BUTTON_TYPE", 
43.45, 79.2, 1, 1, 0, ["GREEN_SKIN_2"]], ["DOOR_REMOTE_TYPE", 94.85, 317.2, 1, 1, -90, ["GREEN_SKIN_1"]], ["TABLE_2_TYPE", 52.75, 240.25, 0.8, 0.8, 0, ["SKIN_5"]], ["STAIRS_DANGER_TYPE", 106.5, 396, 0.75, 0.75, 0, [""]], ["TRAP_TYPE", 118, 83.5, 0.8, 0.8, 0, [""]], ["BUYER_TYPE", 44.5, 318.5, 0.7, 0.7, 0, ["SKIN_6"]], ["ZOMBIE_TYPE", 272.2, 248.5, 0.7, 0.7, 0, ["SKIN_1"]], ["ZOMBIE_TYPE", 188.15, 181.15, 0.7, 0.7, 0, ["SKIN_1_SLEEP"]], ["ZOMBIE_TYPE", 234.5, 117.1, 0.7, 0.7, 0, ["SKIN_1_SLEEP"]], 
["BONUS_STAR_TYPE", 274.85, 387.15, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 28.8, 163.7, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 181.85, 65.75, 0.7, 0.7, 0, ["2"]]], [["BUTTON_TYPE", 186.85, 445.75, 1, 1, 0, ["RED"]], ["DOOR_REMOTE_TYPE", 105.85, 372.9, 1, 1, -90, ["RED_SKIN_1"]], ["TELEPORT_TYPE", 41.45, 375.4, 1, 1, 0, [""]], ["TABLE_1_TYPE", 70.5, 443.85, 0.8, 0.8, 0, ["SKIN_8"]], ["TABLE_1_TYPE", 60.75, 289.75, 0.8, 0.8, 0, ["SKIN_9"]], ["TABLE_2_TYPE", 178.25, 291, 0.8, 0.8, 0, ["SKIN_3"]], 
["TABLE_2_TYPE", 276.15, 290.95, 0.8, 0.8, 0, ["SKIN_4"]], ["BUTTON_TYPE", 38.4, 225.95, 1, 1, 0, ["GREEN_SKIN_2"]], ["DOOR_REMOTE_TYPE", 213.45, 89.45, 1, 1, 90, ["GREEN_SKIN_1"]], ["TABLE_1_TYPE", 247.25, 158.05, 0.8, 0.8, 0, ["SKIN_2"]], ["TELEPORT_TYPE", 275.9, 227.6, 1, 1, 0, [""]], ["ZOMBIE_TYPE", 274.9, 358.25, 0.7, 0.7, 0, ["SKIN_1"]], ["ZOMBIE_TYPE", 273.6, 445.95, 0.7, 0.7, 0, ["SKIN_7"]], ["BUYER_TYPE", 275.4, 96.4, 0.7, 0.7, 0, ["SKIN_6"]], ["BUYER_TYPE", 148.3, 226, 0.7, 0.7, 0, ["SKIN_7"]], 
["BONUS_STAR_TYPE", 45.2, 70.9, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 150.55, 68.3, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 173.1, 366.95, 0.7, 0.7, 0, ["2"]]], [["BUSH_DANGER_TYPE", 41, 76, 0.8, 0.8, 0, [""]], ["BUSH_DANGER_TYPE", 93.7, 119.85, 0.8, 0.8, 0, [""]], ["BUSH_DANGER_TYPE", 229.15, 121.05, 0.8, 0.8, 0, [""]], ["BUTTON_TYPE", 160.9, 77, 1, 1, 0, ["BLUE_SKIN_1"]], ["DOOR_REMOTE_TYPE", 271.85, 359.35, 1, 1, 0, ["BLUE_SKIN_1"]], ["BUSH_DANGER_TYPE", 289.4, 79.65, 0.8, 0.8, 0, [""]], ["TABLE_1_TYPE", 
198.5, 408.85, 0.8, 0.8, 90, ["SKIN_7"]], ["SPIKE_TYPE", 41.95, 359.4, 1, 1, 0, ["2000_1000_0"]], ["SPIKE_TYPE", 126, 358.1, 1, 1, 0, ["2000_1000_0"]], ["ZOMBIE_TYPE", 46.45, 208.1, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 272.6, 441.6, 0.7, 0.7, 0, ["SKIN_5"]], ["BUYER_TYPE", 117.05, 440.45, 0.7, 0.7, 0, ["SKIN_4_IDLE"]], ["BONUS_STAR_TYPE", 163.15, 141.2, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 291.1, 306.8, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 85.3, 287.95, 0.7, 0.7, 0, ["2"]]], [["ELECTRO_DANGER_TYPE", 
169.6, 266.35, 0.8, 0.8, 0, ["1000_1000_0"]], ["BUYER_TYPE", 164.8, 219.6, 0.7, 0.7, 0, ["SKIN_4_IDLE"]], ["BUYER_TYPE", 133.2, 147.7, 0.7, 0.7, 0, ["SKIN_2"]], ["BUYER_TYPE", 204.55, 152.9, 0.7, 0.7, 0, ["SKIN_3"]], ["BUYER_TYPE", 86.85, 87.95, 0.7, 0.7, 0, ["SKIN_7"]], ["BUYER_TYPE", 251, 88.5, 0.7, 0.7, 0, [""]], ["BUYER_TYPE", 162.15, 87.75, 0.7, 0.7, 0, ["SKIN_5"]], ["BUSH_DANGER_TYPE", 90, 214, 0.8, 0.8, 0, [""]], ["BUSH_DANGER_TYPE", 41, 149.95, 0.8, 0.8, 0, [""]], ["BUSH_DANGER_TYPE", 241.7, 
207.6, 0.8, 0.8, 0, [""]], ["BUSH_DANGER_TYPE", 281.8, 158.65, 0.8, 0.8, 0, [""]], ["ZOMBIE_TYPE", 53.9, 348.95, 0.7, 0.7, 0, ["SKIN_1"]], ["BONUS_STAR_TYPE", 293.7, 451.15, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 299.95, 319.35, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 36.35, 453.6, 0.7, 0.7, 0, ["2"]]], [["BUTTON_TYPE", 290.6, 294, 1, 1, 0, ["BLUE_SKIN_1"]], ["DOOR_REMOTE_TYPE", 193.25, 164.9, 1, 1, 0, ["BLUE_SKIN_1"]], ["TELEPORT_TYPE", 57.75, 88, 1, 1, 0, [""]], ["TELEPORT_TYPE", 289.8, 439.25, 
1, 1, 0, [""]], ["TABLE_1_TYPE", 126.1, 116.85, 0.8, 0.8, 90, ["SKIN_11"]], ["BUTTON_TYPE", 159.2, 439.35, 1, 1, 0, ["RED"]], ["DOOR_REMOTE_TYPE", 51.35, 163.9, 1, 1, 0, ["RED_SKIN_1"]], ["TABLE_1_TYPE", 231.1, 323.35, 0.8, 0.8, 90, ["SKIN_8"]], ["TABLE_2_TYPE", 292.45, 223.25, 0.8, 0.8, 0, ["SKIN_3"]], ["TABLE_5_TYPE", 225.9, 427.4, 0.8, 0.8, 0, ["SKIN_2"]], ["BUYER_TYPE", 207.45, 94.05, 0.7, 0.7, 0, ["SKIN_4_IDLE"]], ["BUYER_TYPE", 119.5, 244.8, 0.7, 0.7, 180, ["SKIN_7"]], ["ZOMBIE_TYPE", 65.2, 
401.6, 0.7, 0.7, 0, ["SKIN_1"]], ["BONUS_STAR_TYPE", 278.6, 85.95, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 35.1, 236.55, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 166.95, 372.1, 0.7, 0.7, 0, ["2"]]], [["DOOR_REMOTE_TYPE", 245.85, 236.55, 1, 1, 90, ["RED"]], ["DOOR_REMOTE_TYPE", 165.4, 339.4, 1, 1, 0, ["GREEN"]], ["TABLE_2_TYPE", 287.45, 337.45, 0.8, 0.8, 0, ["SKIN_4"]], ["TABLE_2_TYPE", 45.2, 337.45, 0.8, 0.8, 0, ["SKIN_3"]], ["TABLE_2_TYPE", 43.25, 134.75, 0.8, 0.8, 0, ["SKIN_4"]], ["TABLE_2_TYPE", 
287.35, 138.6, 0.8, 0.8, 0, ["SKIN_3"]], ["DOOR_REMOTE_TYPE", 90, 239.1, 1, 1, -90, ["RED"]], ["TELEPORT_TYPE", 274.85, 429.35, 1, 1, 0, [""]], ["TELEPORT_TYPE", 46.4, 74.15, 1, 1, 0, [""]], ["BUTTON_TYPE", 286.6, 77.05, 1, 1, 0, ["RED"]], ["BUTTON_TYPE", 208.3, 74.2, 1, 1, 0, ["GREEN_SKIN_2"]], ["DOOR_REMOTE_TYPE", 165.25, 128.9, 1, 1, 0, ["GREEN"]], ["ZOMBIE_TYPE", 47.6, 425.55, 0.7, 0.7, 0, ["SKIN_1"]], ["ZOMBIE_TYPE", 135.5, 433, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 302.45, 211.2, 0.7, 0.7, 
0, ["SKIN_6"]], ["BUYER_TYPE", 29.45, 278.1, 0.7, 0.7, 0, ["SKIN_7"]], ["BONUS_STAR_TYPE", 141.8, 79.7, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 299.35, 290.5, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 32.5, 200.65, 0.7, 0.7, 0, ["2"]]], [["SPIKE_TYPE", 207.5, 276.55, 1, 1, 0, ["2000_1000_0"]], ["TELEPORT_TYPE", 140.6, 429.35, 1, 1, 0, [""]], ["DOOR_REMOTE_TYPE", 222.1, 421.25, 1, 1, 90, ["GREEN_SKIN_1"]], ["TABLE_1_TYPE", 176.85, 204.95, 0.8, 0.8, 0, ["SKIN_1"]], ["BUTTON_TYPE", 276.15, 93, 1, 1, 
0, ["GREEN_SKIN_2"]], ["TELEPORT_TYPE", 279.9, 266.15, 1, 1, 0, [""]], ["TABLE_2_TYPE", 158.15, 345.05, 0.8, 0.8, 0, ["SKIN_2"]], ["TABLE_2_TYPE", 53.9, 343.75, 0.8, 0.8, 0, ["SKIN_2"]], ["BUYER_TYPE", 281.6, 436.45, 0.7, 0.7, 0, ["SKIN_6"]], ["TABLE_2_TYPE", 266.05, 340.05, 0.8, 0.8, 0, ["SKIN_1"]], ["ELECTRO_DANGER_TYPE", 189.7, 110.7, 0.8, 0.8, 90, ["1000_1000_0"]], ["SPIKE_TYPE", 135.9, 278.95, 1, 1, 0, ["2000_1000_0"]], ["ZOMBIE_TYPE", 50.15, 78.35, 0.7, 0.7, 0, ["SKIN_1"]], ["ZOMBIE_TYPE", 
58.5, 281.6, 0.7, 0.7, 0, ["SKIN_7"]], ["BONUS_STAR_TYPE", 164.4, 87.25, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 61.5, 427.35, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 52.7, 178.8, 0.7, 0.7, 0, ["2"]]], [["INVISIBLE_TYPE", 257.05, 101.45, 0.8, 0.8, 0, ["2000_3000_0"]], ["INVISIBLE_TYPE", 266.55, 221.5, 0.8, 0.8, 0, ["1000_1000_0_SKIN_2"]], ["TELEPORT_TYPE", 268.6, 160.75, 1, 1, 0, [""]], ["TELEPORT_TYPE", 45.2, 435.6, 1, 1, 0, [""]], ["TABLE_1_TYPE", 117.65, 408.15, 0.8, 0.8, 90, ["SKIN_14"]], ["TABLE_1_TYPE", 
118.3, 271.3, 0.8, 0.8, 90, ["SKIN_13"]], ["BUTTON_TYPE", 48.95, 243.6, 1, 1, 0, ["RED"]], ["DOOR_REMOTE_TYPE", 55.25, 167.3, 1, 1, 0, ["RED_SKIN_1"]], ["TABLE_5_TYPE", 167.25, 89.5, 0.8, 0.8, 0, ["SKIN_5"]], ["TABLE_2_TYPE", 170, 172.1, 0.8, 0.8, 90, ["SKIN_8"]], ["BUYER_TYPE", 75.5, 105.5, 0.7, 0.7, 0, ["SKIN_7"]], ["ZOMBIE_TYPE", 182.95, 444.5, 0.7, 0.7, 0, ["SKIN_1"]], ["BONUS_STAR_TYPE", 272.35, 447.4, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 276.1, 259.15, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 
46.45, 324.45, 0.7, 0.7, 0, ["2"]]], [["TABLE_5_TYPE", 41.2, 336.55, 0.8, 0.8, 0, ["SKIN_3"]], ["TABLE_5_TYPE", 45.6, 450, 0.8, 0.8, 0, ["SKIN_4"]], ["TABLE_4_TYPE", 43.4, 67.25, 0.8, 0.8, 0, ["SKIN_1"]], ["TABLE_2_TYPE", 56.05, 218.45, 0.8, 0.8, 0, ["SKIN_5"]], ["TABLE_2_TYPE", 272.05, 61.45, 0.8, 0.8, 0, ["SKIN_5"]], ["DOOR_REMOTE_TYPE", 96.25, 396.1, 1, 1, -90, ["RED_SKIN_1"]], ["DOOR_REMOTE_TYPE", 80.95, 145.95, 1, 1, -90, ["BLUE_SKIN_1"]], ["DOOR_REMOTE_TYPE", 236.95, 140.65, 1, 1, 90, ["GREEN_SKIN_1"]], 
["BUTTON_TYPE", 160.8, 71.3, 1, 1, 0, ["BLUE_SKIN_1"]], ["BUTTON_TYPE", 271.6, 434.75, 1, 1, 0, ["RED"]], ["BUTTON_TYPE", 43.45, 278.8, 1, 1, 0, ["GREEN_SKIN_2"]], ["ZOMBIE_TYPE", 285.3, 361.7, 0.7, 0.7, 0, ["SKIN_1"]], ["ZOMBIE_TYPE", 195.3, 359.95, 0.7, 0.7, 0, ["SKIN_7"]], ["BUYER_TYPE", 45.95, 398.35, 0.7, 0.7, 0, [""]], ["BUYER_TYPE", 39.25, 140.45, 0.7, 0.7, 0, ["SKIN_6"]], ["BUYER_TYPE", 298.85, 144.25, 0.7, 0.7, 0, ["SKIN_7"]], ["BONUS_STAR_TYPE", 128, 260.4, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 
166.9, 135.9, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 205.85, 443.65, 0.7, 0.7, 0, ["2"]], ["BUSH_DANGER_TYPE", 278.6, 222.25, 0.8, 0.8, 0, [""]]], [["TABLE_1_TYPE", 252.75, 351.5, 0.8, 0.8, 0, ["SKIN_8"]], ["TABLE_1_TYPE", 81.6, 356.55, 0.8, 0.8, 0, ["SKIN_8"]], ["TABLE_1_TYPE", 75.85, 210.55, 0.8, 0.8, 0, ["SKIN_10"]], ["TABLE_1_TYPE", 248.45, 157.9, 0.8, 0.8, 0, ["SKIN_9"]], ["TABLE_1_TYPE", 249.35, 206.65, 0.8, 0.8, 0, ["SKIN_10"]], ["BUTTON_TYPE", 139.15, 149.45, 1, 1, 0, ["RED"]], ["BUTTON_TYPE", 
52.85, 149.45, 1, 1, 0, ["GREEN_SKIN_2"]], ["BUTTON_TYPE", 272.95, 282.5, 1, 1, 0, ["BLUE_SKIN_1"]], ["DOOR_REMOTE_TYPE", 185.75, 279.65, 1, 1, 90, ["RED_SKIN_1"]], ["DOOR_REMOTE_TYPE", 190.1, 427.6, 1, 1, 90, ["GREEN_SKIN_1"]], ["TELEPORT_TYPE", 38.3, 281.25, 1, 1, 0, [""]], ["TELEPORT_TYPE", 277.95, 426.75, 1, 1, 0, [""]], ["DOOR_REMOTE_TYPE", 208.2, 83.45, 1, 1, 90, ["BLUE_SKIN_1"]], ["ZOMBIE_TYPE", 69.6, 76.55, 0.7, 0.7, 0, ["SKIN_1"]], ["ZOMBIE_TYPE", 57.05, 435.5, 0.7, 0.7, 0, ["SKIN_1"]], 
["BUYER_TYPE", 272.75, 86.3, 0.7, 0.7, 0, ["SKIN_6"]], ["BONUS_STAR_TYPE", 123.75, 292.25, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 151.2, 87.1, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 127.3, 441.25, 0.7, 0.7, 0, ["2"]]], [["TABLE_2_TYPE", 266.1, 363.3, 0.8, 0.8, 0, ["SKIN_5"]], ["TABLE_2_TYPE", 50.2, 363.85, 0.8, 0.8, 0, ["SKIN_1"]], ["DOOR_REMOTE_TYPE", 158.1, 355.55, 1, 1, 0, ["BLUE_SKIN_1"]], ["BUTTON_TYPE", 281.1, 438.15, 1, 1, 0, ["BLUE_SKIN_1"]], ["BUYER_TYPE", 125.8, 269.75, 0.7, 0.7, 0, 
[""]], ["BUYER_TYPE", 86.85, 111.25, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 163.85, 102.7, 0.7, 0.7, 0, ["SKIN_2"]], ["BUYER_TYPE", 250.9, 111.15, 0.7, 0.7, 0, ["SKIN_3"]], ["BUYER_TYPE", 210.45, 266.25, 0.7, 0.7, 0, ["SKIN_4_IDLE"]], ["BUYER_TYPE", 74.35, 200.25, 0.7, 0.7, 0, ["SKIN_5"]], ["BUYER_TYPE", 174.85, 188.25, 0.7, 0.7, 0, ["SKIN_6"]], ["BUYER_TYPE", 249.95, 197.75, 0.7, 0.7, 0, ["SKIN_7"]], ["ZOMBIE_TYPE", 65.2, 433, 0.7, 0.7, 0, ["SKIN_1"]], ["ZOMBIE_TYPE", 168.15, 436.8, 0.7, 0.7, 
0, ["SKIN_1"]], ["BONUS_STAR_TYPE", 291.15, 291.75, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 33.9, 291.8, 0.7, 0.7, 0, ["2"]], ["BONUS_STAR_TYPE", 32.65, 62.1, 0.7, 0.7, 0, ["2"]]], [["DOOR_REMOTE_TYPE", 168.45, 75.95, 1, 1, 0, ["RED_SKIN_1"]], ["BUTTON_TYPE", 61.45, 441.4, 1, 1, 0, ["GREEN_SKIN_2"]], ["BUTTON_TYPE", 257.45, 441.4, 1, 1, 0, ["BLUE_SKIN_1"]], ["BUTTON_TYPE", 163.5, 439.4, 1, 1, 0, ["RED"]], ["DOOR_REMOTE_TYPE", 287.4, 213.7, 1, 1, 90, ["BLUE_SKIN_1"]], ["DOOR_REMOTE_TYPE", 33.7, 216.9, 
1, 1, -90, ["GREEN_SKIN_1"]], ["ZOMBIE_TYPE", 164.4, 368.8, 0.7, 0.7, 0, ["SKIN_1"]], ["ZOMBIE_TYPE", 131.4, 177.85, 0.7, 0.7, 0, ["SKIN_1"]], ["ZOMBIE_TYPE", 193.4, 237.85, 0.7, 0.7, 0, ["SKIN_1"]]], [["BUTTON_TYPE", 257.45, 441.4, 1, 1, 0, ["BLUE_SKIN_1"]], ["BUTTON_TYPE", 163.5, 439.4, 1, 1, 0, ["RED"]], ["DOOR_REMOTE_TYPE", 33.5, 217.45, 1, 1, -90, ["RED"]], ["BUTTON_TYPE", 61.5, 436.4, 1, 1, 0, ["GREEN_SKIN_2"]], ["DOOR_REMOTE_TYPE", 239.85, 76.5, 1, 1, 0, ["BLUE"]], ["DOOR_REMOTE_TYPE", 287.25, 
217.65, 1, 1, 90, ["GREEN"]], ["DOOR_REMOTE_TYPE", 77.3, 87.65, 1, 1, 0, ["BLUE"]], ["ZOMBIE_TYPE", 167.4, 212.85, 0.7, 0.7, 0, ["SKIN_1"]], ["ZOMBIE_TYPE", 165.45, 343.85, 0.7, 0.7, 0, ["SKIN_1"]]], [["BONUS_STAR_TYPE", 246.05, 361, 0.79, 0.79, 0, [""]], ["BONUS_STAR_TYPE", 86.95, 188.95, 0.79, 0.79, 0, [""]], ["BUYER_TYPE", 265.1, 235, 0.7, 0.7, 0, [""]], ["BUYER_TYPE", 144, 202.55, 0.7, 0.7, 0, ["SKIN_6"]], ["ZOMBIE_TYPE", 243.1, 429.3, 0.7, 0.7, 0, ["SKIN_2"]], ["TABLE_1_TYPE", 84.9, 414, 0.8, 
0.8, 0, ["SKIN_14"]], ["TABLE_2_TYPE", 262.6, 95.1, 0.8, 0.8, 40, ["SKIN_8"]], ["DECOR_SCREAMER_TYPE", 245.5, 420.45, 1, 1, 0, [""]]], [["ZOMBIE_TYPE", 196.45, 210.35, 0.7, 0.7, 0, ["SKIN_1_SLEEP"]], ["ZOMBIE_TYPE", 217.45, 95.35, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 216.55, 372.45, 0.7, 0.7, 133, [""]], ["DECOR_SCREAMER_TYPE", 220.5, 82.45, 1, 1, 0, [""]], ["ZOMBIE_TYPE", 239.45, 278.25, 0.7, 0.7, 0, ["SKIN_1_SLEEP"]]], [["BUTTON_TYPE", 186.55, 205.45, 1, 1, 0, ["RED"]], ["DOOR_REMOTE_TYPE", 
171.5, 70.4, 1, 1, 0, ["RED"]], ["DOOR_REMOTE_TYPE", 48.5, 182.45, 1, 1, -90, ["RED"]], ["DOOR_REMOTE_TYPE", 279.45, 173.5, 1, 1, 90, ["RED"]], ["DOOR_REMOTE_TYPE", 160.55, 451.4, 1, 1, 180, ["RED"]], ["ZOMBIE_TYPE", 256.45, 297.85, 0.7, 0.7, 0, ["SKIN_1"]], ["ZOMBIE_TYPE", 144.45, 280.85, 0.7, 0.7, 0, ["SKIN_1"]], ["ZOMBIE_TYPE", 45.45, 385.8, 0.7, 0.7, 0, ["SKIN_1"]]], [["STATIC_BOX_TYPE", 273.9, 364.35, 0.81, 0.81, 29, ["SKIN_2_REMOV"]], ["ZOMBIE_TYPE", 146, 408.2, 0.7, 0.7, 0, ["SKIN_1"]], ["BONUS_STAR_TYPE", 
119, 253.95, 0.79, 0.79, 0, [""]], ["BONUS_STAR_TYPE", 236.95, 230.95, 0.79, 0.79, 0, [""]], ["BONUS_STAR_TYPE", 163.45, 76.45, 0.7, 0.7, 0, ["2"]], ["BUYER_TYPE", 145, 318.05, 0.7, 0.7, 0, [""]], ["BUYER_TYPE", 55, 312.05, 0.7, 0.7, 144, [""]], ["BUYER_TYPE", 40, 81.55, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 124.95, 75, 0.7, 0.7, 0, ["SKIN_2"]], ["BUYER_TYPE", 202.05, 83.45, 0.7, 0.7, 0, ["SKIN_3"]], ["BUYER_TYPE", 287.6, 90.5, 0.7, 0.7, 0, ["SKIN_4_IDLE"]], ["BUYER_TYPE", 45.5, 174.55, 0.7, 0.7, 
0, ["SKIN_5"]], ["BUYER_TYPE", 142, 174.55, 0.7, 0.7, 0, ["SKIN_6"]], ["BUYER_TYPE", 237.1, 174.05, 0.7, 0.7, 0, ["SKIN_7"]], ["ZOMBIE_TYPE", 56, 426.45, 0.7, 0.7, 0, ["SKIN_7"]], ["ZOMBIE_TYPE", 256.1, 432.3, 0.7, 0.7, 0, ["SKIN_2"]]], [["TELEPORT_TYPE", 173, 245.95, 1, 1, 0, ["A"]], ["TELEPORT_TYPE", 41, 86.95, 1, 1, 0, ["A"]], ["ZOMBIE_TYPE", 169.45, 402.8, 0.7, 0.7, 0, ["SKIN_1"]], ["BONUS_STAR_TYPE", 57, 264.95, 0.79, 0.79, 0, [""]], ["ZOMBIE_TYPE", 215.9, 179.85, 0.7, 0.7, 0, ["SKIN_1"]], ["ZOMBIE_TYPE", 
88.95, 198.85, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 166.95, 325.45, 0.7, 0.7, 0, [""]], ["BUYER_TYPE", 61, 336.45, 0.7, 0.7, 0, [""]], ["BONUS_STAR_TYPE", 267.95, 288.45, 0.7, 0.7, 0, ["2"]]], [["ZOMBIE_TYPE", 240.45, 404.8, 0.7, 0.7, 0, ["SKIN_1"]], ["BONUS_STAR_TYPE", 119, 253.95, 0.79, 0.79, 0, [""]], ["ZOMBIE_TYPE", 125.05, 186.4, 0.7, 0.7, 0, ["SKIN_2"]], ["ELECTRO_DANGER_TYPE", 202.95, 108.45, 0.8, 0.8, 0, ["1000_1000_0"]], ["DYNAMIC_RECT_TYPE", 239.6, 361.15, 0.79, 0.79, 0, ["2"]], ["ELECTRO_DANGER_TYPE", 
123.45, 384.1, 0.8, 0.8, -71, ["1000_1000_1000"]], ["BUYER_TYPE", 240.95, 309.45, 0.7, 0.7, 0, [""]], ["BUYER_TYPE", 45, 322.45, 0.7, 0.7, 0, [""]], ["ELECTRO_DANGER_TYPE", 241.5, 242.2, 0.8, 0.8, 0, ["3000_1000_500"]], ["BONUS_STAR_TYPE", 37, 117.45, 0.7, 0.7, 0, ["2"]]], [["STAIRS_DANGER_TYPE", 275.45, 93.1, 0.75, 0.75, 0, [""]], ["HARD_RECT_TYPE", 71.25, 271.85, 1, 1, 0, [""]], ["STATIC_BALK_1_TYPE", 264.6, 384.6, 0.7, 0.7, -30, [""]], ["BONUS_STAR_TYPE", 50.15, 220.95, 0.68, 0.68, 0, [""]], ["BONUS_STAR_TYPE", 
243, 335.9, 0.7, 0.7, 0, ["2"]], ["ZOMBIE_TYPE", 117.95, 371.85, 0.7, 0.7, 0, ["SKIN_1"]], ["BUSH_DANGER_TYPE", 123.5, 103.9, 0.8, 0.8, 0, [""]], ["BUYER_TYPE", 175, 163.45, 0.7, 0.7, 0, [""]], ["ZOMBIE_TYPE", 224.9, 215.85, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 40, 449.4, 0.7, 0.7, 0, [""]], ["ZOMBIE_TYPE", 287.9, 162.85, 0.7, 0.7, 0, ["SKIN_1"]]], [["TABLE_1_TYPE", 72, 65.45, 0.8, 0.8, 0, ["SKIN_1"]], ["ZOMBIE_TYPE", 174.95, 447.75, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 68, 440.4, 0.7, 0.7, 
0, [""]], ["ZOMBIE_TYPE", 268.9, 437.8, 0.7, 0.7, 0, ["SKIN_1"]], ["TABLE_1_TYPE", 70, 128.45, 0.8, 0.8, 0, ["SKIN_2"]], ["TABLE_1_TYPE", 73, 186.45, 0.8, 0.8, 0, ["SKIN_3"]], ["TABLE_1_TYPE", 73, 245.45, 0.8, 0.8, 0, ["SKIN_4"]], ["TABLE_1_TYPE", 77, 306.7, 0.8, 0.8, 0, ["SKIN_5"]], ["TABLE_1_TYPE", 216.95, 63, 0.8, 0.8, 0, ["SKIN_5"]], ["TABLE_1_TYPE", 220.95, 123.05, 0.8, 0.8, 0, ["SKIN_7"]], ["TABLE_1_TYPE", 219.95, 182.45, 0.8, 0.8, 0, ["SKIN_8"]], ["TABLE_1_TYPE", 220, 245.45, 0.8, 0.8, 0, 
["SKIN_9"]], ["TABLE_1_TYPE", 221, 305.45, 0.8, 0.8, 0, ["SKIN_10"]], ["TABLE_1_TYPE", 75, 365.15, 0.8, 0.8, 0, ["SKIN_11"]], ["TABLE_1_TYPE", 223.95, 364.25, 0.8, 0.8, 0, ["SKIN_12"]]], [["TABLE_2_TYPE", 236.15, 67.5, 0.8, 0.8, 7, ["SKIN_4"]], ["TABLE_2_TYPE", 57, 65.45, 0.8, 0.8, 0, ["SKIN_1"]], ["TABLE_2_TYPE", 49, 195.45, 0.8, 0.8, 0, ["SKIN_2"]], ["TABLE_2_TYPE", 278.05, 161.45, 0.8, 0.8, 0, ["SKIN_3"]], ["TABLE_2_TYPE", 156.05, 264.4, 0.8, 0.8, -42, ["SKIN_5"]], ["ZOMBIE_TYPE", 189.65, 376.8, 
0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 58.7, 318.4, 0.7, 0.7, 0, [""]], ["ZOMBIE_TYPE", 168.65, 163.85, 0.7, 0.7, 0, ["SKIN_1"]], ["TABLE_4_TYPE", 263.15, 304, 0.8, 0.8, 0, ["SKIN_1"]], ["TABLE_3_TYPE", 286.95, 431.4, 0.8, 0.8, -90, ["SKIN_1"]], ["TABLE_3_TYPE", 34, 432.25, 0.8, 0.8, -90, ["SKIN_3"]]], [["DECOR_BANANA_TYPE", 140, 448.4, 0.8, 0.8, 0, [""]], ["TABLE_5_TYPE", 266.6, 139.95, 0.8, 0.8, 0, ["SKIN_3"]], ["TABLE_5_TYPE", 80, 260.45, 0.8, 0.8, 0, ["SKIN_2"]], ["TABLE_5_TYPE", 256.95, 306.45, 
0.8, 0.8, 0, ["SKIN_4"]], ["DECOR_BANANA_TYPE", 164, 124.45, 0.8, 0.8, 0, ["SKIN_2"]], ["TABLE_5_TYPE", 62, 142.45, 0.8, 0.8, 0, ["SKIN_1"]], ["ZOMBIE_TYPE", 225.7, 420.3, 0.7, 0.7, 0, ["SKIN_1"]], ["BUYER_TYPE", 94.75, 361.9, 0.7, 0.7, 0, [""]], ["ZOMBIE_TYPE", 189.7, 227.35, 0.7, 0.7, 0, ["SKIN_1"]]]];
var allBgIndexes = [0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
var allStepsIndexes = [3, 2, 1, 2, 2, 4, 3, 3, 3, 4, 3, 4, 2, 5, 3, 2, 3, 5, 4, 3, 5, 5, 3, 5, 3, 3, 10, 7, 7, 5, 4, 5, 5, 5, 5, 2, 5, 14, 6, 4, 20, 20, 8, 1, 20, 8, 8, 8, 8, 8, 8, 8, 0];
var isEditorDebug = false;
var editorLevelToLoad = 18;
var manifest = [{src:PRELOADER_LOGO, id:"preloaderlogo"}, {src:"bg1.png", id:"bg1"}, {src:"bg2.png", id:"bg2"}, {src:"logo.png", id:"logo_menu"}, {src:"comix.png", id:"comixbg"}, {src:"zombiemarketassets.png", id:"zoespritesheet"}];
var zoeCFG = {"framerate":24, "images":["assets/soccerassets.png"], "frames":[[1310, 1139, 45, 42, 0, 23, 22], [1471, 1139, 45, 42, 0, 23, 22], [1520, 1139, 45, 42, 0, 23, 22], [2, 316, 155, 154, 0, 78, 73], [554, 1139, 276, 48, 0, 129, 20], [582, 740, 95, 94, 0, 46, 44], [781, 740, 93, 92, 0, 45, 43], [200, 740, 95, 103, 0, 44, 43], [1361, 740, 95, 90, 0, 44, 43], [554, 847, 245, 80, 0, 122, 47], [1171, 740, 91, 90, 0, 46, 43], [1076, 740, 91, 90, 0, 46, 43], [1555, 740, 91, 90, 0, 46, 43], [483, 
740, 95, 95, 0, 46, 44], [1266, 740, 91, 90, 0, 45, 43], [1460, 740, 91, 90, 0, 45, 43], [467, 847, 83, 83, 0, 41, 40], [1843, 1139, 32, 36, 0, 0, 0], [529, 939, 280, 68, 0, 137, 33], [1175, 2, 232, 187, 0, 117, 78], [2, 740, 95, 103, 0, 44, 43], [1913, 617, 95, 103, 0, 44, 43], [101, 740, 95, 103, 0, 44, 43], [1411, 2, 321, 160, 0, 161, 247], [681, 740, 96, 94, 0, 50, 44], [269, 847, 99, 85, 0, 51, 47], [277, 939, 248, 71, 0, 126, 34], [1379, 1083, 298, 49, 0, 141, 21], [910, 1191, 170, 26, 0, 84, 
12], [138, 1191, 224, 28, 0, 113, 14], [518, 1191, 182, 28, 0, 93, 14], [704, 1191, 202, 26, 0, 102, 12], [366, 1191, 148, 28, 0, 74, 12], [1084, 1191, 93, 25, 0, 77, 11], [278, 1139, 272, 48, 0, 136, 24], [2, 1139, 272, 48, 0, 136, 24], [1437, 316, 226, 142, 0, 123, 71], [1004, 1139, 302, 43, 0, 150, 20], [427, 2, 267, 271, 0, 128, 148], [946, 2, 225, 192, 0, 114, 104], [698, 2, 217, 217, 0, 109, 108], [2040, 474, 0, 0, 0, 400, 400], [1097, 939, 243, 65, 0, 122, 33], [145, 474, 310, 137, 0, 154, 
34], [910, 1017, 168, 53, 0, 117, 28], [2, 939, 229, 74, 0, 99, 44], [2, 1017, 200, 62, 0, 100, 32], [2012, 939, 29, 50, 0, -4, 0], [1338, 1083, 37, 49, 0, 0, 0], [1298, 1083, 36, 49, 0, -1, 0], [1161, 1083, 38, 50, 0, 1, 0], [1681, 1083, 35, 49, 0, -1, 0], [1079, 1083, 37, 50, 0, 0, 0], [1761, 1083, 37, 49, 0, 0, 0], [1259, 1083, 35, 50, 0, -1, 1], [1720, 1083, 37, 49, 0, 0, 0], [1120, 1083, 37, 50, 0, 0, 1], [1555, 1191, 110, 22, 0, 55, 11], [1756, 740, 90, 90, 0, 0, 0], [813, 939, 135, 68, 0, 
68, 33], [1454, 847, 140, 77, 0, 70, 52], [1482, 939, 134, 64, 0, 67, 32], [1344, 939, 134, 64, 0, 67, 32], [1676, 939, 134, 63, 0, 67, 32], [1360, 617, 110, 109, 0, 55, 54], [569, 617, 116, 115, 0, 57, 58], [2, 617, 120, 119, 0, 60, 59], [328, 617, 116, 117, 0, 58, 59], [1181, 1191, 110, 23, 0, 55, 10], [1910, 1083, 54, 47, 0, 27, 24], [71, 1191, 30, 30, 0, 15, 15], [37, 1191, 30, 31, 0, 15, 15], [388, 1017, 54, 54, 0, 27, 27], [1879, 1139, 111, 36, 0, 55, 12], [1623, 1139, 216, 37, 0, 108, 11], 
[2, 1191, 31, 31, 0, 15, 15], [1994, 1139, 31, 32, 0, 15, 16], [1968, 1083, 52, 46, 0, 26, 24], [1024, 939, 69, 68, 0, 34, 33], [271, 1017, 54, 55, 0, 27, 27], [329, 1017, 55, 54, 0, 27, 27], [834, 1139, 53, 46, 0, 27, 24], [199, 847, 66, 87, 0, 34, 46], [887, 847, 74, 79, 0, 26, 45], [703, 474, 144, 134, 0, 39, 46], [1569, 1139, 50, 38, 0, 26, 21], [1946, 939, 62, 58, 0, 31, 29], [1620, 939, 52, 64, 0, 26, 40], [1882, 939, 60, 61, 0, 28, 38], [1855, 1083, 51, 47, 0, 25, 27], [206, 1017, 61, 62, 
0, 29, 33], [1752, 847, 78, 75, 0, 37, 43], [1663, 847, 85, 77, 0, 39, 44], [372, 847, 91, 84, 0, 43, 46], [974, 740, 98, 91, 0, 44, 49], [2, 847, 101, 88, 0, 45, 47], [1650, 740, 102, 90, 0, 47, 48], [1850, 740, 101, 89, 0, 44, 49], [1410, 1191, 109, 23, 0, 54, 11], [2019, 1017, 25, 26, 0, 12, 14], [2024, 316, 21, 24, 0, 10, 12], [1523, 1191, 28, 23, 0, 16, 10], [1295, 1191, 111, 23, 0, 55, 10], [1889, 1191, 109, 22, 0, 54, 10], [1669, 1191, 216, 22, 0, 108, 11], [1203, 1083, 52, 50, 0, 26, 25], 
[891, 1139, 109, 44, 0, 54, 22], [1359, 1139, 108, 42, 0, 55, 21], [2, 2, 421, 310, 0, 0, 0], [2012, 617, 28, 52, 0, -33, -11], [1082, 1017, 36, 52, 0, -29, -11], [1164, 1017, 36, 52, 0, -29, -11], [1122, 1017, 38, 52, 0, -28, -11], [1356, 1017, 36, 52, 0, -29, -11], [2010, 847, 36, 53, 0, -29, -10], [1204, 1017, 37, 52, 0, -29, -11], [1245, 1017, 38, 52, 0, -28, -11], [586, 1017, 36, 53, 0, -29, -10], [1287, 1017, 65, 52, 0, -17, -8], [1810, 1017, 60, 52, 0, -17, -8], [1396, 1017, 63, 52, 0, -16, 
-11], [1463, 1017, 64, 52, 0, -17, -8], [1010, 1083, 65, 52, 0, -17, -8], [1531, 1017, 64, 52, 0, -17, -8], [698, 1017, 64, 53, 0, -17, -7], [1599, 1017, 65, 52, 0, -17, -8], [1668, 1017, 65, 52, 0, -17, -8], [446, 1017, 64, 53, 0, -17, -7], [1737, 1017, 69, 52, 0, -14, -8], [796, 1083, 64, 52, 0, -14, -11], [938, 1083, 68, 52, 0, -14, -11], [1874, 1017, 68, 52, 0, -14, -11], [1946, 1017, 69, 52, 0, -14, -11], [2, 1083, 68, 52, 0, -14, -11], [838, 1017, 68, 53, 0, -14, -10], [74, 1083, 69, 52, 0, 
-14, -11], [147, 1083, 69, 52, 0, -14, -11], [766, 1017, 68, 53, 0, -14, -10], [220, 1083, 69, 52, 0, -14, -11], [293, 1083, 64, 52, 0, -14, -11], [361, 1083, 68, 52, 0, -14, -11], [433, 1083, 68, 52, 0, -14, -11], [505, 1083, 69, 52, 0, -14, -11], [578, 1083, 68, 52, 0, -14, -11], [514, 1017, 68, 53, 0, -14, -10], [650, 1083, 69, 52, 0, -14, -11], [723, 1083, 69, 52, 0, -14, -11], [626, 1017, 68, 53, 0, -14, -10], [864, 1083, 70, 52, 0, -13, -11], [1934, 847, 72, 72, 0, 36, 36], [1118, 847, 61, 
77, 0, 30, 38], [1598, 847, 61, 77, 0, 30, 38], [1248, 847, 61, 77, 0, 30, 38], [1313, 847, 61, 77, 0, 30, 38], [1183, 847, 61, 77, 0, 30, 38], [1736, 2, 211, 156, 0, 0, 1], [1996, 474, 40, 89, 0, 19, 73], [1856, 617, 53, 103, 0, 27, 77], [248, 617, 76, 118, 0, 39, 81], [1124, 474, 97, 131, 0, 50, 84], [600, 474, 99, 135, 0, 51, 87], [1920, 316, 100, 140, 0, 51, 91], [1814, 316, 102, 141, 0, 52, 91], [1329, 316, 104, 143, 0, 53, 92], [1070, 316, 106, 146, 0, 54, 93], [1951, 2, 76, 118, 0, 40, 93], 
[1280, 617, 76, 112, 0, 40, 94], [1588, 617, 76, 108, 0, 40, 95], [1668, 617, 75, 106, 0, 39, 97], [405, 740, 74, 102, 0, 39, 98], [1955, 740, 73, 89, 0, 38, 100], [965, 847, 73, 79, 0, 38, 92], [1042, 847, 72, 78, 0, 37, 93], [1378, 847, 72, 77, 0, 37, 94], [1834, 847, 56, 75, 0, 22, 94], [235, 939, 38, 74, 0, 21, 95], [1894, 847, 36, 74, 0, 20, 96], [2032, 740, 9, 9, 0, 0, 83], [1814, 939, 64, 63, 0, 32, 32], [803, 847, 80, 79, 0, 40, 40], [1747, 617, 105, 105, 0, 53, 53], [1492, 474, 126, 125, 
0, 63, 63], [989, 474, 131, 131, 0, 66, 66], [459, 474, 137, 137, 0, 69, 69], [314, 316, 148, 148, 0, 75, 74], [161, 316, 149, 148, 0, 75, 74], [617, 316, 148, 147, 0, 75, 74], [466, 316, 147, 147, 0, 74, 74], [769, 316, 147, 147, 0, 74, 74], [920, 316, 146, 146, 0, 74, 73], [1180, 316, 145, 144, 0, 73, 72], [1667, 316, 143, 142, 0, 72, 71], [2, 474, 139, 139, 0, 70, 70], [851, 474, 134, 133, 0, 68, 67], [1225, 474, 131, 130, 0, 66, 65], [1360, 474, 128, 128, 0, 65, 64], [1622, 474, 125, 124, 0, 
63, 62], [105, 1191, 29, 29, 0, 15, 15], [1802, 1083, 49, 48, 0, 25, 25], [952, 939, 68, 68, 0, 35, 35], [107, 847, 88, 88, 0, 45, 45], [878, 740, 92, 91, 0, 46, 46], [299, 740, 102, 102, 0, 51, 51], [1474, 617, 110, 109, 0, 55, 55], [1164, 617, 112, 113, 0, 56, 57], [689, 617, 114, 115, 0, 57, 58], [1046, 617, 114, 114, 0, 57, 57], [927, 617, 115, 115, 0, 58, 58], [807, 617, 116, 115, 0, 58, 58], [448, 617, 117, 117, 0, 59, 59], [126, 617, 118, 118, 0, 59, 59], [1874, 474, 118, 119, 0, 59, 60], 
[1751, 474, 119, 119, 0, 60, 60], [919, 2, 23, 216, 0, 108, 11], [2031, 2, 13, 12, 0, 7, 6]], "animations":{0:{"speed":1, "frames":[55]}, 2:{"speed":1, "frames":[48]}, 3:{"speed":1, "frames":[49]}, 4:{"speed":1, "frames":[50]}, 5:{"speed":1, "frames":[51, 51]}, 6:{"speed":1, "frames":[56]}, 7:{"speed":1, "frames":[52]}, 8:{"speed":1, "frames":[53]}, 9:{"speed":1, "frames":[54]}, 1:{"speed":1, "frames":[47]}, "btnbaseup":{"speed":1, "frames":[15]}, "moregames2v":{"speed":1, "frames":[26]}, "achievdesc3":{"speed":1, 
"frames":[30]}, "pausetitle":{"speed":1, "frames":[9]}, "STATIC_BALK_2_TYPE":{"speed":1, "frames":[74]}, "GLASS_BOX_TYPE":{"speed":1, "frames":[76]}, "DECOR_HELP_2_TYPE":{"speed":1, "frames":[65]}, "playbtnup":{"speed":1, "frames":[3]}, "newachievbgv":{"speed":1, "frames":[38]}, "achievbtn":{"speed":1, "frames":[14]}, "particle3v":{"speed":1, "frames":[2]}, "completestar":{"speed":1, "frames":[25, 25]}, "achievdesc2":{"speed":1, "frames":[32]}, "nextpagebtn":{"speed":1, "frames":[6]}, "achievclosed":{"speed":1, 
"frames":[33]}, "newachievtitle":{"speed":1, "frames":[37]}, "lvlcompletebgnew":{"speed":1, "frames":[23]}, "LAND_TYPE_5":{"speed":1, "frames":[63]}, "DECOR_HELP_1_TYPE":{"speed":1, "frames":[64]}, "creditstitle":{"speed":1, "frames":[42]}, "lvlLabelStar0":{"speed":1, "frames":[7]}, "LAND_TYPE_2":{"speed":1, "frames":[60]}, "levelbuttonlocked":{"speed":1, "frames":[8]}, "HARD_BOX_TYPE":{"speed":1, "frames":[75]}, "LAND_TYPE":{"speed":1, "frames":[59]}, "LAND_TYPE_4":{"speed":1, "frames":[62]}, "achievdesc4":{"speed":1, 
"frames":[31]}, "lvlnum26":{"speed":1, "frames":[134]}, "particle1v":{"speed":1, "frames":[0]}, "lvlnum27":{"speed":1, "frames":[135]}, "achievelk":{"speed":1, "frames":[36]}, "lvlnum28":{"speed":1, "frames":[136]}, "restartbtn":{"speed":1, "frames":[13]}, "STATIC_BALK_1_TYPE_2":{"speed":1, "frames":[73]}, "pausebtn":{"speed":1, "frames":[16]}, "lvlnum25":{"speed":1, "frames":[133]}, "biglimetxt":{"speed":1, "frames":[43]}, "achievlockedbg":{"speed":1, "frames":[35]}, "achievdesc1":{"speed":1, "frames":[29]}, 
"lvlnum22":{"speed":1, "frames":[130]}, "GLASS_TRIANGLE_TYPE":{"speed":1, "frames":[77]}, "lvlnum24":{"speed":1, "frames":[132]}, "tint2":{"speed":1, "frames":[58]}, "lvlnum23":{"speed":1, "frames":[131]}, "lvlnum21":{"speed":1, "frames":[129]}, "lvlnum30":{"speed":1, "frames":[138]}, "levelreadylabel":{"speed":1, "frames":[44]}, "radugav":{"speed":1, "frames":[40, 41]}, "lvlnum18":{"speed":1, "frames":[126]}, "musicoffbtn":{"speed":1, "frames":[12]}, "backbtn":{"speed":1, "frames":[5]}, "lvlnum32":{"speed":1, 
"frames":[140]}, "lvlnum19":{"speed":1, "frames":[127]}, "lvlnum17":{"speed":1, "frames":[125]}, "lvlnum33":{"speed":1, "frames":[141]}, "lvlnum15":{"speed":1, "frames":[123]}, "lvlnum34":{"speed":1, "frames":[142]}, "lvlnum20":{"speed":1, "frames":[128]}, "nextlevelwin":{"speed":1, "frames":[24]}, "lvlnum29":{"speed":1, "frames":[137]}, "lvlnum16":{"speed":1, "frames":[124]}, "lvlnum36":{"speed":1, "frames":[144]}, "achievback":{"speed":1, "frames":[34]}, "lvlnum37":{"speed":1, "frames":[145]}, 
"levelselecttitle":{"speed":1, "frames":[4]}, "lvlnum11":{"speed":1, "frames":[119]}, "lvlnum38":{"speed":1, "frames":[146]}, "lvlnum10":{"speed":1, "frames":[118]}, "lvlnum31":{"speed":1, "frames":[139]}, "lvlnum13":{"speed":1, "frames":[121]}, "lvlnum12":{"speed":1, "frames":[120]}, "HARD_RECT_TYPE":{"speed":1, "frames":[68]}, "lvlnum14":{"speed":1, "frames":[122]}, "lvlnum9":{"speed":1, "frames":[117]}, "TELEPORT_TYPE":{"speed":1, "frames":[149]}, "lvlnum7":{"speed":1, "frames":[115]}, "FAN_TYPE":{"speed":1, 
"frames":[150]}, "lvlnum6":{"speed":1, "frames":[114]}, "FAN_TYPE_ON":{"speed":1, "frames":[151, 152, 153, 154, 151, 152, 153, 154, 151, 151]}, "lvlnum8":{"speed":1, "frames":[116]}, "lvlnum35":{"speed":1, "frames":[143]}, "lvlnum5":{"speed":1, "frames":[113]}, "smallwinv":{"speed":1, "frames":[155]}, "spelelogo":{"speed":1, "frames":[46]}, "DECOR_HELP_4_TYPE":{"speed":1, "frames":[67, 67, 67, 67]}, "lvlnum2":{"speed":1, "frames":[110]}, "lvlLabelStar2":{"speed":1, "frames":[21]}, "HARD_RECT_TYPE_2":{"speed":1, 
"frames":[68]}, "DECOR_HELP_3_TYPE":{"speed":1, "frames":[66]}, "STATIC_BOX_TYPE_2":{"speed":1, "frames":[71]}, "lvlLabelStar3":{"speed":1, "frames":[22]}, "lvlnum40":{"speed":1, "frames":[148]}, "TELEGA_TYPE_2":{"speed":1, "frames":[107, 107]}, "LAND_TYPE_3":{"speed":1, "frames":[61]}, "lvlnum4":{"speed":1, "frames":[112]}, "STATIC_BOX_TYPE":{"speed":1, "frames":[70, 70, 70, 70, 70, 70, 70, 70, 70, 70]}, "tryagaintitle":{"speed":1, "frames":[18]}, "lvlnum1":{"speed":1, "frames":[109]}, "bgwinv":{"speed":1, 
"frames":[108]}, "DYNAMIC_CIRCLE_TYPE":{"speed":1, "frames":[105]}, "STATIC_BALK_1_TYPE":{"speed":1, "frames":[57]}, "TELEGA_TYPE":{"speed":1, "frames":[106]}, "DYNAMIC_RECT_TYPE_2":{"speed":1, "frames":[103]}, "lvlLabelStar1":{"speed":1, "frames":[20]}, "DYNAMIC_RECT_TYPE":{"speed":1, "frames":[102]}, "musiconbtn":{"speed":1, "frames":[11]}, "DYNAMIC_RECT_2_TYPE":{"speed":1, "frames":[104]}, "tintbg":{"speed":1, "frames":[17]}, "particleglass3":{"speed":1, "frames":[101]}, "particle2v":{"speed":1, 
"frames":[1]}, "particleglass1":{"speed":1, "frames":[99]}, "achievdesc0":{"speed":1, "frames":[28]}, "lvlnum3":{"speed":1, "frames":[111]}, "GLASS_BLOCK_TYPE":{"speed":1, "frames":[98]}, "completeelk":{"speed":1, "frames":[39]}, "lvlnum39":{"speed":1, "frames":[147]}, "bombexplosionv":{"speed":1, "frames":[88, 89, 90, 91, 92, 92, 93, 93, 94, 94, 95, 95, 96, 96, 97, 97]}, "achievmenutitle":{"speed":1, "frames":[27]}, "loosemacaque":{"speed":1, "frames":[19]}, "BONUS_STAR_TYPE_2":{"speed":1, "frames":[86]}, 
"JOINT_PIVOT_TYPE":{"speed":1, "frames":[214]}, "particleglass2":{"speed":1, "frames":[100]}, "BONUS_STAR_TYPE":{"speed":1, "frames":[85]}, "BOMB_TYPE":{"speed":1, "frames":[87]}, "AIM_TYPE_MOVABLE":{"speed":1, "frames":[84]}, "AIM_TYPE":{"speed":1, "frames":[82]}, "splashlogo":{"speed":1, "frames":[45]}, "HARD_TRIANGLE_TYPE":{"speed":1, "frames":[69]}, "parteffectv1":{"speed":1, "frames":[156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177]}, 
"AIM_BACK":{"speed":1, "frames":[83]}, "parteffectv2":{"speed":1, "frames":[178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 41]}, "quitbtn":{"speed":1, "frames":[10]}, "DYNAMIC_BOX_TYPE_3":{"speed":1, "frames":[72]}, "parteffectv3":{"speed":1, "frames":[197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 41, 41, 41]}, "DYNAMIC_TRIANGLE_TYPE":{"speed":1, "frames":[81, 81, 81, 81, 81]}, "DYNAMIC_BOX_TYPE":{"speed":1, "frames":[79]}, 
"DYNAMIC_ANGLE_TYPE":{"speed":1, "frames":[213]}, "HERO_TYPE":{"speed":1, "frames":[78]}, "DYNAMIC_BOX_TYPE_2":{"speed":1, "frames":[80]}, "STATIC_BOX_TYPE_3":{"speed":1, "frames":[72, 71, 71]}}};
var interfaceCFG = {};
var bgCFG = {"framerate":24, "images":["assets/cheapbg.jpg"], "frames":[[0, 270, 401, 270, 0, 0, 0], [401, 270, 401, 270, 0, 0, 0], [0, 540, 401, 270, 0, 0, 0], [401, 0, 401, 270, 0, 0, 0], [0, 0, 401, 270, 0, 0, 0]], "animations":{"bigbg":{"speed":1, "frames":[0, 1, 2, 3, 4]}}};
var PART_STAR_TYPE = 1;
var PART_CLOUD_TYPE = 2;
var PART_NUM_TYPE = 3;
var PART_INSTRUCTION_TYPE = 4;
var PART_GLASS_TYPE = 5;
var PART_ACHIEV_TYPE = 6;
var MAX_PARTICLES_ON_SCREEN = 12;
(function(window) {
  function ParticleBase(type, parent, scale) {
    this.initialize(type, parent, scale)
  }
  var p = ParticleBase.prototype;
  p.initialize = function(type, parent, scale) {
    var bmpAnimation = new createjs.Sprite(zoeSS);
    bmpAnimation.snapToPixel = true;
    bmpAnimation.baseBlock = this;
    this.vis = bmpAnimation;
    this.reset(type, parent, scale)
  };
  p.reset = function(type, parent, scale) {
    this.type = type;
    if(this.vis.parent != parent) {
      removeFromParent(this.vis)
    }
    createjs.Tween.removeTweens(this.vis);
    this.parent = parent;
    this.vis.alpha = 1;
    this.vis.mouseEnabled = false;
    this.speedX = 0;
    this.speedY = 0;
    this.moveTarget = null;
    this.speedA = 0;
    this.speedScale = 0.05;
    this.maxScale = 1.2;
    this.isPrerendered = false;
    this.speedAlpha = 0.08;
    this.gravity = 0.6;
    this.isNum = false;
    this.beforeHideTimer = 0.1;
    this.isInstruction = false;
    this.isNeedDispose = false;
    this.vis.spriteSheet = zoeSS;
    deleteCache(this.vis);
    var frame = "numb0";
    if(type == PART_STAR_TYPE) {
      frame = Math.random() > 0.7 ? "particle1v" : Math.random() > 0.5 ? "particle3v" : "particle2v"
    }else {
      if(type == PART_NUM_TYPE || type == PART_ACHIEV_TYPE) {
        this.isNum = true
      }else {
        if(type == PART_CLOUD_TYPE) {
          this.gravity = 0;
          frame = Math.random() > 0.5 ? "cloud1v" : "cloud2v"
        }else {
          if(type == PART_INSTRUCTION_TYPE) {
            this.isInstruction = true
          }else {
            if(type === PART_GLASS_TYPE) {
              frame = Math.random() > 0.7 ? "particleglass1" : Math.random() > 0.5 ? "particleglass2" : "particleglass3"
            }
          }
        }
      }
    }
    this.vis.gotoAndStop(frame);
    this.scale = scale;
    this.updateVisionScale();
    parent.addChild(this.vis)
  };
  p.setPos = function(x, y) {
    this.vis.x = x;
    this.vis.y = y
  };
  p.setNum = function(num) {
    this.beforeHideTimer = 10;
    this.speedAlpha = 0.03;
    this.gravity = 0;
    this.vis.rotation = 0;
    this.vis.gotoAndStop("PART_" + num)
  };
  p.setFrame = function(frame, isPlay) {
    this.gravity = 0;
    this.vis.rotation = 0;
    if(isPlay) {
      this.vis.gotoAndPlay(frame)
    }else {
      this.vis.gotoAndStop(frame)
    }
  };
  p.tick = function() {
    if(this.isNeedDispose) {
      return
    }
    if(this.moveTarget) {
      this.vis.x = this.moveTarget.x;
      this.vis.y = this.moveTarget.y
    }else {
      this.vis.x += this.speedX * dtScale;
      this.vis.y += this.speedY * dtScale;
      this.speedY += this.gravity * dtScale;
      this.vis.rotation += this.speedA * dtScale
    }
    this.beforeHideTimer -= dtScale;
    if(this.beforeHideTimer > 0) {
      return
    }
    if(this.isPrerendered) {
      this.isNeedDispose = true;
      return
    }
    if(this.isNum) {
      this.vis.alpha -= this.speedAlpha * dtScale
    }else {
      if(this.isInstruction) {
        return
      }else {
        this.vis.visible = true;
        this.vis.scaleX += this.speedScale * dtScale;
        if(this.vis.scaleX > this.maxScale) {
          this.vis.alpha -= this.speedAlpha * dtScale
        }
        this.vis.scaleY = this.vis.scaleX
      }
    }
    if(this.vis.alpha < 0.01) {
      this.isNeedDispose = true
    }
  };
  p.updateVisionScale = function() {
    this.vis.scaleX = this.vis.scaleY = this.scale
  };
  p.dispose = function() {
    if(isArrayContains(allParts, this)) {
      allParts.splice(allParts.indexOf(this, 0), 1)
    }
    addToDisposedParts(this);
    this.vis.removeAllEventListeners();
    this.vis.stop();
    removeFromParent(this.vis)
  };
  window.ParticleBase = ParticleBase
})(window);
var allParts = [];
var disposedParts = [];
function initParticleManager() {
  container.addChild(particleContainer)
}
var partSin, partCos, partScale;
function createPartExplode(x, y, partsNum, partType, container, paramsIndex) {
  var p;
  for(var i = 0;i < partsNum;i++) {
    var dx = Math.PI * 2 / partsNum;
    var angle = i * dx;
    partSin = Math.cos(angle);
    partCos = Math.sin(angle);
    p = createPart(partType, x, y, 1, container ? container : particleContainer);
    if(!p) {
      return
    }
    setParticleParamsByIndex(p, paramsIndex ? paramsIndex : 0)
  }
}
function setParticleParamsByIndex(p, index) {
  var maxSpeed = 1.3;
  p.gravity = 0;
  p.speedA = Math.random() * 20;
  if(index === 0) {
    p.maxScale = 0.7;
    p.beforeHideTimer = 0.2 * FPS;
    partScale = 0.2 + Math.random() * 0.2
  }else {
    if(index === 1) {
      maxSpeed = 4;
      p.maxScale = 1.3;
      p.beforeHideTimer = 0.3 * FPS;
      p.gravity = 0;
      p.speedAlpha = 0.05;
      p.speedA = Math.random() * 20;
      partScale = 0.4 + Math.random() * 0.6
    }else {
      if(index === 2) {
        maxSpeed = 2;
        p.maxScale = 1.3;
        p.vis.alpha = 1;
        p.beforeHideTimer = 0.3 * FPS;
        p.speedA = Math.random() * 20;
        partScale = 0.4 + Math.random() * 0.6
      }else {
        if(index === 3) {
          maxSpeed = 1.3;
          p.gravity = 0;
          p.speedA = Math.random() * 20;
          p.maxScale = 0.7;
          p.beforeHideTimer = 0.1 * FPS;
          p.gravity = 0;
          p.speedAlpha = 0.05;
          partScale = 0.6;
          p.vis.alpha = 1
        }
      }
    }
  }
  p.vis.scaleX = p.vis.scaleY = partScale;
  p.speedX = (maxSpeed + Math.random() * maxSpeed) * partCos;
  p.speedY = (maxSpeed + Math.random() * maxSpeed) * partSin
}
function createDiePart(x, y) {
  var p = createPart(PART_NUM_TYPE, x, y, 1, particleContainer);
  if(!p) {
    return
  }
  p.setNum(11);
  p.setFrame("deathanimv", true);
  p.speedAlpha = 0.05;
  p.beforeHideTimer = 1.5 * FPS;
  p.speedX = 0;
  p.speedY = -1;
  p.speedA = 0
}
function createGoodPlayExplode(y, effectVersion) {
  var p;
  var partsNum = 8;
  var x = effectVersion == 0 ? 90 : -120;
  for(var i = 0;i < partsNum;i++) {
    var dx = Math.PI / 2 / partsNum;
    var angle = i * dx - Math.PI / 4;
    if(effectVersion > 0) {
      angle += Math.PI
    }
    var cos = Math.cos(angle);
    var sin = Math.sin(angle);
    var scale = 0.2 + Math.random() * 0.2;
    p = createPart(PART_STAR_TYPE, x, 0, scale, monsterCont);
    if(!p) {
      return
    }
    p.setFrame("particle1v");
    p.speedAlpha = 0.1;
    p.speedScale = 0.02;
    p.vis.visible = false;
    p.beforeHideTimer = 0.5 * FPS;
    p.maxScale = 0.6;
    var maxSpeed = 1.5;
    p.speedX = (maxSpeed + Math.random() * maxSpeed) * cos;
    p.speedY = (maxSpeed + Math.random() * maxSpeed) * sin;
    p.speedA = Math.random() * 20
  }
}
function createNumPart(x, y, num) {
  var scale = 0.8;
  var p = createPart(PART_NUM_TYPE, x, y, scale, particleContainer);
  if(!p) {
    return
  }
  p.setNum(num);
  p.beforeHideTimer = 0.2 * FPS;
  p.speedX = 0;
  p.speedY = -0.8;
  p.speedA = 0
}
function createPrerenderedPart(x, y, scale, frame, time, moveTarget, speed, rotation, isLooped) {
  var p = createPart(PART_NUM_TYPE, x, y, scale, particleContainer);
  if(!p) {
    return
  }
  p.setFrame(frame, true);
  if(!isLooped) {
    setNextAnimation(p.vis, "")
  }
  if(speed) {
    setAnimationSpeed(p.vis, speed)
  }
  p.isPrerendered = true;
  if(moveTarget) {
    p.moveTarget = moveTarget
  }
  p.beforeHideTimer = time * GAME_FPS;
  p.speedX = 0;
  p.speedY = 0;
  p.speedA = 0;
  p.gravity = 0;
  p.vis.rotation = rotation ? rotation : 0
}
function createGlassRectExplode(x, y, scale, rotation) {
  var p;
  var partsNum = 5;
  for(var i = 0;i < partsNum;i++) {
    var angle = rotation * Math.PI / 180;
    var cos = Math.cos(angle);
    var sin = Math.sin(angle);
    var distance = (i * (122 / partsNum) - 60) * scale;
    p = createPart(PART_GLASS_TYPE, x + distance * cos, y + distance * sin, 1, particleContainer);
    if(!p) {
      return
    }
    var maxSpeed = 1.3;
    p.gravity = 0;
    p.speedA = Math.random() * 20;
    p.maxScale = 0.7;
    p.beforeHideTimer = 0.1 * FPS;
    p.gravity = 0;
    p.speedAlpha = 0.05;
    partScale = 0.6;
    p.vis.scaleX = p.vis.scaleY = partScale;
    p.speedX = maxSpeed - Math.random() * maxSpeed * 2;
    p.speedY = maxSpeed - Math.random() * maxSpeed * 2
  }
}
function createAwesomePart() {
  var posY = topVisionLine + viewportH / 2;
  var p = createPart(PART_NUM_TYPE, 160, posY, 1, particleContainer);
  if(!p) {
    return
  }
  p.setNum(11);
  p.speedAlpha = 1;
  p.beforeHideTimer = 1.5 * FPS;
  p.speedX = 0;
  p.speedY = 0;
  p.speedA = 0;
  p.vis.rotation = -360;
  p.vis.scaleX = p.vis.scaleY = 0.1;
  createjs.Tween.get(p.vis, {override:true}).to({rotation:0, scaleX:1, scaleY:1}, 600).wait(600).to({alpha:0}, 200)
}
function createAchievPart(achievNum) {
  var posY = 210;
  var waitTime = 10;
  var index = 0;
  var p;
  for(var i = 0;i < allParts.length;i++) {
    p = allParts[i];
    if(p.type === PART_ACHIEV_TYPE) {
      posY = p.vis.y - 50;
      waitTime += 200;
      index++
    }
  }
  p = createPart(PART_ACHIEV_TYPE, -130, posY, 0.8, container);
  if(!p) {
    return
  }
  p.setFrame("achievdesc" + achievNum);
  p.speedAlpha = 1;
  p.beforeHideTimer = 3.2 * FPS + 0.2 * index;
  p.speedX = 0;
  p.speedY = 0;
  p.speedA = 0;
  p.vis.rotation = 0;
  p.vis.scaleX = p.vis.scaleY = 0.7;
  p.vis.alpha = 1;
  createjs.Tween.get(p.vis, {override:true}).wait(waitTime).to({x:5}, 600, menuEase).wait(2E3).to({x:-130}, 400, createjs.Ease.sineIn)
}
var allPartsLenght = 0;
function createPart(type, x, y, scale, container) {
  var part;
  allPartsLenght = allParts.length;
  if(allPartsLenght > MAX_PARTICLES_ON_SCREEN) {
    for(var i = 0;i < allPartsLenght;i++) {
      if(allParts[i].type === PART_STAR_TYPE) {
        part = allParts[i];
        break
      }
    }
    if(!part) {
      part = allParts[0]
    }
    part.reset(type, container, scale)
  }else {
    part = gePartFromPool(type, container, scale)
  }
  part.setPos(x, y);
  if(!isArrayContains(allParts, part)) {
    allParts.push(part)
  }
  return part
}
function addToDisposedParts(part) {
  if(!isArrayContains(disposedParts, part)) {
    disposedParts.push(part)
  }
}
function gePartFromPool(type, container, scale) {
  if(disposedParts.length > 0) {
    var db = disposedParts.pop();
    db.reset(type, container, scale);
    return db
  }else {
    return new ParticleBase(type, container, scale)
  }
}
var partLength = 0;
var currPart = null;
var disposeNeededParts = [];
function updatePartManager() {
  partLength = allParts.length;
  for(var i = 0;i < partLength;i++) {
    currPart = allParts[i];
    currPart.tick();
    if(currPart.isNeedDispose) {
      disposeNeededParts.push(currPart)
    }
  }
  while(disposeNeededParts.length > 0) {
    disposeNeededParts.pop().dispose()
  }
}
(function() {
  Object.create = Object.create || function(t) {
    function i() {
    }
    return i.prototype = t, new i
  };
  var t;
  "undefined" == typeof exports ? (t = {}, "object" == typeof window && (window.cp = t)) : t = exports;
  var i, e, s = function(t, i) {
    if(!t) {
      throw Error("Assertion failed: " + i);
    }
  }, n = function(t, i) {
    !t && (console && (console.warn && (console.warn("ASSERTION FAILED: " + i), console.trace && console.trace())))
  }, r = function(t, i) {
    return i > t ? t : i
  }, o = function(t, i) {
    return t > i ? t : i
  };
  "object" == typeof window && window.navigator.userAgent.indexOf("Firefox") > -1 ? (i = Math.min, e = Math.max) : (i = r, e = o);
  var a = function(t, i) {
    return i > t ? t + " " + i : i + " " + t
  }, h = function(t, i) {
    for(var e = 0;t.length > e;e++) {
      if(t[e] === i) {
        return t[e] = t[t.length - 1], t.length--, void 0
      }
    }
  }, c = function(t, i, e) {
    var s = A(i, e), n = f(x(s, A(t, e)) / N(s));
    return S(e, B(s, n))
  }, p = function(t, i, e, s, n, r) {
    var o = e - n, a = s - r, h = f(m(o, a, t - n, i - r) / F(o, a));
    return new d(n + o * h, r + a * h)
  };
  t.momentForCircle = function(t, i, e, s) {
    return t * (0.5 * (i * i + e * e) + N(s))
  }, t.areaForCircle = function(t, i) {
    return Math.PI * Math.abs(t * t - i * i)
  }, t.momentForSegment = function(t, i, e) {
    var s = B(S(i, e), 0.5);
    return t * (q(e, i) / 12 + N(s))
  }, t.areaForSegment = function(t, i, e) {
    return e * (Math.PI * e + 2 * O(t, i))
  }, t.momentForPoly = function(t, i, e) {
    for(var s = 0, n = 0, r = i.length, o = 0;r > o;o += 2) {
      var a = i[o] + e.x, h = i[o + 1] + e.y, c = i[(o + 2) % r] + e.x, p = i[(o + 3) % r] + e.y, u = k(c, p, a, h), l = m(a, h, a, h) + m(a, h, c, p) + m(c, p, c, p);
      s += u * l, n += u
    }
    return t * s / (6 * n)
  }, t.areaForPoly = function(t) {
    for(var i = 0, e = 0, s = t.length;s > e;e += 2) {
      i += C(new d(t[e], t[e + 1]), new d(t[(e + 2) % s], t[(e + 3) % s]))
    }
    return-i / 2
  }, t.centroidForPoly = function(t) {
    for(var i = 0, e = new d(0, 0), s = 0, n = t.length;n > s;s += 2) {
      var r = new d(t[s], t[s + 1]), o = new d(t[(s + 2) % n], t[(s + 3) % n]), a = C(r, o);
      i += a, e = S(e, B(S(r, o), a))
    }
    return B(e, 1 / (3 * i))
  }, t.recenterPoly = function(i) {
    for(var e = t.centroidForPoly(i), s = 0;i.length > s;s += 2) {
      i[s] -= e.x, i[s + 1] -= e.y
    }
  }, t.momentForBox = function(t, i, e) {
    return t * (i * i + e * e) / 12
  }, t.momentForBox2 = function(i, e) {
    var s = e.r - e.l, n = e.t - e.b, r = B([e.l + e.r, e.b + e.t], 0.5);
    return t.momentForBox(i, s, n) + i * N(r)
  };
  var u = t.loopIndexes = function(t) {
    var i, e, s, n, r = 0, o = 0;
    i = s = t[0], e = n = t[1];
    for(var a = t.length >> 1, h = 1;a > h;h++) {
      var c = t[2 * h], p = t[2 * h + 1];
      i > c || c == i && e > p ? (i = c, e = p, r = h) : (c > s || c == s && p > n) && (s = c, n = p, o = h)
    }
    return[r, o]
  }, l = function(t, i, e) {
    var s = t[2 * i];
    t[2 * i] = t[2 * e], t[2 * e] = s, s = t[2 * i + 1], t[2 * i + 1] = t[2 * e + 1], t[2 * e + 1] = s
  }, b = function(t, i, e, s, n, r) {
    if(0 === e) {
      return 0
    }
    for(var o = 0, a = i, h = A(n, s), c = r * g(h), p = i, u = i + e - 1;u >= p;) {
      var b = new d(t[2 * p], t[2 * p + 1]), y = C(h, A(b, s));
      y > c ? (y > o && (o = y, a = p), p++) : (l(t, p, u), u--)
    }
    return a != i && l(t, i, a), p - i
  }, y = function(t, i, e, s, n, r, o, a) {
    if(0 > s) {
      return 0
    }
    if(0 == s) {
      return i[2 * a] = r.x, i[2 * a + 1] = r.y, 1
    }
    var h = b(i, e, s, n, r, t), c = new d(i[2 * e], i[2 * e + 1]), p = y(t, i, e + 1, h - 1, n, c, r, a), u = a + p++;
    i[2 * u] = r.x, i[2 * u + 1] = r.y;
    var l = b(i, e + h, s - h, r, o, t), v = new d(i[2 * (e + h)], i[2 * (e + h) + 1]);
    return p + y(t, i, e + h + 1, l - 1, r, v, o, a + p)
  };
  t.convexHull = function(t, i, e) {
    if(i) {
      for(var s = 0;t.length > s;s++) {
        i[s] = t[s]
      }
    }else {
      i = t
    }
    var r = u(t), o = r[0], a = r[1];
    if(o == a) {
      return i.length = 2, i
    }
    l(i, 0, o), l(i, 1, 0 == a ? o : a);
    var h = new d(i[0], i[1]), c = new d(i[2], i[3]), p = t.length >> 1, b = y(e, i, 2, p - 2, h, c, h, 1) + 1;
    return i.length = 2 * b, n(ti(i), "Internal error: cpConvexHull() and cpPolyValidate() did not agree.Please report this error with as much info as you can."), i
  };
  var v = function(t, s, n) {
    return i(e(t, s), n)
  }, f = function(t) {
    return e(0, i(t, 1))
  }, d = t.Vect = function(t, i) {
    this.x = t, this.y = i
  };
  t.v = function(t, i) {
    return new d(t, i)
  };
  var _ = t.vzero = new d(0, 0), x = t.v.dot = function(t, i) {
    return t.x * i.x + t.y * i.y
  }, m = function(t, i, e, s) {
    return t * e + i * s
  }, g = t.v.len = function(t) {
    return Math.sqrt(x(t, t))
  }, w = t.v.len2 = function(t, i) {
    return Math.sqrt(t * t + i * i)
  };
  t.v.eql = function(t, i) {
    return t.x === i.x && t.y === i.y
  };
  var S = t.v.add = function(t, i) {
    return new d(t.x + i.x, t.y + i.y)
  };
  d.prototype.add = function(t) {
    return this.x += t.x, this.y += t.y, this
  };
  var A = t.v.sub = function(t, i) {
    return new d(t.x - i.x, t.y - i.y)
  };
  d.prototype.sub = function(t) {
    return this.x -= t.x, this.y -= t.y, this
  };
  var j = t.v.neg = function(t) {
    return new d(-t.x, -t.y)
  };
  d.prototype.neg = function() {
    return this.x = -this.x, this.y = -this.y, this
  };
  var B = t.v.mult = function(t, i) {
    return new d(t.x * i, t.y * i)
  };
  d.prototype.mult = function(t) {
    return this.x *= t, this.y *= t, this
  };
  var C = t.v.cross = function(t, i) {
    return t.x * i.y - t.y * i.x
  }, k = function(t, i, e, s) {
    return t * s - i * e
  }, M = t.v.perp = function(t) {
    return new d(-t.y, t.x)
  };
  t.v.pvrperp = function(t) {
    return new d(t.y, -t.x)
  };
  var I = t.v.project = function(t, i) {
    return B(i, x(t, i) / N(i))
  };
  d.prototype.project = function(t) {
    return this.mult(x(this, t) / N(t)), this
  };
  var P = t.v.rotate = function(t, i) {
    return new d(t.x * i.x - t.y * i.y, t.x * i.y + t.y * i.x)
  };
  d.prototype.rotate = function(t) {
    return this.x = this.x * t.x - this.y * t.y, this.y = this.x * t.y + this.y * t.x, this
  };
  var L = t.v.unrotate = function(t, i) {
    return new d(t.x * i.x + t.y * i.y, t.y * i.x - t.x * i.y)
  }, N = t.v.lengthsq = function(t) {
    return x(t, t)
  }, F = t.v.lengthsq2 = function(t, i) {
    return t * t + i * i
  }, Q = t.v.lerp = function(t, i, e) {
    return S(B(t, 1 - e), B(i, e))
  }, T = t.v.normalize = function(t) {
    return B(t, 1 / g(t))
  }, R = t.v.normalize_safe = function(t) {
    return 0 === t.x && 0 === t.y ? _ : T(t)
  }, V = t.v.clamp = function(t, i) {
    return x(t, t) > i * i ? B(T(t), i) : t
  };
  t.v.lerpconst = function(t, i, e) {
    return S(t, V(A(i, t), e))
  };
  var O = t.v.dist = function(t, i) {
    return g(A(t, i))
  }, q = t.v.distsq = function(t, i) {
    return N(A(t, i))
  };
  t.v.near = function(t, i, e) {
    return e * e > q(t, i)
  };
  var E = t.v.slerp = function(t, i, e) {
    var s = Math.acos(x(t, i));
    if(s) {
      var n = 1 / Math.sin(s);
      return S(B(t, Math.sin((1 - e) * s) * n), B(i, Math.sin(e * s) * n))
    }
    return t
  };
  t.v.slerpconst = function(t, e, s) {
    var n = Math.acos(x(t, e));
    return E(t, e, i(s, n) / n)
  }, t.v.forangle = function(t) {
    return new d(Math.cos(t), Math.sin(t))
  }, t.v.toangle = function(t) {
    return Math.atan2(t.y, t.x)
  }, t.v.str = function(t) {
    return"(" + t.x.toFixed(3) + ", " + t.y.toFixed(3) + ")"
  };
  var H = 0, D = t.BB = function(t, i, e, s) {
    this.l = t, this.b = i, this.r = e, this.t = s, H++
  };
  t.bb = function(t, i, e, s) {
    return new D(t, i, e, s)
  };
  var G = function(t, i) {
    return new D(t.x - i, t.y - i, t.x + i, t.y + i)
  }, W = function(t, i, e, s, n) {
    return s >= t.l && (t.r >= i && (n >= t.b && t.t >= e))
  }, z = 0;
  t.NO_GROUP = 0;
  var J = t.ALL_LAYERS = -1;
  t.resetShapeIdCounter = function() {
    z = 0
  };
  var U = t.Shape = function(t) {
    this.body = t, this.bb_l = this.bb_b = this.bb_r = this.bb_t = 0, this.hashid = z++, this.sensor = !1, this.e = 0, this.u = 0, this.surface_v = _, this.collision_type = 0, this.group = 0, this.layers = J, this.space = null, this.collisionCode = this.collisionCode
  };
  U.prototype.setElasticity = function(t) {
    this.e = t
  }, U.prototype.setFriction = function(t) {
    this.body.activate(), this.u = t
  }, U.prototype.setLayers = function(t) {
    this.body.activate(), this.layers = t
  }, U.prototype.setSensor = function(t) {
    this.body.activate(), this.sensor = t
  }, U.prototype.setCollisionType = function(t) {
    this.body.activate(), this.collision_type = t
  }, U.prototype.getBody = function() {
    return this.body
  }, U.prototype.active = function() {
    return this.body && -1 !== this.body.shapeList.indexOf(this)
  }, U.prototype.setBody = function(t) {
    s(!this.active(), "You cannot change the body on an active shape. You must remove the shape from the space before changing the body."), this.body = t
  }, U.prototype.cacheBB = function() {
    return this.update(this.body.p, this.body.rot)
  }, U.prototype.update = function(t, i) {
    s(!isNaN(i.x), "Rotation is NaN"), s(!isNaN(t.x), "Position is NaN"), this.cacheData(t, i)
  }, U.prototype.pointQuery = function(t) {
    var i = this.nearestPointQuery(t);
    return 0 > i.d ? i : void 0
  }, U.prototype.getBB = function() {
    return new D(this.bb_l, this.bb_b, this.bb_r, this.bb_t)
  };
  var Y = function(t, i, e) {
    this.shape = t, this.p = i, this.d = e
  }, K = function(t, i, e) {
    this.shape = t, this.t = i, this.n = e
  };
  K.prototype.hitPoint = function(t, i) {
    return Q(t, i, this.t)
  }, K.prototype.hitDist = function(t, i) {
    return O(t, i) * this.t
  };
  var X = t.CircleShape = function(t, i, e) {
    this.c = this.tc = e, this.r = i, this.type = "circle", U.call(this, t)
  };
  X.prototype = Object.create(U.prototype), X.prototype.cacheData = function(t, i) {
    var e = this.tc = P(this.c, i).add(t), s = this.r;
    this.bb_l = e.x - s, this.bb_b = e.y - s, this.bb_r = e.x + s, this.bb_t = e.y + s
  }, X.prototype.nearestPointQuery = function(t) {
    var i = t.x - this.tc.x, e = t.y - this.tc.y, s = w(i, e), n = this.r, r = new d(this.tc.x + i * n / s, this.tc.y + e * n / s);
    return new Y(this, r, s - n)
  };
  var Z = function(t, i, e, s, n) {
    s = A(s, i), n = A(n, i);
    var r = x(s, s) - 2 * x(s, n) + x(n, n), o = -2 * x(s, s) + 2 * x(s, n), a = x(s, s) - e * e, h = o * o - 4 * r * a;
    if(h >= 0) {
      var c = (-o - Math.sqrt(h)) / (2 * r);
      if(c >= 0 && 1 >= c) {
        return new K(t, c, T(Q(s, n, c)))
      }
    }
  };
  X.prototype.segmentQuery = function(t, i) {
    return Z(this, this.tc, this.r, t, i)
  };
  var $ = t.SegmentShape = function(t, i, e, s) {
    this.a = i, this.b = e, this.n = M(T(A(e, i))), this.ta = this.tb = this.tn = null, this.r = s, this.a_tangent = _, this.b_tangent = _, this.type = "segment", U.call(this, t)
  };
  $.prototype = Object.create(U.prototype), $.prototype.cacheData = function(t, i) {
    this.ta = S(t, P(this.a, i)), this.tb = S(t, P(this.b, i)), this.tn = P(this.n, i);
    var e, s, n, r;
    this.ta.x < this.tb.x ? (e = this.ta.x, s = this.tb.x) : (e = this.tb.x, s = this.ta.x), this.ta.y < this.tb.y ? (n = this.ta.y, r = this.tb.y) : (n = this.tb.y, r = this.ta.y);
    var o = this.r;
    this.bb_l = e - o, this.bb_b = n - o, this.bb_r = s + o, this.bb_t = r + o
  }, $.prototype.nearestPointQuery = function(t) {
    var i = c(t, this.ta, this.tb), e = t.x - i.x, s = t.y - i.y, n = w(e, s), r = this.r, o = n ? S(i, B(new d(e, s), r / n)) : i;
    return new Y(this, o, n - r)
  }, $.prototype.segmentQuery = function(t, i) {
    var e = this.tn, s = x(A(this.ta, t), e), n = this.r, r = s > 0 ? j(e) : e, o = A(B(r, n), t), a = S(this.ta, o), h = S(this.tb, o), c = A(i, t);
    if(0 >= C(c, a) * C(c, h)) {
      var p = s + (s > 0 ? -n : n), u = -p, l = x(c, e) - p;
      if(0 > u * l) {
        return new K(this, u / (u - l), r)
      }
    }else {
      if(0 !== n) {
        var b = Z(this, this.ta, this.r, t, i), y = Z(this, this.tb, this.r, t, i);
        return b ? y && y.t < b.t ? y : b : y
      }
    }
  }, $.prototype.setNeighbors = function(t, i) {
    this.a_tangent = A(t, this.a), this.b_tangent = A(i, this.b)
  }, $.prototype.setEndpoints = function(t, i) {
    this.a = t, this.b = i, this.n = M(T(A(i, t)))
  };
  var ti = function(t) {
    for(var i = t.length, e = 0;i > e;e += 2) {
      var s = t[e], n = t[e + 1], r = t[(e + 2) % i], o = t[(e + 3) % i], a = t[(e + 4) % i], h = t[(e + 5) % i];
      if(k(r - s, o - n, a - r, h - o) > 0) {
        return!1
      }
    }
    return!0
  }, ii = t.PolyShape = function(t, i, e) {
    this.setVerts(i, e), this.type = "poly", U.call(this, t)
  };
  ii.prototype = Object.create(U.prototype);
  var ei = function(t, i) {
    this.n = t, this.d = i
  };
  ei.prototype.compare = function(t) {
    return x(this.n, t) - this.d
  }, ii.prototype.setVerts = function(t, i) {
    s(t.length >= 4, "Polygons require some verts"), s("number" == typeof t[0], "Polygon verticies should be specified in a flattened list (eg [x1,y1,x2,y2,x3,y3,...])"), s(ti(t), "Polygon is concave or has a reversed winding. Consider using cpConvexHull()");
    var e = t.length, n = e >> 1;
    this.verts = Array(e), this.tVerts = Array(e), this.planes = Array(n), this.tPlanes = Array(n);
    for(var r = 0;e > r;r += 2) {
      var o = t[r] + i.x, a = t[r + 1] + i.y, h = t[(r + 2) % e] + i.x, c = t[(r + 3) % e] + i.y, p = T(M(new d(h - o, c - a)));
      this.verts[r] = o, this.verts[r + 1] = a, this.planes[r >> 1] = new ei(p, m(p.x, p.y, o, a)), this.tPlanes[r >> 1] = new ei(new d(0, 0), 0)
    }
  }, t.BoxShape = function(t, i, e) {
    var s = i / 2, n = e / 2;
    return si(t, new D(-s, -n, s, n))
  };
  var si = t.BoxShape2 = function(t, i) {
    var e = [i.l, i.b, i.l, i.t, i.r, i.t, i.r, i.b];
    return new ii(t, e, _)
  };
  ii.prototype.transformVerts = function(t, s) {
    for(var n = this.verts, r = this.tVerts, o = 1 / 0, a = -1 / 0, h = 1 / 0, c = -1 / 0, p = 0;n.length > p;p += 2) {
      var u = n[p], l = n[p + 1], b = t.x + u * s.x - l * s.y, y = t.y + u * s.y + l * s.x;
      r[p] = b, r[p + 1] = y, o = i(o, b), a = e(a, b), h = i(h, y), c = e(c, y)
    }
    this.bb_l = o, this.bb_b = h, this.bb_r = a, this.bb_t = c
  }, ii.prototype.transformAxes = function(t, i) {
    for(var e = this.planes, s = this.tPlanes, n = 0;e.length > n;n++) {
      var r = P(e[n].n, i);
      s[n].n = r, s[n].d = x(t, r) + e[n].d
    }
  }, ii.prototype.cacheData = function(t, i) {
    this.transformAxes(t, i), this.transformVerts(t, i)
  }, ii.prototype.nearestPointQuery = function(t) {
    for(var i = this.tPlanes, e = this.tVerts, s = e[e.length - 2], n = e[e.length - 1], r = 1 / 0, o = _, a = !1, h = 0;i.length > h;h++) {
      i[h].compare(t) > 0 && (a = !0);
      var c = e[2 * h], u = e[2 * h + 1], l = p(t.x, t.y, s, n, c, u), b = O(t, l);
      r > b && (r = b, o = l), s = c, n = u
    }
    return new Y(this, o, a ? r : -r)
  }, ii.prototype.segmentQuery = function(t, i) {
    for(var e = this.tPlanes, s = this.tVerts, n = e.length, r = 2 * n, o = 0;n > o;o++) {
      var a = e[o].n, h = x(t, a);
      if(!(e[o].d > h)) {
        var c = x(i, a), p = (e[o].d - h) / (c - h);
        if(!(0 > p || p > 1)) {
          var u = Q(t, i, p), l = -C(a, u), b = -k(a.x, a.y, s[2 * o], s[2 * o + 1]), y = -k(a.x, a.y, s[(2 * o + 2) % r], s[(2 * o + 3) % r]);
          if(l >= b && y >= l) {
            return new K(this, p, a)
          }
        }
      }
    }
  }, ii.prototype.valueOnAxis = function(t, e) {
    for(var s = this.tVerts, n = m(t.x, t.y, s[0], s[1]), r = 2;s.length > r;r += 2) {
      n = i(n, m(t.x, t.y, s[r], s[r + 1]))
    }
    return n - e
  }, ii.prototype.containsVert = function(t, i) {
    for(var e = this.tPlanes, s = 0;e.length > s;s++) {
      var n = e[s].n, r = m(n.x, n.y, t, i) - e[s].d;
      if(r > 0) {
        return!1
      }
    }
    return!0
  }, ii.prototype.containsVertPartial = function(t, i, e) {
    for(var s = this.tPlanes, n = 0;s.length > n;n++) {
      var r = s[n].n;
      if(!(0 > x(r, e))) {
        var o = m(r.x, r.y, t, i) - s[n].d;
        if(o > 0) {
          return!1
        }
      }
    }
    return!0
  }, ii.prototype.getNumVerts = function() {
    return this.verts.length / 2
  }, ii.prototype.getVert = function(t) {
    return new d(this.verts[2 * t], this.verts[2 * t + 1])
  };
  var ni = t.Body = function(t, i) {
    this.p = new d(0, 0), this.vx = this.vy = 0, this.f = new d(0, 0), this.w = 0, this.t = 0, this.v_limit = 1 / 0, this.w_limit = 1 / 0, this.v_biasx = this.v_biasy = 0, this.w_bias = 0, this.space = null, this.shapeList = [], this.arbiterList = null, this.constraintList = null, this.nodeRoot = null, this.nodeNext = null, this.nodeIdleTime = 0, this.setMass(t), this.setMoment(i), this.rot = new d(0, 0), this.setAngle(0)
  };
  if("undefined" != typeof DEBUG && DEBUG) {
    var ri = function(t, i) {
      s(t.x == t.x && t.y == t.y, i)
    }, oi = function(t, i) {
      s(1 / 0 !== Math.abs(t.x) && 1 / 0 !== Math.abs(t.y), i)
    }, ai = function(t, i) {
      ri(t, i), oi(t, i)
    };
    ni.prototype.sanityCheck = function() {
      s(this.m === this.m && this.m_inv === this.m_inv, "Body's mass is invalid."), s(this.i === this.i && this.i_inv === this.i_inv, "Body's moment is invalid."), ai(this.p, "Body's position is invalid."), ai(this.f, "Body's force is invalid."), s(this.vx === this.vx && 1 / 0 !== Math.abs(this.vx), "Body's velocity is invalid."), s(this.vy === this.vy && 1 / 0 !== Math.abs(this.vy), "Body's velocity is invalid."), s(this.a === this.a && 1 / 0 !== Math.abs(this.a), "Body's angle is invalid."), s(this.w === 
      this.w && 1 / 0 !== Math.abs(this.w), "Body's angular velocity is invalid."), s(this.t === this.t && 1 / 0 !== Math.abs(this.t), "Body's torque is invalid."), ai(this.rot, "Body's rotation vector is invalid."), s(this.v_limit === this.v_limit, "Body's velocity limit is invalid."), s(this.w_limit === this.w_limit, "Body's angular velocity limit is invalid.")
    }
  }else {
    ni.prototype.sanityCheck = function() {
    }
  }
  ni.prototype.getPos = function() {
    return this.p
  }, ni.prototype.getVel = function() {
    return new d(this.vx, this.vy)
  }, ni.prototype.getAngVel = function() {
    return this.w
  }, ni.prototype.isSleeping = function() {
    return null !== this.nodeRoot
  }, ni.prototype.isStatic = function() {
    return 1 / 0 === this.nodeIdleTime
  }, ni.prototype.isRogue = function() {
    return null === this.space
  }, ni.prototype.setMass = function(t) {
    s(t > 0, "Mass must be positive and non-zero."), this.activate(), this.m = t, this.m_inv = 1 / t
  }, ni.prototype.setMoment = function(t) {
    s(t > 0, "Moment of Inertia must be positive and non-zero."), this.activate(), this.i = t, this.i_inv = 1 / t
  }, ni.prototype.addShape = function(t) {
    this.shapeList.push(t)
  }, ni.prototype.removeShape = function(t) {
    h(this.shapeList, t)
  };
  var hi = function(t, i, e) {
    return t === e ? t.next(i) : (t.a === i ? t.next_a = hi(t.next_a, i, e) : t.next_b = hi(t.next_b, i, e), t)
  };
  ni.prototype.removeConstraint = function(t) {
    this.constraintList = hi(this.constraintList, this, t)
  }, ni.prototype.setPos = function(i) {
    this.activate(), this.sanityCheck(), i === _ && (i = t.v(0, 0)), this.p = i
  }, ni.prototype.setVel = function(t) {
    this.activate(), this.vx = t.x, this.vy = t.y
  }, ni.prototype.setAngVel = function(t) {
    this.activate(), this.w = t
  }, ni.prototype.setAngleInternal = function(t) {
    s(!isNaN(t), "Internal Error: Attempting to set body's angle to NaN"), this.a = t, this.rot.x = Math.cos(t), this.rot.y = Math.sin(t)
  }, ni.prototype.setAngle = function(t) {
    this.activate(), this.sanityCheck(), this.setAngleInternal(t)
  }, ni.prototype.velocity_func = function(t, i, e) {
    var s = this.vx * i + (t.x + this.f.x * this.m_inv) * e, n = this.vy * i + (t.y + this.f.y * this.m_inv) * e, r = this.v_limit, o = s * s + n * n, a = o > r * r ? r / Math.sqrt(o) : 1;
    this.vx = s * a, this.vy = n * a;
    var h = this.w_limit;
    this.w = v(this.w * i + this.t * this.i_inv * e, -h, h), this.sanityCheck()
  }, ni.prototype.position_func = function(t) {
    this.p.x += (this.vx + this.v_biasx) * t, this.p.y += (this.vy + this.v_biasy) * t, this.setAngleInternal(this.a + (this.w + this.w_bias) * t), this.v_biasx = this.v_biasy = 0, this.w_bias = 0, this.sanityCheck()
  }, ni.prototype.resetForces = function() {
    this.activate(), this.f = new d(0, 0), this.t = 0
  }, ni.prototype.applyForce = function(t, i) {
    this.activate(), this.f = S(this.f, t), this.t += C(i, t)
  }, ni.prototype.applyImpulse = function(t, i) {
    this.activate(), pe(this, t.x, t.y, i)
  }, ni.prototype.getVelAtPoint = function(t) {
    return S(new d(this.vx, this.vy), B(M(t), this.w))
  }, ni.prototype.getVelAtWorldPoint = function(t) {
    return this.getVelAtPoint(A(t, this.p))
  }, ni.prototype.getVelAtLocalPoint = function(t) {
    return this.getVelAtPoint(P(t, this.rot))
  }, ni.prototype.eachShape = function(t) {
    for(var i = 0, e = this.shapeList.length;e > i;i++) {
      t(this.shapeList[i])
    }
  }, ni.prototype.eachConstraint = function(t) {
    for(var i = this.constraintList;i;) {
      var e = i.next(this);
      t(i), i = e
    }
  }, ni.prototype.eachArbiter = function(t) {
    for(var i = this.arbiterList;i;) {
      var e = i.next(this);
      i.swappedColl = this === i.body_b, t(i), i = e
    }
  }, ni.prototype.local2World = function(t) {
    return S(this.p, P(t, this.rot))
  }, ni.prototype.world2Local = function(t) {
    return L(A(t, this.p), this.rot)
  }, ni.prototype.kineticEnergy = function() {
    var t = this.vx * this.vx + this.vy * this.vy, i = this.w * this.w;
    return(t ? t * this.m : 0) + (i ? i * this.i : 0)
  };
  var ci = t.SpatialIndex = function(t) {
    if(this.staticIndex = t, t) {
      if(t.dynamicIndex) {
        throw Error("This static index is already associated with a dynamic index.");
      }
      t.dynamicIndex = this
    }
  };
  ci.prototype.collideStatic = function(t, i) {
    if(t.count > 0) {
      var e = t.query;
      this.each(function(t) {
        e(t, new D(t.bb_l, t.bb_b, t.bb_r, t.bb_t), i)
      })
    }
  };
  var pi = t.BBTree = function(t) {
    ci.call(this, t), this.velocityFunc = null, this.leaves = {}, this.count = 0, this.root = null, this.pooledNodes = null, this.pooledPairs = null, this.stamp = 0
  };
  pi.prototype = Object.create(ci.prototype);
  var ui = 0, li = function(t, s, n) {
    this.obj = null, this.bb_l = i(s.bb_l, n.bb_l), this.bb_b = i(s.bb_b, n.bb_b), this.bb_r = e(s.bb_r, n.bb_r), this.bb_t = e(s.bb_t, n.bb_t), this.parent = null, this.setA(s), this.setB(n)
  };
  pi.prototype.makeNode = function(t, i) {
    var e = this.pooledNodes;
    return e ? (this.pooledNodes = e.parent, e.constructor(this, t, i), e) : (ui++, new li(this, t, i))
  };
  var bi = 0, yi = function(t, i) {
    this.obj = i, t.getBB(i, this), this.parent = null, this.stamp = 1, this.pairs = null, bi++
  };
  pi.prototype.getBB = function(t, s) {
    var n = this.velocityFunc;
    if(n) {
      var r = 0.1, o = (t.bb_r - t.bb_l) * r, a = (t.bb_t - t.bb_b) * r, h = B(n(t), 0.1);
      s.bb_l = t.bb_l + i(-o, h.x), s.bb_b = t.bb_b + i(-a, h.y), s.bb_r = t.bb_r + e(o, h.x), s.bb_t = t.bb_t + e(a, h.y)
    }else {
      s.bb_l = t.bb_l, s.bb_b = t.bb_b, s.bb_r = t.bb_r, s.bb_t = t.bb_t
    }
  }, pi.prototype.getStamp = function() {
    var t = this.dynamicIndex;
    return t && t.stamp ? t.stamp : this.stamp
  }, pi.prototype.incrementStamp = function() {
    this.dynamicIndex && this.dynamicIndex.stamp ? this.dynamicIndex.stamp++ : this.stamp++
  };
  var vi = 0, fi = function(t, i, e, s) {
    this.prevA = null, this.leafA = t, this.nextA = i, this.prevB = null, this.leafB = e, this.nextB = s
  };
  pi.prototype.makePair = function(t, i, e, s) {
    var n = this.pooledPairs;
    return n ? (this.pooledPairs = n.prevA, n.prevA = null, n.leafA = t, n.nextA = i, n.prevB = null, n.leafB = e, n.nextB = s, n) : (vi++, new fi(t, i, e, s))
  }, fi.prototype.recycle = function(t) {
    this.prevA = t.pooledPairs, t.pooledPairs = this
  };
  var di = function(t, i, e) {
    e && (e.leafA === i ? e.prevA = t : e.prevB = t), t ? t.leafA === i ? t.nextA = e : t.nextB = e : i.pairs = e
  };
  yi.prototype.clearPairs = function(t) {
    var i, e = this.pairs;
    for(this.pairs = null;e;) {
      e.leafA === this ? (i = e.nextA, di(e.prevB, e.leafB, e.nextB)) : (i = e.nextB, di(e.prevA, e.leafA, e.nextA)), e.recycle(t), e = i
    }
  };
  var _i = function(t, i, e) {
    var s = t.pairs, n = i.pairs, r = e.makePair(t, s, i, n);
    t.pairs = i.pairs = r, s && (s.leafA === t ? s.prevA = r : s.prevB = r), n && (n.leafA === i ? n.prevA = r : n.prevB = r)
  };
  li.prototype.recycle = function(t) {
    this.parent = t.pooledNodes, t.pooledNodes = this
  }, yi.prototype.recycle = function() {
  }, li.prototype.setA = function(t) {
    this.A = t, t.parent = this
  }, li.prototype.setB = function(t) {
    this.B = t, t.parent = this
  }, yi.prototype.isLeaf = !0, li.prototype.isLeaf = !1, li.prototype.otherChild = function(t) {
    return this.A == t ? this.B : this.A
  }, li.prototype.replaceChild = function(t, s, r) {
    n(t == this.A || t == this.B, "Node is not a child of parent."), this.A == t ? (this.A.recycle(r), this.setA(s)) : (this.B.recycle(r), this.setB(s));
    for(var o = this;o;o = o.parent) {
      var a = o.A, h = o.B;
      o.bb_l = i(a.bb_l, h.bb_l), o.bb_b = i(a.bb_b, h.bb_b), o.bb_r = e(a.bb_r, h.bb_r), o.bb_t = e(a.bb_t, h.bb_t)
    }
  }, li.prototype.bbArea = yi.prototype.bbArea = function() {
    return(this.bb_r - this.bb_l) * (this.bb_t - this.bb_b)
  };
  var xi = function(t, s) {
    return(e(t.bb_r, s.bb_r) - i(t.bb_l, s.bb_l)) * (e(t.bb_t, s.bb_t) - i(t.bb_b, s.bb_b))
  }, mi = function(t, i) {
    return Math.abs(t.bb_l + t.bb_r - i.bb_l - i.bb_r) + Math.abs(t.bb_b + t.bb_t - i.bb_b - i.bb_t)
  }, gi = function(t, s, n) {
    if(null == t) {
      return s
    }
    if(t.isLeaf) {
      return n.makeNode(s, t)
    }
    var r = t.B.bbArea() + xi(t.A, s), o = t.A.bbArea() + xi(t.B, s);
    return r === o && (r = mi(t.A, s), o = mi(t.B, s)), r > o ? t.setB(gi(t.B, s, n)) : t.setA(gi(t.A, s, n)), t.bb_l = i(t.bb_l, s.bb_l), t.bb_b = i(t.bb_b, s.bb_b), t.bb_r = e(t.bb_r, s.bb_r), t.bb_t = e(t.bb_t, s.bb_t), t
  };
  li.prototype.intersectsBB = yi.prototype.intersectsBB = function(t) {
    return this.bb_l <= t.r && (t.l <= this.bb_r && (this.bb_b <= t.t && t.b <= this.bb_t))
  };
  var wi = function(t, i, e) {
    t.intersectsBB(i) && (t.isLeaf ? e(t.obj) : (wi(t.A, i, e), wi(t.B, i, e)))
  }, Si = function(t, s, n) {
    var r = 1 / (n.x - s.x), o = t.bb_l == s.x ? -1 / 0 : (t.bb_l - s.x) * r, a = t.bb_r == s.x ? 1 / 0 : (t.bb_r - s.x) * r, h = i(o, a), c = e(o, a), p = 1 / (n.y - s.y), u = t.bb_b == s.y ? -1 / 0 : (t.bb_b - s.y) * p, l = t.bb_t == s.y ? 1 / 0 : (t.bb_t - s.y) * p, b = i(u, l), y = e(u, l);
    if(c >= b && y >= h) {
      var v = e(h, b), f = i(c, y);
      if(f >= 0 && 1 >= v) {
        return e(v, 0)
      }
    }
    return 1 / 0
  }, Ai = function(t, e, s, n, r) {
    if(t.isLeaf) {
      return r(t.obj)
    }
    var o = Si(t.A, e, s), a = Si(t.B, e, s);
    return a > o ? (n > o && (n = i(n, Ai(t.A, e, s, n, r))), n > a && (n = i(n, Ai(t.B, e, s, n, r)))) : (n > a && (n = i(n, Ai(t.B, e, s, n, r))), n > o && (n = i(n, Ai(t.A, e, s, n, r)))), n
  };
  pi.prototype.subtreeRecycle = function(t) {
    t.isLeaf && (this.subtreeRecycle(t.A), this.subtreeRecycle(t.B), t.recycle(this))
  };
  var ji = function(t, i, e) {
    if(i == t) {
      return null
    }
    var s = i.parent;
    if(s == t) {
      var n = t.otherChild(i);
      return n.parent = t.parent, t.recycle(e), n
    }
    return s.parent.replaceChild(s, s.otherChild(i), e), t
  }, Bi = function(t, i) {
    return t.bb_l <= i.bb_r && (i.bb_l <= t.bb_r && (t.bb_b <= i.bb_t && i.bb_b <= t.bb_t))
  };
  yi.prototype.markLeafQuery = function(t, i, e, s) {
    Bi(t, this) && (i ? _i(t, this, e) : (this.stamp < t.stamp && _i(this, t, e), s && s(t.obj, this.obj)))
  }, li.prototype.markLeafQuery = function(t, i, e, s) {
    Bi(t, this) && (this.A.markLeafQuery(t, i, e, s), this.B.markLeafQuery(t, i, e, s))
  }, yi.prototype.markSubtree = function(t, i, e) {
    if(this.stamp == t.getStamp()) {
      i && i.markLeafQuery(this, !1, t, e);
      for(var s = this;s.parent;s = s.parent) {
        s == s.parent.A ? s.parent.B.markLeafQuery(this, !0, t, e) : s.parent.A.markLeafQuery(this, !1, t, e)
      }
    }else {
      for(var n = this.pairs;n;) {
        this === n.leafB ? (e && e(n.leafA.obj, this.obj), n = n.nextB) : n = n.nextA
      }
    }
  }, li.prototype.markSubtree = function(t, i, e) {
    this.A.markSubtree(t, i, e), this.B.markSubtree(t, i, e)
  }, yi.prototype.containsObj = function(t) {
    return this.bb_l <= t.bb_l && (this.bb_r >= t.bb_r && (this.bb_b <= t.bb_b && this.bb_t >= t.bb_t))
  }, yi.prototype.update = function(t) {
    var i = t.root, e = this.obj;
    return this.containsObj(e) ? !1 : (t.getBB(this.obj, this), i = ji(i, this, t), t.root = gi(i, this, t), this.clearPairs(t), this.stamp = t.getStamp(), !0)
  }, yi.prototype.addPairs = function(t) {
    var i = t.dynamicIndex;
    if(i) {
      var e = i.root;
      e && e.markLeafQuery(this, !0, i, null)
    }else {
      var s = t.staticIndex.root;
      this.markSubtree(t, s, null)
    }
  }, pi.prototype.insert = function(t, i) {
    var e = new yi(this, t);
    this.leaves[i] = e, this.root = gi(this.root, e, this), this.count++, e.stamp = this.getStamp(), e.addPairs(this), this.incrementStamp()
  }, pi.prototype.remove = function(t, i) {
    var e = this.leaves[i];
    delete this.leaves[i], this.root = ji(this.root, e, this), this.count--, e.clearPairs(this), e.recycle(this)
  }, pi.prototype.contains = function(t, i) {
    return null != this.leaves[i]
  };
  var Ci = function() {
  };
  pi.prototype.reindexQuery = function(t) {
    if(this.root) {
      var i, e = this.leaves;
      for(i in e) {
        e[i].update(this)
      }
      var s = this.staticIndex, n = s && s.root;
      this.root.markSubtree(this, n, t), s && (!n && this.collideStatic(this, s, t)), this.incrementStamp()
    }
  }, pi.prototype.reindex = function() {
    this.reindexQuery(Ci)
  }, pi.prototype.reindexObject = function(t, i) {
    var e = this.leaves[i];
    e && (e.update(this) && e.addPairs(this), this.incrementStamp())
  }, pi.prototype.pointQuery = function(t, i) {
    this.query(new D(t.x, t.y, t.x, t.y), i)
  }, pi.prototype.segmentQuery = function(t, i, e, s) {
    this.root && Ai(this.root, t, i, e, s)
  }, pi.prototype.query = function(t, i) {
    this.root && wi(this.root, t, i)
  }, pi.prototype.count = function() {
    return this.count
  }, pi.prototype.each = function(t) {
    var i;
    for(i in this.leaves) {
      t(this.leaves[i].obj)
    }
  };
  var ki = function(t, s, n, r, o) {
    return(e(t.bb_r, r) - i(t.bb_l, s)) * (e(t.bb_t, o) - i(t.bb_b, n))
  }, Mi = function(t, s, n, r) {
    if(1 == r) {
      return s[n]
    }
    if(2 == r) {
      return t.makeNode(s[n], s[n + 1])
    }
    for(var o = s[n], a = o.bb_l, h = o.bb_b, c = o.bb_r, p = o.bb_t, u = n + r, l = n + 1;u > l;l++) {
      o = s[l], a = i(a, o.bb_l), h = i(h, o.bb_b), c = e(c, o.bb_r), p = e(p, o.bb_t)
    }
    var b = c - a > p - h, y = Array(2 * r);
    if(b) {
      for(var l = n;u > l;l++) {
        y[2 * l + 0] = s[l].bb_l, y[2 * l + 1] = s[l].bb_r
      }
    }else {
      for(var l = n;u > l;l++) {
        y[2 * l + 0] = s[l].bb_b, y[2 * l + 1] = s[l].bb_t
      }
    }
    y.sort(function(t, i) {
      return t - i
    });
    var v = 0.5 * (y[r - 1] + y[r]), f = a, d = h, _ = c, x = p, m = a, g = h, w = c, S = p;
    b ? _ = m = v : x = g = v;
    for(var A = u, j = n;A > j;) {
      var o = s[j];
      ki(o, m, g, w, S) < ki(o, f, d, _, x) ? (A--, s[j] = s[A], s[A] = o) : j++
    }
    if(A == r) {
      for(var o = null, l = n;u > l;l++) {
        o = gi(o, s[l], t)
      }
      return o
    }
    return NodeNew(t, Mi(t, s, n, A - n), Mi(t, s, A, u - A))
  };
  pi.prototype.optimize = function() {
    var t = Array(this.count), i = 0;
    for(var e in this.leaves) {
      t[i++] = this.nodes[e]
    }
    tree.subtreeRecycle(root), this.root = Mi(tree, t, t.length)
  };
  var Ii = function(t, i) {
    !t.isLeaf && (10 >= i && (Ii(t.A, i + 1), Ii(t.B, i + 1)));
    for(var e = "", s = 0;i > s;s++) {
      e += " "
    }
    console.log(e + t.bb_b + " " + t.bb_t)
  };
  pi.prototype.log = function() {
    this.root && Ii(this.root, 0)
  };
  var Pi = t.CollisionHandler = function() {
    this.a = this.b = 0
  };
  Pi.prototype.begin = function() {
    return!0
  }, Pi.prototype.preSolve = function() {
    return!0
  }, Pi.prototype.postSolve = function() {
  }, Pi.prototype.separate = function() {
  };
  var Li = function(t, i) {
    this.e = 0, this.u = 0, this.surface_vr = _, this.a = t, this.body_a = t.body, this.b = i, this.body_b = i.body, this.thread_a_next = this.thread_a_prev = null, this.thread_b_next = this.thread_b_prev = null, this.contacts = null, this.stamp = 0, this.handler = null, this.swappedColl = !1, this.state = "first coll"
  };
  Li.prototype.getShapes = function() {
    return this.swappedColl ? [this.b, this.a] : [this.a, this.b]
  }, Li.prototype.totalImpulse = function() {
    for(var t = this.contacts, i = new d(0, 0), e = 0, s = t.length;s > e;e++) {
      var n = t[e];
      i.add(B(n.n, n.jnAcc))
    }
    return this.swappedColl ? i : i.neg()
  }, Li.prototype.totalImpulseWithFriction = function() {
    for(var t = this.contacts, i = new d(0, 0), e = 0, s = t.length;s > e;e++) {
      var n = t[e];
      i.add((new d(n.jnAcc, n.jtAcc)).rotate(n.n))
    }
    return this.swappedColl ? i : i.neg()
  }, Li.prototype.totalKE = function() {
    for(var t = (1 - this.e) / (1 + this.e), i = 0, e = this.contacts, s = 0, n = e.length;n > s;s++) {
      var r = e[s], o = r.jnAcc, a = r.jtAcc;
      i += t * o * o / r.nMass + a * a / r.tMass
    }
    return i
  }, Li.prototype.ignore = function() {
    this.state = "ignore"
  }, Li.prototype.getA = function() {
    return this.swappedColl ? this.b : this.a
  }, Li.prototype.getB = function() {
    return this.swappedColl ? this.a : this.b
  }, Li.prototype.isFirstContact = function() {
    return"first coll" === this.state
  };
  var Ni = function(t, i, e) {
    this.point = t, this.normal = i, this.dist = e
  };
  Li.prototype.getContactPointSet = function() {
    var t, i = Array(this.contacts.length);
    for(t = 0;i.length > t;t++) {
      i[t] = new Ni(this.contacts[t].p, this.contacts[t].n, this.contacts[t].dist)
    }
    return i
  }, Li.prototype.getNormal = function(t) {
    var i = this.contacts[t].n;
    return this.swappedColl ? j(i) : i
  }, Li.prototype.getPoint = function(t) {
    return this.contacts[t].p
  }, Li.prototype.getDepth = function(t) {
    return this.contacts[t].dist
  };
  var Fi = function(t, i, e, s) {
    e ? e.body_a === i ? e.thread_a_next = s : e.thread_b_next = s : i.arbiterList = s, s && (s.body_a === i ? s.thread_a_prev = e : s.thread_b_prev = e)
  };
  Li.prototype.unthread = function() {
    Fi(this, this.body_a, this.thread_a_prev, this.thread_a_next), Fi(this, this.body_b, this.thread_b_prev, this.thread_b_next), this.thread_a_prev = this.thread_a_next = null, this.thread_b_prev = this.thread_b_next = null
  }, Li.prototype.update = function(t, i, e, s) {
    if(this.contacts) {
      for(var n = 0;this.contacts.length > n;n++) {
        for(var r = this.contacts[n], o = 0;t.length > o;o++) {
          var a = t[o];
          a.hash === r.hash && (a.jnAcc = r.jnAcc, a.jtAcc = r.jtAcc)
        }
      }
    }
    this.contacts = t, this.handler = i, this.swappedColl = e.collision_type !== i.a, this.e = e.e * s.e, this.u = e.u * s.u, this.surface_vr = A(e.surface_v, s.surface_v), this.a = e, this.body_a = e.body, this.b = s, this.body_b = s.body, "cached" == this.state && (this.state = "first coll")
  }, Li.prototype.preStep = function(t, e, s) {
    for(var n = this.body_a, r = this.body_b, o = 0;this.contacts.length > o;o++) {
      var a = this.contacts[o];
      a.r1 = A(a.p, n.p), a.r2 = A(a.p, r.p), a.nMass = 1 / ye(n, r, a.r1, a.r2, a.n), a.tMass = 1 / ye(n, r, a.r1, a.r2, M(a.n)), a.bias = -s * i(0, a.dist + e) / t, a.jBias = 0, a.bounce = ce(n, r, a.r1, a.r2, a.n) * this.e
    }
  }, Li.prototype.applyCachedImpulse = function(t) {
    if(!this.isFirstContact()) {
      for(var i = this.body_a, e = this.body_b, s = 0;this.contacts.length > s;s++) {
        var n = this.contacts[s], r = n.n.x, o = n.n.y, a = r * n.jnAcc - o * n.jtAcc, h = r * n.jtAcc + o * n.jnAcc;
        ue(i, e, n.r1, n.r2, a * t, h * t)
      }
    }
  };
  var Qi = 0, Ti = 0;
  Li.prototype.applyImpulse = function() {
    Qi++;
    for(var t = this.body_a, i = this.body_b, s = this.surface_vr, n = this.u, r = 0;this.contacts.length > r;r++) {
      Ti++;
      var o = this.contacts[r], a = o.nMass, h = o.n, c = o.r1, p = o.r2, u = i.vx - p.y * i.w - (t.vx - c.y * t.w), l = i.vy + p.x * i.w - (t.vy + c.x * t.w), b = h.x * (i.v_biasx - p.y * i.w_bias - t.v_biasx + c.y * t.w_bias) + h.y * (p.x * i.w_bias + i.v_biasy - c.x * t.w_bias - t.v_biasy), y = m(u, l, h.x, h.y), f = m(u + s.x, l + s.y, -h.y, h.x), d = (o.bias - b) * a, _ = o.jBias;
      o.jBias = e(_ + d, 0);
      var x = -(o.bounce + y) * a, g = o.jnAcc;
      o.jnAcc = e(g + x, 0);
      var w = n * o.jnAcc, S = -f * o.tMass, A = o.jtAcc;
      o.jtAcc = v(A + S, -w, w);
      var j = h.x * (o.jBias - _), B = h.y * (o.jBias - _);
      le(t, -j, -B, c), le(i, j, B, p);
      var C = o.jnAcc - g, k = o.jtAcc - A;
      ue(t, i, c, p, h.x * C - h.y * k, h.x * k + h.y * C)
    }
  }, Li.prototype.callSeparate = function(t) {
    var i = t.lookupHandler(this.a.collision_type, this.b.collision_type);
    i.separate(this, t)
  }, Li.prototype.next = function(t) {
    return this.body_a == t ? this.thread_a_next : this.thread_b_next
  };
  var Ri = 0, Vi = function(t, i, e, s) {
    this.p = t, this.n = i, this.dist = e, this.r1 = this.r2 = _, this.nMass = this.tMass = this.bounce = this.bias = 0, this.jnAcc = this.jtAcc = this.jBias = 0, this.hash = s, Ri++
  }, Oi = [], qi = function(t, i, e, s) {
    var n = e + s, r = A(i, t), o = N(r);
    if(!(o >= n * n)) {
      var a = Math.sqrt(o);
      return new Vi(S(t, B(r, 0.5 + (e - 0.5 * n) / (a ? a : 1 / 0))), a ? B(r, 1 / a) : new d(1, 0), a - n, 0)
    }
  }, Ei = function(t, i) {
    var e = qi(t.tc, i.tc, t.r, i.r);
    return e ? [e] : Oi
  }, Hi = function(t, i) {
    var e = i.ta, s = i.tb, n = t.tc, r = A(s, e), o = f(x(r, A(n, e)) / N(r)), a = S(e, B(r, o)), h = qi(n, a, t.r, i.r);
    if(h) {
      var c = h.n;
      return 0 === o && 0 > x(c, i.a_tangent) || 1 === o && 0 > x(c, i.b_tangent) ? Oi : [h]
    }
    return Oi
  }, Di = 0, Gi = function(t, i) {
    var e = 0, s = t.valueOnAxis(i[0].n, i[0].d);
    if(s > 0) {
      return-1
    }
    for(var n = 1;i.length > n;n++) {
      var r = t.valueOnAxis(i[n].n, i[n].d);
      if(r > 0) {
        return-1
      }
      r > s && (s = r, e = n)
    }
    return Di = s, e
  }, Wi = function(t, i, e, s) {
    for(var n = [], r = t.tVerts, o = 0;r.length > o;o += 2) {
      var h = r[o], c = r[o + 1];
      i.containsVertPartial(h, c, j(e)) && n.push(new Vi(new d(h, c), e, s, a(t.hashid, o)))
    }
    for(var p = i.tVerts, o = 0;p.length > o;o += 2) {
      var h = p[o], c = p[o + 1];
      t.containsVertPartial(h, c, e) && n.push(new Vi(new d(h, c), e, s, a(i.hashid, o)))
    }
    return n
  }, zi = function(t, i, e, s) {
    for(var n = [], r = t.tVerts, o = 0;r.length > o;o += 2) {
      var h = r[o], c = r[o + 1];
      i.containsVert(h, c) && n.push(new Vi(new d(h, c), e, s, a(t.hashid, o >> 1)))
    }
    for(var p = i.tVerts, o = 0;p.length > o;o += 2) {
      var h = p[o], c = p[o + 1];
      t.containsVert(h, c) && n.push(new Vi(new d(h, c), e, s, a(i.hashid, o >> 1)))
    }
    return n.length ? n : Wi(t, i, e, s)
  }, Ji = function(t, i) {
    var e = Gi(i, t.tPlanes);
    if(-1 == e) {
      return Oi
    }
    var s = Di, n = Gi(t, i.tPlanes);
    if(-1 == n) {
      return Oi
    }
    var r = Di;
    return s > r ? zi(t, i, t.tPlanes[e].n, s) : zi(t, i, j(i.tPlanes[n].n), r)
  }, Ui = function(t, e, s) {
    var n = x(e, t.ta) - t.r, r = x(e, t.tb) - t.r;
    return i(n, r) - s
  }, Yi = function(t, i, e, s, n) {
    for(var r = C(i.tn, i.ta), o = C(i.tn, i.tb), h = B(i.tn, n), c = e.tVerts, p = 0;c.length > p;p += 2) {
      var u = c[p], l = c[p + 1];
      if(m(u, l, h.x, h.y) < x(i.tn, i.ta) * n + i.r) {
        var b = k(i.tn.x, i.tn.y, u, l);
        r >= b && (b >= o && t.push(new Vi(new d(u, l), h, s, a(e.hashid, p))))
      }
    }
  }, Ki = function(t, i) {
    var e = [], s = i.tPlanes, n = s.length, r = x(t.tn, t.ta), o = i.valueOnAxis(t.tn, r) - t.r, h = i.valueOnAxis(j(t.tn), -r) - t.r;
    if(h > 0 || o > 0) {
      return Oi
    }
    var c = 0, p = Ui(t, s[0].n, s[0].d);
    if(p > 0) {
      return Oi
    }
    for(var u = 0;n > u;u++) {
      var l = Ui(t, s[u].n, s[u].d);
      if(l > 0) {
        return Oi
      }
      l > p && (p = l, c = u)
    }
    var b = j(s[c].n), y = S(t.ta, B(b, t.r)), v = S(t.tb, B(b, t.r));
    if(i.containsVert(y.x, y.y) && e.push(new Vi(y, b, p, a(t.hashid, 0))), i.containsVert(v.x, v.y) && e.push(new Vi(v, b, p, a(t.hashid, 1))), (o >= p || h >= p) && (o > h ? Yi(e, t, i, o, 1) : Yi(e, t, i, h, -1)), 0 === e.length) {
      var f, _ = 2 * c, m = i.tVerts, g = new d(m[_], m[_ + 1]);
      if(f = qi(t.ta, g, t.r, 0, e)) {
        return[f]
      }
      if(f = qi(t.tb, g, t.r, 0, e)) {
        return[f]
      }
      var w = 2 * n, A = new d(m[(_ + 2) % w], m[(_ + 3) % w]);
      if(f = qi(t.ta, A, t.r, 0, e)) {
        return[f]
      }
      if(f = qi(t.tb, A, t.r, 0, e)) {
        return[f]
      }
    }
    return e
  }, Xi = function(t, i) {
    for(var e = i.tPlanes, s = 0, n = x(e[0].n, t.tc) - e[0].d - t.r, r = 0;e.length > r;r++) {
      var o = x(e[r].n, t.tc) - e[r].d - t.r;
      if(o > 0) {
        return Oi
      }
      o > n && (n = o, s = r)
    }
    var a = e[s].n, h = i.tVerts, c = h.length, p = s << 1, u = h[p], l = h[p + 1], b = h[(p + 2) % c], y = h[(p + 3) % c], v = k(a.x, a.y, u, l), f = k(a.x, a.y, b, y), _ = C(a, t.tc);
    if(f > _) {
      var m = qi(t.tc, new d(b, y), t.r, 0, m);
      return m ? [m] : Oi
    }
    if(v > _) {
      return[new Vi(A(t.tc, B(a, t.r + n / 2)), j(a), n, 0)]
    }
    var m = qi(t.tc, new d(u, l), t.r, 0, m);
    return m ? [m] : Oi
  };
  X.prototype.collisionCode = 0, $.prototype.collisionCode = 1, ii.prototype.collisionCode = 2, X.prototype.collisionTable = [Ei, Hi, Xi], $.prototype.collisionTable = [null, function() {
    return Oi
  }, Ki], ii.prototype.collisionTable = [null, null, Ji];
  var Zi = t.collideShapes = function(t, i) {
    return s(t.collisionCode <= i.collisionCode, "Collided shapes must be sorted by type"), t.collisionTable[i.collisionCode](t, i)
  }, $i = new Pi, te = t.Space = function() {
    this.stamp = 0, this.curr_dt = 0, this.bodies = [], this.rousedBodies = [], this.sleepingComponents = [], this.staticShapes = new pi(null), this.activeShapes = new pi(this.staticShapes), this.arbiters = [], this.contactBuffersHead = null, this.cachedArbiters = {}, this.constraints = [], this.locked = 0, this.collisionHandlers = {}, this.defaultHandler = $i, this.postStepCallbacks = [], this.iterations = 10, this.gravity = _, this.damping = 1, this.idleSpeedThreshold = 0, this.sleepTimeThreshold = 
    1 / 0, this.collisionSlop = 0.1, this.collisionBias = Math.pow(0.9, 60), this.collisionPersistence = 3, this.enableContactGraph = !1, this.staticBody = new ni(1 / 0, 1 / 0), this.staticBody.nodeIdleTime = 1 / 0, this.collideShapes = this.makeCollideShapes()
  };
  te.prototype.getCurrentTimeStep = function() {
    return this.curr_dt
  }, te.prototype.setIterations = function(t) {
    this.iterations = t
  }, te.prototype.isLocked = function() {
    return this.locked
  };
  var ie = function(t) {
    s(!t.locked, "This addition/removal cannot be done safely during a call to cpSpaceStep()  or during a query. Put these calls into a post-step callback.")
  };
  te.prototype.addCollisionHandler = function(t, i, e, s, n, r) {
    ie(this), this.removeCollisionHandler(t, i);
    var o = new Pi;
    o.a = t, o.b = i, e && (o.begin = e), s && (o.preSolve = s), n && (o.postSolve = n), r && (o.separate = r), this.collisionHandlers[a(t, i)] = o
  }, te.prototype.removeCollisionHandler = function(t, i) {
    ie(this), delete this.collisionHandlers[a(t, i)]
  }, te.prototype.setDefaultCollisionHandler = function(t, i, e, s) {
    ie(this);
    var n = new Pi;
    t && (n.begin = t), i && (n.preSolve = i), e && (n.postSolve = e), s && (n.separate = s), this.defaultHandler = n
  }, te.prototype.lookupHandler = function(t, i) {
    return this.collisionHandlers[a(t, i)] || this.defaultHandler
  }, te.prototype.addShape = function(t) {
    var i = t.body;
    return i.isStatic() ? this.addStaticShape(t) : (s(!t.space, "This shape is already added to a space and cannot be added to another."), ie(this), i.activate(), i.addShape(t), t.update(i.p, i.rot), this.activeShapes.insert(t, t.hashid), t.space = this, t)
  }, te.prototype.addStaticShape = function(t) {
    s(!t.space, "This shape is already added to a space and cannot be added to another."), ie(this);
    var i = t.body;
    return i.addShape(t), t.update(i.p, i.rot), this.staticShapes.insert(t, t.hashid), t.space = this, t
  }, te.prototype.addBody = function(t) {
    return s(!t.isStatic(), "Static bodies cannot be added to a space as they are not meant to be simulated."), s(!t.space, "This body is already added to a space and cannot be added to another."), ie(this), this.bodies.push(t), t.space = this, t
  }, te.prototype.addConstraint = function(t) {
    s(!t.space, "This shape is already added to a space and cannot be added to another."), ie(this);
    var i = t.a, e = t.b;
    return i.activate(), e.activate(), this.constraints.push(t), t.next_a = i.constraintList, i.constraintList = t, t.next_b = e.constraintList, e.constraintList = t, t.space = this, t
  }, te.prototype.filterArbiters = function(t, i) {
    for(var e in this.cachedArbiters) {
      var s = this.cachedArbiters[e];
      (t === s.body_a && (i === s.a || null === i) || t === s.body_b && (i === s.b || null === i)) && (i && ("cached" !== s.state && s.callSeparate(this)), s.unthread(), h(this.arbiters, s), delete this.cachedArbiters[e])
    }
  }, te.prototype.removeShape = function(t) {
    var i = t.body;
    i.isStatic() ? this.removeStaticShape(t) : (s(this.containsShape(t), "Cannot remove a shape that was not added to the space. (Removed twice maybe?)"), ie(this), i.activate(), i.removeShape(t), this.filterArbiters(i, t), this.activeShapes.remove(t, t.hashid), t.space = null)
  }, te.prototype.removeStaticShape = function(t) {
    s(this.containsShape(t), "Cannot remove a static or sleeping shape that was not added to the space. (Removed twice maybe?)"), ie(this);
    var i = t.body;
    i.isStatic() && i.activateStatic(t), i.removeShape(t), this.filterArbiters(i, t), this.staticShapes.remove(t, t.hashid), t.space = null
  }, te.prototype.removeBody = function(t) {
    s(this.containsBody(t), "Cannot remove a body that was not added to the space. (Removed twice maybe?)"), ie(this), t.activate(), h(this.bodies, t), t.space = null
  }, te.prototype.removeConstraint = function(t) {
    s(this.containsConstraint(t), "Cannot remove a constraint that was not added to the space. (Removed twice maybe?)"), ie(this), t.a.activate(), t.b.activate(), h(this.constraints, t), t.a.removeConstraint(t), t.b.removeConstraint(t), t.space = null
  }, te.prototype.containsShape = function(t) {
    return t.space === this
  }, te.prototype.containsBody = function(t) {
    return t.space == this
  }, te.prototype.containsConstraint = function(t) {
    return t.space == this
  }, te.prototype.uncacheArbiter = function(t) {
    delete this.cachedArbiters[a(t.a.hashid, t.b.hashid)], h(this.arbiters, t)
  }, te.prototype.eachBody = function(t) {
    this.lock();
    for(var i = this.bodies, e = 0;i.length > e;e++) {
      t(i[e])
    }
    for(var s = this.sleepingComponents, e = 0;s.length > e;e++) {
      for(var n = s[e], r = n;r;) {
        var o = r.nodeNext;
        t(r), r = o
      }
    }
    this.unlock(!0)
  }, te.prototype.eachShape = function(t) {
    this.lock(), this.activeShapes.each(t), this.staticShapes.each(t), this.unlock(!0)
  }, te.prototype.eachConstraint = function(t) {
    this.lock();
    for(var i = this.constraints, e = 0;i.length > e;e++) {
      t(i[e])
    }
    this.unlock(!0)
  }, te.prototype.reindexStatic = function() {
    s(!this.locked, "You cannot manually reindex objects while the space is locked. Wait until the current query or step is complete."), this.staticShapes.each(function(t) {
      var i = t.body;
      t.update(i.p, i.rot)
    }), this.staticShapes.reindex()
  }, te.prototype.reindexShape = function(t) {
    s(!this.locked, "You cannot manually reindex objects while the space is locked. Wait until the current query or step is complete.");
    var i = t.body;
    t.update(i.p, i.rot), this.activeShapes.reindexObject(t, t.hashid), this.staticShapes.reindexObject(t, t.hashid)
  }, te.prototype.reindexShapesForBody = function(t) {
    for(var i = t.shapeList;i;i = i.next) {
      this.reindexShape(i)
    }
  }, te.prototype.useSpatialHash = function(t, i) {
    throw Error("Spatial Hash not implemented.");
  }, te.prototype.activateBody = function(t) {
    if(s(!t.isRogue(), "Internal error: Attempting to activate a rogue body."), this.locked) {
      -1 === this.rousedBodies.indexOf(t) && this.rousedBodies.push(t)
    }else {
      this.bodies.push(t);
      for(var i = 0;t.shapeList.length > i;i++) {
        var e = t.shapeList[i];
        this.staticShapes.remove(e, e.hashid), this.activeShapes.insert(e, e.hashid)
      }
      for(var n = t.arbiterList;n;n = n.next(t)) {
        var r = n.body_a;
        if(t === r || r.isStatic()) {
          var o = n.a, h = n.b;
          this.cachedArbiters[a(o.hashid, h.hashid)] = n, n.stamp = this.stamp, n.handler = this.lookupHandler(o.collision_type, h.collision_type), this.arbiters.push(n)
        }
      }
      for(var c = t.constraintList;c;c = c.nodeNext) {
        var r = c.a;
        (t === r || r.isStatic()) && this.constraints.push(c)
      }
    }
  }, te.prototype.deactivateBody = function(t) {
    s(!t.isRogue(), "Internal error: Attempting to deactivate a rogue body."), h(this.bodies, t);
    for(var i = 0;t.shapeList.length > i;i++) {
      var e = t.shapeList[i];
      this.activeShapes.remove(e, e.hashid), this.staticShapes.insert(e, e.hashid)
    }
    for(var n = t.arbiterList;n;n = n.next(t)) {
      var r = n.body_a;
      (t === r || r.isStatic()) && this.uncacheArbiter(n)
    }
    for(var o = t.constraintList;o;o = o.nodeNext) {
      var r = o.a;
      (t === r || r.isStatic()) && h(this.constraints, o)
    }
  };
  var ee = function(t) {
    return t ? t.nodeRoot : null
  }, se = function(t) {
    if(t && t.isSleeping(t)) {
      s(!t.isRogue(), "Internal Error: componentActivate() called on a rogue body.");
      for(var i = t.space, e = t;e;) {
        var n = e.nodeNext;
        e.nodeIdleTime = 0, e.nodeRoot = null, e.nodeNext = null, i.activateBody(e), e = n
      }
      h(i.sleepingComponents, t)
    }
  };
  ni.prototype.activate = function() {
    this.isRogue() || (this.nodeIdleTime = 0, se(ee(this)))
  }, ni.prototype.activateStatic = function(t) {
    s(this.isStatic(), "Body.activateStatic() called on a non-static body.");
    for(var i = this.arbiterList;i;i = i.next(this)) {
      t && (t != i.a && t != i.b) || (i.body_a == this ? i.body_b : i.body_a).activate()
    }
  }, ni.prototype.pushArbiter = function(t) {
    n(null === (t.body_a === this ? t.thread_a_next : t.thread_b_next), "Internal Error: Dangling contact graph pointers detected. (A)"), n(null === (t.body_a === this ? t.thread_a_prev : t.thread_b_prev), "Internal Error: Dangling contact graph pointers detected. (B)");
    var i = this.arbiterList;
    n(null === i || null === (i.body_a === this ? i.thread_a_prev : i.thread_b_prev), "Internal Error: Dangling contact graph pointers detected. (C)"), t.body_a === this ? t.thread_a_next = i : t.thread_b_next = i, i && (i.body_a === this ? i.thread_a_prev = t : i.thread_b_prev = t), this.arbiterList = t
  };
  var ne = function(t, i) {
    i.nodeRoot = t, i !== t && (i.nodeNext = t.nodeNext, t.nodeNext = i)
  }, re = function(t, i) {
    if(!i.isRogue()) {
      var e = ee(i);
      if(null == e) {
        ne(t, i);
        for(var s = i.arbiterList;s;s = s.next(i)) {
          re(t, i == s.body_a ? s.body_b : s.body_a)
        }
        for(var r = i.constraintList;r;r = r.next(i)) {
          re(t, i == r.a ? r.b : r.a)
        }
      }else {
        n(e === t, "Internal Error: Inconsistency detected in the contact graph.")
      }
    }
  }, oe = function(t, i) {
    for(var e = t;e;e = e.nodeNext) {
      if(i > e.nodeIdleTime) {
        return!0
      }
    }
    return!1
  };
  te.prototype.processComponents = function(t) {
    for(var i = 1 / 0 !== this.sleepTimeThreshold, e = this.bodies, s = 0;e.length > s;s++) {
      var r = e[s];
      n(null === r.nodeNext, "Internal Error: Dangling next pointer detected in contact graph."), n(null === r.nodeRoot, "Internal Error: Dangling root pointer detected in contact graph.")
    }
    if(i) {
      for(var o = this.idleSpeedThreshold, a = o ? o * o : N(this.gravity) * t * t, s = 0;e.length > s;s++) {
        var r = e[s], h = a ? r.m * a : 0;
        r.nodeIdleTime = r.kineticEnergy() > h ? 0 : r.nodeIdleTime + t
      }
    }
    for(var c = this.arbiters, s = 0, p = c.length;p > s;s++) {
      var u = c[s], l = u.body_a, b = u.body_b;
      i && ((b.isRogue() && !b.isStatic() || l.isSleeping()) && l.activate(), (l.isRogue() && !l.isStatic() || b.isSleeping()) && b.activate()), l.pushArbiter(u), b.pushArbiter(u)
    }
    if(i) {
      for(var y = this.constraints, s = 0;y.length > s;s++) {
        var v = y[s], l = v.a, b = v.b;
        b.isRogue() && (!b.isStatic() && l.activate()), l.isRogue() && (!l.isStatic() && b.activate())
      }
      for(var s = 0;e.length > s;) {
        var r = e[s];
        if(null !== ee(r) || (re(r, r), oe(r, this.sleepTimeThreshold))) {
          s++, r.nodeRoot = null, r.nodeNext = null
        }else {
          this.sleepingComponents.push(r);
          for(var f = r;f;f = f.nodeNext) {
            this.deactivateBody(f)
          }
        }
      }
    }
  }, ni.prototype.sleep = function() {
    this.sleepWithGroup(null)
  }, ni.prototype.sleepWithGroup = function(t) {
    s(!this.isStatic() && !this.isRogue(), "Rogue and static bodies cannot be put to sleep.");
    var i = this.space;
    if(s(i, "Cannot put a rogue body to sleep."), s(!i.locked, "Bodies cannot be put to sleep during a query or a call to cpSpaceStep(). Put these calls into a post-step callback."), s(null === t || t.isSleeping(), "Cannot use a non-sleeping body as a group identifier."), this.isSleeping()) {
      return s(ee(this) === ee(t), "The body is already sleeping and it's group cannot be reassigned."), void 0
    }
    for(var e = 0;this.shapeList.length > e;e++) {
      this.shapeList[e].update(this.p, this.rot)
    }
    if(i.deactivateBody(this), t) {
      var n = ee(t);
      this.nodeRoot = n, this.nodeNext = n.nodeNext, this.nodeIdleTime = 0, n.nodeNext = this
    }else {
      this.nodeRoot = this, this.nodeNext = null, this.nodeIdleTime = 0, i.sleepingComponents.push(this)
    }
    h(i.bodies, this)
  }, te.prototype.activateShapesTouchingShape = function(t) {
    1 / 0 !== this.sleepTimeThreshold && this.shapeQuery(t, function(t) {
      t.body.activate()
    })
  }, te.prototype.pointQuery = function(t, i, e, s) {
    var n = function(n) {
      (!n.group || e !== n.group) && (i & n.layers && (n.pointQuery(t) && s(n)))
    }, r = new D(t.x, t.y, t.x, t.y);
    this.lock(), this.activeShapes.query(r, n), this.staticShapes.query(r, n), this.unlock(!0)
  }, te.prototype.pointQueryFirst = function(t, i, e) {
    var s = null;
    return this.pointQuery(t, i, e, function(t) {
      t.sensor || (s = t)
    }), s
  }, te.prototype.nearestPointQuery = function(t, i, e, s, n) {
    var r = function(r) {
      if((!r.group || s !== r.group) && e & r.layers) {
        var o = r.nearestPointQuery(t);
        i > o.d && n(r, o.d, o.p)
      }
    }, o = G(t, i);
    this.lock(), this.activeShapes.query(o, r), this.staticShapes.query(o, r), this.unlock(!0)
  }, te.prototype.nearestPointQueryNearest = function(t, i, e, s) {
    var n, r = function(r) {
      if((!r.group || s !== r.group) && (e & r.layers && !r.sensor)) {
        var o = r.nearestPointQuery(t);
        i > o.d && ((!n || o.d < n.d) && (n = o))
      }
    }, o = G(t, i);
    return this.activeShapes.query(o, r), this.staticShapes.query(o, r), n
  }, te.prototype.segmentQuery = function(t, i, e, s, n) {
    var r = function(r) {
      var o;
      return(!r.group || s !== r.group) && (e & r.layers && ((o = r.segmentQuery(t, i)) && n(r, o.t, o.n))), 1
    };
    this.lock(), this.staticShapes.segmentQuery(t, i, 1, r), this.activeShapes.segmentQuery(t, i, 1, r), this.unlock(!0)
  }, te.prototype.segmentQueryFirst = function(t, i, e, s) {
    var n = null, r = function(r) {
      var o;
      return(!r.group || s !== r.group) && (e & r.layers && (!r.sensor && ((o = r.segmentQuery(t, i)) && ((null === n || o.t < n.t) && (n = o))))), n ? n.t : 1
    };
    return this.staticShapes.segmentQuery(t, i, 1, r), this.activeShapes.segmentQuery(t, i, n ? n.t : 1, r), n
  }, te.prototype.bbQuery = function(t, i, e, s) {
    var n = function(n) {
      (!n.group || e !== n.group) && (i & n.layers && (W(t, n.bb_l, n.bb_b, n.bb_r, n.bb_t) && s(n)))
    };
    this.lock(), this.activeShapes.query(t, n), this.staticShapes.query(t, n), this.unlock(!0)
  }, te.prototype.shapeQuery = function(t, i) {
    var e = t.body;
    e && t.update(e.p, e.rot);
    var s = new D(t.bb_l, t.bb_b, t.bb_r, t.bb_t), n = !1, r = function(e) {
      var s = t;
      if((!s.group || s.group !== e.group) && (s.layers & e.layers && s !== e)) {
        var r;
        if(s.collisionCode <= e.collisionCode) {
          r = Zi(s, e)
        }else {
          r = Zi(e, s);
          for(var o = 0;r.length > o;o++) {
            r[o].n = j(r[o].n)
          }
        }
        if(r.length && (n = !(s.sensor || e.sensor), i)) {
          for(var a = Array(r.length), o = 0;r.length > o;o++) {
            a[o] = new Ni(r[o].p, r[o].n, r[o].dist)
          }
          i(e, a)
        }
      }
    };
    return this.lock(), this.activeShapes.query(s, r), this.staticShapes.query(s, r), this.unlock(!0), n
  }, te.prototype.addPostStepCallback = function(t) {
    n(this.locked, "Adding a post-step callback when the space is not locked is unnecessary. Post-step callbacks will not called until the end of the next call to cpSpaceStep() or the next query."), this.postStepCallbacks.push(t)
  }, te.prototype.runPostStepCallbacks = function() {
    for(var t = 0;this.postStepCallbacks.length > t;t++) {
      this.postStepCallbacks[t]()
    }
    this.postStepCallbacks = []
  }, te.prototype.lock = function() {
    this.locked++
  }, te.prototype.unlock = function(t) {
    if(this.locked--, s(this.locked >= 0, "Internal Error: Space lock underflow."), 0 === this.locked && t) {
      for(var i = this.rousedBodies, e = 0;i.length > e;e++) {
        this.activateBody(i[e])
      }
      i.length = 0, this.runPostStepCallbacks()
    }
  }, te.prototype.makeCollideShapes = function() {
    var t = this;
    return function(i, e) {
      var s = t;
      if(i.bb_l <= e.bb_r && (e.bb_l <= i.bb_r && (i.bb_b <= e.bb_t && (e.bb_b <= i.bb_t && (i.body !== e.body && ((!i.group || i.group !== e.group) && i.layers & e.layers)))))) {
        var n = s.lookupHandler(i.collision_type, e.collision_type), r = i.sensor || e.sensor;
        if(!r || n !== $i) {
          if(i.collisionCode > e.collisionCode) {
            var o = i;
            i = e, e = o
          }
          var h = Zi(i, e);
          if(0 !== h.length) {
            var c = a(i.hashid, e.hashid), p = s.cachedArbiters[c];
            p || (p = s.cachedArbiters[c] = new Li(i, e)), p.update(h, n, i, e), "first coll" != p.state || (n.begin(p, s) || p.ignore()), "ignore" !== p.state && (n.preSolve(p, s) && !r) ? s.arbiters.push(p) : (p.contacts = null, "ignore" !== p.state && (p.state = "normal")), p.stamp = s.stamp
          }
        }
      }
    }
  }, te.prototype.arbiterSetFilter = function(t) {
    var i = this.stamp - t.stamp, e = t.body_a, s = t.body_b;
    return(e.isStatic() || e.isSleeping()) && (s.isStatic() || s.isSleeping()) ? !0 : (i >= 1 && ("cached" != t.state && (t.callSeparate(this), t.state = "cached")), i >= this.collisionPersistence ? (t.contacts = null, !1) : !0)
  };
  var ae = function(t) {
    var i = t.body;
    t.update(i.p, i.rot)
  };
  te.prototype.step = function(t) {
    if(0 !== t) {
      s(0 === _.x && 0 === _.y, "vzero is invalid"), this.stamp++;
      var i = this.curr_dt;
      this.curr_dt = t;
      var e, n, r, o = this.bodies, a = this.constraints, h = this.arbiters;
      for(e = 0;h.length > e;e++) {
        var c = h[e];
        c.state = "normal", c.body_a.isSleeping() || (c.body_b.isSleeping() || c.unthread())
      }
      for(h.length = 0, this.lock(), e = 0;o.length > e;e++) {
        o[e].position_func(t)
      }
      this.activeShapes.each(ae), this.activeShapes.reindexQuery(this.collideShapes), this.unlock(!1), this.processComponents(t), this.lock();
      for(r in this.cachedArbiters) {
        this.arbiterSetFilter(this.cachedArbiters[r]) || delete this.cachedArbiters[r]
      }
      var p = this.collisionSlop, u = 1 - Math.pow(this.collisionBias, t);
      for(e = 0;h.length > e;e++) {
        h[e].preStep(t, p, u)
      }
      for(e = 0;a.length > e;e++) {
        var l = a[e];
        l.preSolve(this), l.preStep(t)
      }
      var b = Math.pow(this.damping, t), y = this.gravity;
      for(e = 0;o.length > e;e++) {
        o[e].velocity_func(y, b, t)
      }
      var v = 0 === i ? 0 : t / i;
      for(e = 0;h.length > e;e++) {
        h[e].applyCachedImpulse(v)
      }
      for(e = 0;a.length > e;e++) {
        a[e].applyCachedImpulse(v)
      }
      for(e = 0;this.iterations > e;e++) {
        for(n = 0;h.length > n;n++) {
          h[n].applyImpulse()
        }
        for(n = 0;a.length > n;n++) {
          a[n].applyImpulse()
        }
      }
      for(e = 0;a.length > e;e++) {
        a[e].postSolve(this)
      }
      for(e = 0;h.length > e;e++) {
        h[e].handler.postSolve(h[e], this)
      }
      this.unlock(!0)
    }
  };
  var he = function(t, i, e, s) {
    var n = t.vx + -e.y * t.w, r = t.vy + e.x * t.w, o = i.vx + -s.y * i.w, a = i.vy + s.x * i.w;
    return new d(o - n, a - r)
  }, ce = function(t, i, e, s, n) {
    var r = t.vx + -e.y * t.w, o = t.vy + e.x * t.w, a = i.vx + -s.y * i.w, h = i.vy + s.x * i.w;
    return m(a - r, h - o, n.x, n.y)
  }, pe = function(t, i, e, s) {
    t.vx += i * t.m_inv, t.vy += e * t.m_inv, t.w += t.i_inv * (s.x * e - s.y * i)
  }, ue = function(t, i, e, s, n, r) {
    pe(t, -n, -r, e), pe(i, n, r, s)
  }, le = function(t, i, e, s) {
    t.v_biasx += i * t.m_inv, t.v_biasy += e * t.m_inv, t.w_bias += t.i_inv * k(s.x, s.y, i, e)
  }, be = function(t, i, e) {
    var s = C(i, e);
    return t.m_inv + t.i_inv * s * s
  }, ye = function(t, i, e, s, r) {
    var o = be(t, e, r) + be(i, s, r);
    return n(0 !== o, "Unsolvable collision or constraint."), o
  }, ve = function(t, i, e, s, r, o) {
    var a, h, c, p, u = t.m_inv + i.m_inv;
    a = u, h = 0, c = 0, p = u;
    var l = t.i_inv, b = e.x * e.x * l, y = e.y * e.y * l, v = -e.x * e.y * l;
    a += y, h += v, c += v, p += b;
    var f = i.i_inv, d = s.x * s.x * f, _ = s.y * s.y * f, x = -s.x * s.y * f;
    a += _, h += x, c += x, p += d;
    var m = a * p - h * c;
    n(0 !== m, "Unsolvable constraint.");
    var g = 1 / m;
    r.x = p * g, r.y = -h * g, o.x = -c * g, o.y = a * g
  }, fe = function(t, i, e) {
    return new d(x(t, i), x(t, e))
  }, de = function(t, i) {
    return 1 - Math.pow(t, i)
  }, _e = t.Constraint = function(t, i) {
    this.a = t, this.b = i, this.space = null, this.next_a = null, this.next_b = null, this.maxForce = 1 / 0, this.errorBias = Math.pow(0.9, 60), this.maxBias = 1 / 0
  };
  _e.prototype.activateBodies = function() {
    this.a && this.a.activate(), this.b && this.b.activate()
  }, _e.prototype.preStep = function() {
  }, _e.prototype.applyCachedImpulse = function() {
  }, _e.prototype.applyImpulse = function() {
  }, _e.prototype.getImpulse = function() {
    return 0
  }, _e.prototype.preSolve = function() {
  }, _e.prototype.postSolve = function() {
  }, _e.prototype.next = function(t) {
    return this.a === t ? this.next_a : this.next_b
  };
  var xe = t.PinJoint = function(t, i, e, s) {
    _e.call(this, t, i), this.anchr1 = e, this.anchr2 = s;
    var r = t ? S(t.p, P(e, t.rot)) : e, o = i ? S(i.p, P(s, i.rot)) : s;
    this.dist = g(A(o, r)), n(this.dist > 0, "You created a 0 length pin joint. A pivot joint will be much more stable."), this.r1 = this.r2 = null, this.n = null, this.nMass = 0, this.jnAcc = this.jnMax = 0, this.bias = 0
  };
  xe.prototype = Object.create(_e.prototype), xe.prototype.preStep = function(t) {
    var i = this.a, e = this.b;
    this.r1 = P(this.anchr1, i.rot), this.r2 = P(this.anchr2, e.rot);
    var s = A(S(e.p, this.r2), S(i.p, this.r1)), n = g(s);
    this.n = B(s, 1 / (n ? n : 1 / 0)), this.nMass = 1 / ye(i, e, this.r1, this.r2, this.n);
    var r = this.maxBias;
    this.bias = v(-de(this.errorBias, t) * (n - this.dist) / t, -r, r), this.jnMax = this.maxForce * t
  }, xe.prototype.applyCachedImpulse = function(t) {
    var i = B(this.n, this.jnAcc * t);
    ue(this.a, this.b, this.r1, this.r2, i.x, i.y)
  }, xe.prototype.applyImpulse = function() {
    var t = this.a, i = this.b, e = this.n, s = ce(t, i, this.r1, this.r2, e), n = (this.bias - s) * this.nMass, r = this.jnAcc;
    this.jnAcc = v(r + n, -this.jnMax, this.jnMax), n = this.jnAcc - r, ue(t, i, this.r1, this.r2, e.x * n, e.y * n)
  }, xe.prototype.getImpulse = function() {
    return Math.abs(this.jnAcc)
  };
  var me = t.SlideJoint = function(t, i, e, s, n, r) {
    _e.call(this, t, i), this.anchr1 = e, this.anchr2 = s, this.min = n, this.max = r, this.r1 = this.r2 = this.n = null, this.nMass = 0, this.jnAcc = this.jnMax = 0, this.bias = 0
  };
  me.prototype = Object.create(_e.prototype), me.prototype.preStep = function(t) {
    var i = this.a, e = this.b;
    this.r1 = P(this.anchr1, i.rot), this.r2 = P(this.anchr2, e.rot);
    var s = A(S(e.p, this.r2), S(i.p, this.r1)), n = g(s), r = 0;
    n > this.max ? (r = n - this.max, this.n = R(s)) : this.min > n ? (r = this.min - n, this.n = j(R(s))) : (this.n = _, this.jnAcc = 0), this.nMass = 1 / ye(i, e, this.r1, this.r2, this.n);
    var o = this.maxBias;
    this.bias = v(-de(this.errorBias, t) * r / t, -o, o), this.jnMax = this.maxForce * t
  }, me.prototype.applyCachedImpulse = function(t) {
    var i = this.jnAcc * t;
    ue(this.a, this.b, this.r1, this.r2, this.n.x * i, this.n.y * i)
  }, me.prototype.applyImpulse = function() {
    if(0 !== this.n.x || 0 !== this.n.y) {
      var t = this.a, i = this.b, e = this.n, s = this.r1, n = this.r2, r = he(t, i, s, n), o = x(r, e), a = (this.bias - o) * this.nMass, h = this.jnAcc;
      this.jnAcc = v(h + a, -this.jnMax, 0), a = this.jnAcc - h, ue(t, i, this.r1, this.r2, e.x * a, e.y * a)
    }
  }, me.prototype.getImpulse = function() {
    return Math.abs(this.jnAcc)
  };
  var ge = t.PivotJoint = function(t, i, e, s) {
    if(_e.call(this, t, i), s === void 0) {
      var n = e;
      e = t ? t.world2Local(n) : n, s = i ? i.world2Local(n) : n
    }
    this.anchr1 = e, this.anchr2 = s, this.r1 = this.r2 = _, this.k1 = new d(0, 0), this.k2 = new d(0, 0), this.jAcc = _, this.jMaxLen = 0, this.bias = _
  };
  ge.prototype = Object.create(_e.prototype), ge.prototype.preStep = function(t) {
    var i = this.a, e = this.b;
    this.r1 = P(this.anchr1, i.rot), this.r2 = P(this.anchr2, e.rot), ve(i, e, this.r1, this.r2, this.k1, this.k2), this.jMaxLen = this.maxForce * t;
    var s = A(S(e.p, this.r2), S(i.p, this.r1));
    this.bias = V(B(s, -de(this.errorBias, t) / t), this.maxBias)
  }, ge.prototype.applyCachedImpulse = function(t) {
    ue(this.a, this.b, this.r1, this.r2, this.jAcc.x * t, this.jAcc.y * t)
  }, ge.prototype.applyImpulse = function() {
    var t = this.a, i = this.b, e = this.r1, s = this.r2, n = he(t, i, e, s), r = fe(A(this.bias, n), this.k1, this.k2), o = this.jAcc;
    this.jAcc = V(S(this.jAcc, r), this.jMaxLen), ue(t, i, this.r1, this.r2, this.jAcc.x - o.x, this.jAcc.y - o.y)
  }, ge.prototype.getImpulse = function() {
    return g(this.jAcc)
  };
  var we = t.GrooveJoint = function(t, i, e, s, n) {
    _e.call(this, t, i), this.grv_a = e, this.grv_b = s, this.grv_n = M(T(A(s, e))), this.anchr2 = n, this.grv_tn = null, this.clamp = 0, this.r1 = this.r2 = null, this.k1 = new d(0, 0), this.k2 = new d(0, 0), this.jAcc = _, this.jMaxLen = 0, this.bias = null
  };
  we.prototype = Object.create(_e.prototype), we.prototype.preStep = function(t) {
    var i = this.a, e = this.b, s = i.local2World(this.grv_a), n = i.local2World(this.grv_b), r = P(this.grv_n, i.rot), o = x(s, r);
    this.grv_tn = r, this.r2 = P(this.anchr2, e.rot);
    var a = C(S(e.p, this.r2), r);
    C(s, r) >= a ? (this.clamp = 1, this.r1 = A(s, i.p)) : a >= C(n, r) ? (this.clamp = -1, this.r1 = A(n, i.p)) : (this.clamp = 0, this.r1 = A(S(B(M(r), -a), B(r, o)), i.p)), ve(i, e, this.r1, this.r2, this.k1, this.k2), this.jMaxLen = this.maxForce * t;
    var h = A(S(e.p, this.r2), S(i.p, this.r1));
    this.bias = V(B(h, -de(this.errorBias, t) / t), this.maxBias)
  }, we.prototype.applyCachedImpulse = function(t) {
    ue(this.a, this.b, this.r1, this.r2, this.jAcc.x * t, this.jAcc.y * t)
  }, we.prototype.grooveConstrain = function(t) {
    var i = this.grv_tn, e = this.clamp * C(t, i) > 0 ? t : I(t, i);
    return V(e, this.jMaxLen)
  }, we.prototype.applyImpulse = function() {
    var t = this.a, i = this.b, e = this.r1, s = this.r2, n = he(t, i, e, s), r = fe(A(this.bias, n), this.k1, this.k2), o = this.jAcc;
    this.jAcc = this.grooveConstrain(S(o, r)), ue(t, i, this.r1, this.r2, this.jAcc.x - o.x, this.jAcc.y - o.y)
  }, we.prototype.getImpulse = function() {
    return g(this.jAcc)
  }, we.prototype.setGrooveA = function(t) {
    this.grv_a = t, this.grv_n = M(T(A(this.grv_b, t))), this.activateBodies()
  }, we.prototype.setGrooveB = function(t) {
    this.grv_b = t, this.grv_n = M(T(A(t, this.grv_a))), this.activateBodies()
  };
  var Se = function(t, i) {
    return(t.restLength - i) * t.stiffness
  }, Ae = t.DampedSpring = function(t, i, e, s, n, r, o) {
    _e.call(this, t, i), this.anchr1 = e, this.anchr2 = s, this.restLength = n, this.stiffness = r, this.damping = o, this.springForceFunc = Se, this.target_vrn = this.v_coef = 0, this.r1 = this.r2 = null, this.nMass = 0, this.n = null
  };
  Ae.prototype = Object.create(_e.prototype), Ae.prototype.preStep = function(t) {
    var i = this.a, e = this.b;
    this.r1 = P(this.anchr1, i.rot), this.r2 = P(this.anchr2, e.rot);
    var s = A(S(e.p, this.r2), S(i.p, this.r1)), r = g(s);
    this.n = B(s, 1 / (r ? r : 1 / 0));
    var o = ye(i, e, this.r1, this.r2, this.n);
    n(0 !== o, "Unsolvable this."), this.nMass = 1 / o, this.target_vrn = 0, this.v_coef = 1 - Math.exp(-this.damping * t * o);
    var a = this.springForceFunc(this, r);
    ue(i, e, this.r1, this.r2, this.n.x * a * t, this.n.y * a * t)
  }, Ae.prototype.applyCachedImpulse = function() {
  }, Ae.prototype.applyImpulse = function() {
    var t = this.a, i = this.b, e = this.n, s = this.r1, n = this.r2, r = ce(t, i, s, n, e), o = (this.target_vrn - r) * this.v_coef;
    this.target_vrn = r + o, o *= this.nMass, ue(t, i, this.r1, this.r2, this.n.x * o, this.n.y * o)
  }, Ae.prototype.getImpulse = function() {
    return 0
  };
  var je = function(t, i) {
    return(i - t.restAngle) * t.stiffness
  }, Be = t.DampedRotarySpring = function(t, i, e, s, n) {
    _e.call(this, t, i), this.restAngle = e, this.stiffness = s, this.damping = n, this.springTorqueFunc = je, this.target_wrn = 0, this.w_coef = 0, this.iSum = 0
  };
  Be.prototype = Object.create(_e.prototype), Be.prototype.preStep = function(t) {
    var i = this.a, e = this.b, s = i.i_inv + e.i_inv;
    n(0 !== s, "Unsolvable spring."), this.iSum = 1 / s, this.w_coef = 1 - Math.exp(-this.damping * t * s), this.target_wrn = 0;
    var r = this.springTorqueFunc(this, i.a - e.a) * t;
    i.w -= r * i.i_inv, e.w += r * e.i_inv
  }, Be.prototype.applyImpulse = function() {
    var t = this.a, i = this.b, e = t.w - i.w, s = (this.target_wrn - e) * this.w_coef;
    this.target_wrn = e + s;
    var n = s * this.iSum;
    t.w += n * t.i_inv, i.w -= n * i.i_inv
  };
  var Ce = t.RotaryLimitJoint = function(t, i, e, s) {
    _e.call(this, t, i), this.min = e, this.max = s, this.jAcc = 0, this.iSum = this.bias = this.jMax = 0
  };
  Ce.prototype = Object.create(_e.prototype), Ce.prototype.preStep = function(t) {
    var i = this.a, e = this.b, s = e.a - i.a, n = 0;
    s > this.max ? n = this.max - s : this.min > s && (n = this.min - s), this.iSum = 1 / (1 / i.i + 1 / e.i);
    var r = this.maxBias;
    this.bias = v(-de(this.errorBias, t) * n / t, -r, r), this.jMax = this.maxForce * t, this.bias || (this.jAcc = 0)
  }, Ce.prototype.applyCachedImpulse = function(t) {
    var i = this.a, e = this.b, s = this.jAcc * t;
    i.w -= s * i.i_inv, e.w += s * e.i_inv
  }, Ce.prototype.applyImpulse = function() {
    if(this.bias) {
      var t = this.a, i = this.b, e = i.w - t.w, s = -(this.bias + e) * this.iSum, n = this.jAcc;
      this.jAcc = 0 > this.bias ? v(n + s, 0, this.jMax) : v(n + s, -this.jMax, 0), s = this.jAcc - n, t.w -= s * t.i_inv, i.w += s * i.i_inv
    }
  }, Ce.prototype.getImpulse = function() {
    return Math.abs(joint.jAcc)
  };
  var ke = t.RatchetJoint = function(t, i, e, s) {
    _e.call(this, t, i), this.angle = 0, this.phase = e, this.ratchet = s, this.angle = (i ? i.a : 0) - (t ? t.a : 0), this.iSum = this.bias = this.jAcc = this.jMax = 0
  };
  ke.prototype = Object.create(_e.prototype), ke.prototype.preStep = function(t) {
    var i = this.a, e = this.b, s = this.angle, n = this.phase, r = this.ratchet, o = e.a - i.a, a = s - o, h = 0;
    a * r > 0 ? h = a : this.angle = Math.floor((o - n) / r) * r + n, this.iSum = 1 / (i.i_inv + e.i_inv);
    var c = this.maxBias;
    this.bias = v(-de(this.errorBias, t) * h / t, -c, c), this.jMax = this.maxForce * t, this.bias || (this.jAcc = 0)
  }, ke.prototype.applyCachedImpulse = function(t) {
    var i = this.a, e = this.b, s = this.jAcc * t;
    i.w -= s * i.i_inv, e.w += s * e.i_inv
  }, ke.prototype.applyImpulse = function() {
    if(this.bias) {
      var t = this.a, i = this.b, e = i.w - t.w, s = this.ratchet, n = -(this.bias + e) * this.iSum, r = this.jAcc;
      this.jAcc = v((r + n) * s, 0, this.jMax * Math.abs(s)) / s, n = this.jAcc - r, t.w -= n * t.i_inv, i.w += n * i.i_inv
    }
  }, ke.prototype.getImpulse = function(t) {
    return Math.abs(t.jAcc)
  };
  var Me = t.GearJoint = function(t, i, e, s) {
    _e.call(this, t, i), this.phase = e, this.ratio = s, this.ratio_inv = 1 / s, this.jAcc = 0, this.iSum = this.bias = this.jMax = 0
  };
  Me.prototype = Object.create(_e.prototype), Me.prototype.preStep = function(t) {
    var i = this.a, e = this.b;
    this.iSum = 1 / (i.i_inv * this.ratio_inv + this.ratio * e.i_inv);
    var s = this.maxBias;
    this.bias = v(-de(this.errorBias, t) * (e.a * this.ratio - i.a - this.phase) / t, -s, s), this.jMax = this.maxForce * t
  }, Me.prototype.applyCachedImpulse = function(t) {
    var i = this.a, e = this.b, s = this.jAcc * t;
    i.w -= s * i.i_inv * this.ratio_inv, e.w += s * e.i_inv
  }, Me.prototype.applyImpulse = function() {
    var t = this.a, i = this.b, e = i.w * this.ratio - t.w, s = (this.bias - e) * this.iSum, n = this.jAcc;
    this.jAcc = v(n + s, -this.jMax, this.jMax), s = this.jAcc - n, t.w -= s * t.i_inv * this.ratio_inv, i.w += s * i.i_inv
  }, Me.prototype.getImpulse = function() {
    return Math.abs(this.jAcc)
  }, Me.prototype.setRatio = function(t) {
    this.ratio = t, this.ratio_inv = 1 / t, this.activateBodies()
  };
  var Ie = t.SimpleMotor = function(t, i, e) {
    _e.call(this, t, i), this.rate = e, this.jAcc = 0, this.iSum = this.jMax = 0
  };
  Ie.prototype = Object.create(_e.prototype), Ie.prototype.preStep = function(t) {
    this.iSum = 1 / (this.a.i_inv + this.b.i_inv), this.jMax = this.maxForce * t
  }, Ie.prototype.applyCachedImpulse = function(t) {
    var i = this.a, e = this.b, s = this.jAcc * t;
    i.w -= s * i.i_inv, e.w += s * e.i_inv
  }, Ie.prototype.applyImpulse = function() {
    var t = this.a, i = this.b, e = i.w - t.w + this.rate, s = -e * this.iSum, n = this.jAcc;
    this.jAcc = v(n + s, -this.jMax, this.jMax), s = this.jAcc - n, t.w -= s * t.i_inv, i.w += s * i.i_inv
  }, Ie.prototype.getImpulse = function() {
    return Math.abs(this.jAcc)
  }
})();
var world;
var PHYS_SCALE = 1;
var RAD_TO_DEGREES = 180 / Math.PI;
var DEGREES_TO_RAD = Math.PI / 180;
var objA;
var objB;
var debugCanvas;
var debugDraw;
var space;
var v = cp.v;
var GRABABLE_MASK_BIT = 1 << 31;
var NOT_GRABABLE_MASK = ~GRABABLE_MASK_BIT;
function initPhysics(isReinit) {
  if(isLevelEditor && isEditorDebug) {
    isPhysicsDebugDraw = true
  }
  if(isPhysicsDebugDraw && !isReinit) {
    debugCanvas = document.createElement("canvas");
    debugCanvas.id = "debugCanvas";
    debugCanvas.width = minW;
    debugCanvas.height = minH;
    debugCanvas.style.position = "absolute";
    debugCanvas.style.left = "50%";
    debugCanvas.style.top = "10%";
    debugCanvas.style.zIndex = "2";
    debugCanvas.style.pointerEvents = "none";
    document.body.appendChild(debugCanvas);
    ChipMunkDebugDrawer.prototype.canvas = debugCanvas;
    ChipMunkDebugDrawer.prototype.ctx = debugCanvas.getContext("2d");
    onWindowResize(null)
  }
  debugDraw = new ChipMunkDebugDrawer;
  space = debugDraw.space;
  space.iterations = 10;
  space.gravity = v(0, 0);
  space.sleepTimeThreshold = 1;
  space.collisionSlop = 1;
  space.damping = PHYSICS_DAMPING;
  space.addCollisionHandler(0, 0, null, onZombieContactPreSolve, null, null);
  space.addCollisionHandler(1, 0, null, onSensorContactPreSolve, null, null);
  space.addCollisionHandler(2, 0, onGlassContactBegin, null, null, null);
  space.addCollisionHandler(2, 2, onGlassContactBegin, null, null, null);
  space.addCollisionHandler(5, 0, null, onElectricityContractPreSolve, null, null);
  space.addCollisionHandler(6, 0, onDangerContactBegin, null, null, null);
  space.addCollisionHandler(7, 0, null, onSpikesContractPreSolve, null, null);
  space.addCollisionHandler(8, 0, onTrapContractBegin, null, null, null);
  space.addCollisionHandler(9, 0, onBananaContractBegin, null, null, null);
  space.addCollisionHandler(12, 0, null, onButtonContractPreSolve, null, null)
}
function onButtonContractPreSolve(arb, space, ptr) {
  objA = arb.body_a.userdata;
  objB = arb.body_b.userdata;
  collidedSensor = collidedAim = null;
  if(objA && objB) {
    if(arb.a.sensor) {
      collidedSensor = objA;
      collidedAim = objB
    }else {
      if(arb.b.sensor) {
        collidedSensor = objB;
        collidedAim = objA
      }
    }
    if(!collidedSensor || collidedSensor.isActivated) {
      return true
    }
    if(!collidedAim.isHero) {
      return true
    }
    if(collidedAim.isDied) {
      return true
    }
    collidedSensor.isActivated = true
  }
  return true
}
function onBananaContractBegin(arb, space, ptr) {
  objA = arb.body_a.userdata;
  objB = arb.body_b.userdata;
  collidedSensor = collidedAim = null;
  if(objA && objB) {
    if(arb.a.sensor) {
      collidedSensor = objA;
      collidedAim = objB
    }else {
      if(arb.b.sensor) {
        collidedSensor = objB;
        collidedAim = objA
      }
    }
    if(!collidedSensor || collidedSensor.isActivated) {
      return true
    }
    if(!collidedAim.isHero) {
      return true
    }
    if(collidedAim.isDied) {
      return true
    }
    collidedAim.applyBananaImpulse()
  }
  return true
}
function onDangerContactBegin(arb, space, ptr) {
  objA = arb.body_a.userdata;
  objB = arb.body_b.userdata;
  collidedSensor = collidedAim = null;
  if(objA && objB) {
    if(arb.a.sensor) {
      collidedSensor = objA;
      collidedAim = objB
    }else {
      if(arb.b.sensor) {
        collidedSensor = objB;
        collidedAim = objA
      }
    }
    if(!collidedSensor) {
      return true
    }
    if(!collidedAim.isHero) {
      return true
    }
    if(collidedAim.isDied) {
      return true
    }
    collidedAim.die(collidedSensor.vis.x, collidedSensor.vis.y);
    if(collidedSensor.type === STAIRS_DANGER_TYPE) {
      playSound("basementfall")
    }else {
      playDeathSpikes()
    }
  }
  return true
}
function onTrapContractBegin(arb, space, ptr) {
  objA = arb.body_a.userdata;
  objB = arb.body_b.userdata;
  collidedSensor = collidedAim = null;
  if(objA && objB) {
    if(arb.a.sensor) {
      collidedSensor = objA;
      collidedAim = objB
    }else {
      if(arb.b.sensor) {
        collidedSensor = objB;
        collidedAim = objA
      }
    }
    if(!collidedSensor || collidedSensor.isActivated) {
      return true
    }
    if(!collidedAim.isHero) {
      return true
    }
    if(collidedAim.isDied) {
      return true
    }
    collidedSensor.trapHero(collidedAim)
  }
  return true
}
function onSpikesContractPreSolve(arb, space, ptr) {
  objA = arb.body_a.userdata;
  objB = arb.body_b.userdata;
  collidedSensor = collidedAim = null;
  if(objA && objB) {
    if(arb.a.sensor) {
      collidedSensor = objA;
      collidedAim = objB
    }else {
      if(arb.b.sensor) {
        collidedSensor = objB;
        collidedAim = objA
      }
    }
    if(!collidedSensor || !collidedSensor.isActivated) {
      return true
    }
    if(!collidedAim.isHero) {
      return true
    }
    if(collidedAim.isDied) {
      return true
    }
    collidedAim.die(collidedSensor.vis.x, collidedSensor.vis.y);
    collidedSensor.activTime = BIG_DISTANCE;
    playDeathSpikes()
  }
  return true
}
function onElectricityContractPreSolve(arb, space, ptr) {
  objA = arb.body_a.userdata;
  objB = arb.body_b.userdata;
  collidedSensor = collidedAim = null;
  if(objA && objB) {
    if(arb.a.sensor) {
      collidedSensor = objA;
      collidedAim = objB
    }else {
      if(arb.b.sensor) {
        collidedSensor = objB;
        collidedAim = objA
      }
    }
    if(!collidedSensor || !collidedSensor.isActivated) {
      return true
    }
    if(!collidedAim.isHero) {
      return true
    }
    if(collidedAim.isDied) {
      return true
    }
    collidedAim.dieByElectricity(collidedSensor.vis.x, collidedSensor.vis.y);
    collidedSensor.activTime = BIG_DISTANCE
  }
  return true
}
function onZombieContactPreSolve(arb, space) {
  objA = arb.body_a.userdata;
  objB = arb.body_b.userdata;
  collidedBuyer = collidedZombie = null;
  if(objA && objB) {
    if(objA.isZombie && objB.isBuyer) {
      collidedZombie = objA;
      collidedBuyer = objB
    }else {
      if(objB.isZombie && objA.isBuyer) {
        collidedZombie = objB;
        collidedBuyer = objA
      }
    }
    if(collidedZombie) {
      collidedBuyer.transformToZombie(collidedZombie)
    }
  }
  return true
}
function onGlassContactBegin(arb, space) {
  objA = arb.body_a.userdata;
  objB = arb.body_b.userdata;
  collidedGlass = collidedAim = null;
  if(objA && objB) {
    if(objA.isGlass) {
      collidedGlass = objA;
      collidedAim = objB
    }else {
      if(objB.isGlass) {
        collidedGlass = objB;
        collidedAim = objA
      }
    }
    if(collidedGlass) {
      collidedBody = collidedAim.physBody;
      if(collidedBody && collidedAim.physBody.isStatic()) {
        collidedBody = collidedGlass.physBody
      }
      if(!collidedBody) {
        return true
      }
      var velX = collidedBody.vx;
      var velY = collidedBody.vy;
      var veloc = Math.sqrt(velX * velX + velY * velY);
      if(veloc > GLASS_BREAK_VELOCITY) {
        addToArray(clickedChars, collidedGlass);
        if(collidedAim.isGlass) {
          addToArray(clickedChars, collidedAim)
        }
      }
    }
  }
  return true
}
function onSensorContactPreSolve(arb, space, ptr) {
  objA = arb.body_a.userdata;
  objB = arb.body_b.userdata;
  collidedSensor = collidedAim = null;
  if(objA && objB) {
    if(arb.a.sensor) {
      collidedSensor = objA;
      collidedAim = objB
    }else {
      if(arb.b.sensor) {
        collidedSensor = objB;
        collidedAim = objA
      }
    }
    if(collidedSensor && (collidedSensor.isActivated && collidedAim.isFanMovable)) {
      if(collidedAim.physBody) {
        dx = collidedAim.vis.x - collidedSensor.vis.x;
        dy = collidedAim.vis.y - collidedSensor.vis.y;
        dist = Math.sqrt(dx * dx + dy * dy);
        force = Math.max(0, 1 - dist / collidedSensor.activDistance);
        force *= collidedSensor.activForce * collidedAim.physBody.m;
        angle = collidedSensor.vis.rotation * DEGREES_TO_RAD;
        if(collidedSensor.isReversed) {
          angle += Math.PI
        }
        collidedAim.physBody.applyImpulse(v(force * Math.cos(angle), force * Math.sin(angle)), cp.vzero)
      }
    }
  }
  return true
}
var worldManifold;
var isCollideParticlesNeed = true;
var collidedChar, collidedAim, collidedSensor, collidedBody, collidedGlass, force, angle, collidedBuyer, collidedZombie;
var fixDef;
var bodyDef;
function createCircleShape(x, y, radius, type, angle, ch) {
  var isStatic = false;
  var friction = 0.5;
  var elasticity = 0.3;
  var mass = 1;
  if(type === BUYER_TYPE) {
    elasticity = 0.8
  }else {
    if(type === FAN_TYPE) {
      isStatic = true;
      friction = 0.8;
      elasticity = 0
    }else {
      if(type === CATCHED_HERO_TYPE) {
        isStatic = true;
        friction = 0.5;
        elasticity = 0.3
      }
    }
  }
  var body;
  if(!isStatic) {
    body = space.addBody(new cp.Body(mass, cp.momentForCircle(mass, 0, radius, v(0, 0))))
  }else {
    body = new cp.Body(Infinity, Infinity);
    if(!ch.isMovable) {
      body.nodeIdleTime = Infinity
    }
    ch.isFanMovable = false
  }
  body.setPos(v(x, y));
  body.setAngle(angle);
  var circle = space.addShape(new cp.CircleShape(body, radius, v(0, 0)));
  circle.setElasticity(elasticity);
  circle.setFriction(friction);
  if(type === FAN_TYPE) {
    var sensor;
    if(ch.isReversed) {
      sensor = space.addShape(new cp.BoxShape2(body, new cp.BB(-ch.activDistance, -15, 0, 15)))
    }else {
      sensor = space.addShape(new cp.BoxShape2(body, new cp.BB(0, -15, ch.activDistance, 15)))
    }
    sensor.setSensor(true);
    sensor.setCollisionType(1)
  }
  return body
}
var DEFAULT_RECT_SIZE = 90 / PHYS_SCALE;
var DEFAULT_BOX_SIZE = 52 / PHYS_SCALE;
function createRectPhysics(x, y, scaleX, scaleY, type, angle, ch) {
  var defWidth = DEFAULT_RECT_SIZE;
  var defHeight = DEFAULT_RECT_SIZE;
  var isStatic = false;
  var friction = 0.6;
  var collisionType = 0;
  var elasticity = 0;
  var density = 1 / 1E3;
  var offsetX = 0;
  var offsetY = 0;
  var isWithOffset = false;
  if(type === PHYSICS_RECT_TYPE) {
    isStatic = true
  }else {
    if(type === DYNAMIC_BOX_TYPE) {
      defWidth = DEFAULT_BOX_SIZE;
      defHeight = DEFAULT_BOX_SIZE;
      friction = 0.8
    }else {
      if(type === HARD_BOX_TYPE) {
        defWidth = 30 / PHYS_SCALE;
        defHeight = 30 / PHYS_SCALE;
        friction = 0.8
      }else {
        if(type === STATIC_BOX_TYPE) {
          defWidth = 30 / PHYS_SCALE;
          defHeight = 30 / PHYS_SCALE;
          if(ch.getAdditParams(0) === "3") {
            defWidth = DEFAULT_BOX_SIZE;
            defHeight = DEFAULT_BOX_SIZE
          }
          friction = 0.8;
          isStatic = true
        }else {
          if(type === DANGER_TYPE) {
            defWidth = 100 / PHYS_SCALE;
            defHeight = 18 / PHYS_SCALE
          }else {
            if(type === PHYSICS_MAN_BLOCK_TYPE) {
              defWidth = 194 / PHYS_SCALE;
              defHeight = 23 / PHYS_SCALE
            }else {
              if(type === GLASS_BLOCK_TYPE) {
                defWidth = 103 / PHYS_SCALE;
                defHeight = 20 / PHYS_SCALE;
                if(ch.isStaticBlock) {
                  isStatic = true
                }
                collisionType = 2
              }else {
                if(type === GLASS_BOX_TYPE) {
                  defWidth = 30 / PHYS_SCALE;
                  defHeight = 30 / PHYS_SCALE;
                  if(ch.isStaticBlock) {
                    isStatic = true
                  }
                  collisionType = 2
                }else {
                  if(type === DOOR_TYPE) {
                    defWidth = 122 / PHYS_SCALE;
                    defHeight = 18 / PHYS_SCALE
                  }else {
                    if(type === DYNAMIC_RECT_TYPE) {
                      defWidth = 109 / PHYS_SCALE;
                      defHeight = 20 / PHYS_SCALE;
                      friction = 0.8
                    }else {
                      if(type === DYNAMIC_RECT_2_TYPE) {
                        defWidth = 214 / PHYS_SCALE;
                        defHeight = 20 / PHYS_SCALE;
                        friction = 0.8
                      }else {
                        if(type === HARD_RECT_TYPE) {
                          defWidth = 109 / PHYS_SCALE;
                          defHeight = 20 / PHYS_SCALE;
                          friction = 0.8;
                          density = 1 / 1500
                        }else {
                          if(type === STATIC_BALK_1_TYPE) {
                            defWidth = 109 / PHYS_SCALE;
                            defHeight = 20 / PHYS_SCALE;
                            friction = 0.8;
                            isStatic = true
                          }else {
                            if(type === STATIC_BALK_2_TYPE) {
                              defWidth = 214 / PHYS_SCALE;
                              defHeight = 20 / PHYS_SCALE;
                              friction = 0.8;
                              isStatic = true
                            }else {
                              if(type === DYNAMIC_ANGLE_TYPE) {
                                defWidth = 214 / PHYS_SCALE;
                                defHeight = 20 / PHYS_SCALE;
                                friction = 0.8
                              }else {
                                if(type === TABLE_1_TYPE) {
                                  defWidth = 163 / PHYS_SCALE;
                                  defHeight = 63 / PHYS_SCALE;
                                  friction = 0.8;
                                  isStatic = true;
                                  offsetY = 5;
                                  isWithOffset = true;
                                  elasticity = 0.9
                                }else {
                                  if(type === TABLE_2_TYPE) {
                                    defWidth = 120 / PHYS_SCALE;
                                    defHeight = 63 / PHYS_SCALE;
                                    friction = 0.8;
                                    isStatic = true;
                                    offsetY = 5;
                                    isWithOffset = true;
                                    elasticity = 0.5
                                  }else {
                                    if(type === TABLE_3_TYPE) {
                                      defWidth = 80 / PHYS_SCALE;
                                      defHeight = 64 / PHYS_SCALE;
                                      friction = 0.8;
                                      isStatic = true;
                                      offsetY = 5;
                                      offsetX = -10;
                                      isWithOffset = true;
                                      elasticity = 0.5
                                    }else {
                                      if(type === TABLE_4_TYPE) {
                                        defWidth = 95 / PHYS_SCALE;
                                        defHeight = 60 / PHYS_SCALE;
                                        friction = 0.8;
                                        isStatic = true;
                                        offsetY = 5;
                                        offsetX = 0;
                                        isWithOffset = true;
                                        elasticity = 0.5
                                      }else {
                                        if(type === TABLE_5_TYPE) {
                                          defWidth = 54 / PHYS_SCALE;
                                          defHeight = 54 / PHYS_SCALE;
                                          friction = 0.8;
                                          isStatic = true;
                                          offsetY = 5;
                                          offsetX = 0;
                                          isWithOffset = true;
                                          elasticity = 0.5
                                        }else {
                                          if(type === INVISIBLE_TYPE) {
                                            defWidth = 140;
                                            if(ch.skinId.length > 0) {
                                              defWidth = 102
                                            }
                                            defHeight = 28;
                                            friction = 0.8;
                                            isStatic = true;
                                            collisionType = 10
                                          }else {
                                            if(type === DOOR_REMOTE_TYPE) {
                                              defWidth = 125;
                                              if(ch.skinId.length > 0) {
                                                defWidth = 90
                                              }
                                              defHeight = 45;
                                              friction = 0.8;
                                              isStatic = true;
                                              collisionType = 10
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  var width = defWidth * scaleX;
  var height = defHeight * scaleY;
  var body;
  if(!isStatic) {
    var mass = width * height * density;
    body = space.addBody(new cp.Body(mass, cp.momentForBox(mass, width, height)))
  }else {
    body = new cp.Body(Infinity, Infinity);
    body.nodeIdleTime = Infinity;
    ch.isFanMovable = false
  }
  body.setPos(v(x, y));
  body.setAngle(angle);
  var shape;
  if(isWithOffset) {
    shape = space.addShape(new cp.BoxShape2(body, new cp.BB(-width / 2 + offsetX, -height / 2 + offsetY, width / 2, height / 2)))
  }else {
    shape = space.addShape(new cp.BoxShape(body, width, height))
  }
  shape.setCollisionType(collisionType);
  shape.setFriction(friction);
  shape.setElasticity(elasticity);
  if(type === DYNAMIC_ANGLE_TYPE) {
    shape = space.addShape(new cp.BoxShape2(body, new cp.BB(-width / 2, -height / 2, -width / 2 + defHeight * scaleX, (defWidth - height / 2) * scaleY)));
    shape.setFriction(friction);
    shape.setElasticity(elasticity);
    shape.setCollisionType(collisionType)
  }
  return body
}
function createBoxSensorPhysics(x, y, scaleX, scaleY, type, angle, ch) {
  var defWidth = DEFAULT_RECT_SIZE;
  var defHeight = DEFAULT_RECT_SIZE;
  var collisionType = 0;
  if(type === ELECTRO_DANGER_TYPE) {
    defWidth = 164;
    defHeight = 20;
    collisionType = 5
  }else {
    if(type === STAIRS_DANGER_TYPE) {
      defWidth = 40;
      defHeight = 40;
      collisionType = 6
    }else {
      if(type === SPIKE_TYPE) {
        defWidth = 40;
        defHeight = 30;
        collisionType = 7
      }else {
        if(type === TRAP_TYPE) {
          defWidth = 40;
          defHeight = 20;
          collisionType = 8
        }
      }
    }
  }
  var width = defWidth * scaleX;
  var height = defHeight * scaleY;
  var body;
  body = new cp.Body(Infinity, Infinity);
  body.nodeIdleTime = Infinity;
  ch.isFanMovable = false;
  body.setPos(v(x, y));
  body.setAngle(angle);
  var shape = space.addShape(new cp.BoxShape(body, width, height));
  shape.setCollisionType(collisionType);
  shape.setSensor(true);
  if(type === ELECTRO_DANGER_TYPE) {
    var radius = 15 * scaleX;
    space.addShape(new cp.CircleShape(body, radius, v(-80 * scaleX, 0)));
    space.addShape(new cp.CircleShape(body, radius, v(80 * scaleX, 2)))
  }
  return body
}
function createCircleSensorPhysics(x, y, scaleX, scaleY, type, angle, ch) {
  var radius = 10;
  var collisionType = 0;
  if(type === BUSH_DANGER_TYPE) {
    radius = 33;
    collisionType = 6
  }else {
    if(type === BANANA_TYPE) {
      radius = 10;
      collisionType = 9
    }else {
      if(type === BUTTON_TYPE) {
        radius = 20;
        collisionType = 12
      }
    }
  }
  var body;
  body = new cp.Body(Infinity, Infinity);
  body.nodeIdleTime = Infinity;
  ch.isFanMovable = false;
  body.setPos(v(x, y));
  body.setAngle(angle);
  var shape = space.addShape(new cp.CircleShape(body, radius * scaleX, v(0, 0)));
  shape.setCollisionType(collisionType);
  shape.setSensor(true);
  return body
}
function createKinematicPhysics(x, y, scaleX, scaleY, type, angle, ch) {
  ch.isFanMovable = false;
  var friction = 0.8;
  var elasticity = 0;
  var width = 0;
  var height = 0;
  var body, shape, margin;
  var shapeScale = ch.isVerticalMove ? scaleX : scaleY;
  body = new cp.Body(Infinity, Infinity);
  body.setPos(v(x, y));
  body.setAngle(angle);
  if(type === TELEGA_TYPE) {
    width = 105 / PHYS_SCALE * shapeScale;
    height = 20 / PHYS_SCALE * shapeScale;
    margin = 0;
    shape = space.addShape(new cp.BoxShape2(body, new cp.BB(-width / 2, margin * shapeScale, width / 2, height + margin)));
    shape.setFriction(friction);
    shape.setElasticity(elasticity);
    margin = 20;
    shape = space.addShape(new cp.BoxShape2(body, new cp.BB(-width / 2, -20 * shapeScale, -width / 2 + margin * shapeScale, height)));
    shape.setFriction(1);
    shape.setElasticity(0);
    shape = space.addShape(new cp.BoxShape2(body, new cp.BB(width / 2 - margin * shapeScale, -20 * shapeScale, width / 2, height)));
    shape.setFriction(0);
    shape.setElasticity(0)
  }else {
    if(type === AIM_TYPE) {
      width = 50 / PHYS_SCALE * shapeScale;
      height = 40 / PHYS_SCALE * shapeScale;
      friction = 0.2;
      var isReverse = ch.isReversed;
      if(isReverse) {
        shape = space.addShape(new cp.SegmentShape(body, v(width / 2, height / 2), v(width / 2 - 3 * shapeScale, -16 * shapeScale), 3))
      }else {
        shape = space.addShape(new cp.SegmentShape(body, v(-width / 2, height / 2), v(-width / 2 + 3 * shapeScale, -16 * shapeScale), 3))
      }
      shape.setFriction(friction);
      shape.setElasticity(elasticity);
      if(isReverse) {
        shape = space.addShape(new cp.SegmentShape(body, v(width / 2 - 8 * shapeScale, -19 * shapeScale), v(-10 * shapeScale, -40 * shapeScale), 3))
      }else {
        shape = space.addShape(new cp.SegmentShape(body, v(-width / 2 + 8 * shapeScale, -19 * shapeScale), v(10 * shapeScale, -40 * shapeScale), 3))
      }
      shape.setFriction(friction);
      shape.setElasticity(elasticity);
      if(isReverse) {
        shape = space.addShape(new cp.SegmentShape(body, v(-10 * shapeScale, -40 * shapeScale), v(-35 * shapeScale, -40 * shapeScale), 3))
      }else {
        shape = space.addShape(new cp.SegmentShape(body, v(10 * shapeScale, -40 * shapeScale), v(35 * shapeScale, -40 * shapeScale), 3))
      }
      shape.setFriction(friction);
      shape.setElasticity(0.7);
      if(ch.isMovable) {
        if(isReverse) {
          shape = space.addShape(new cp.SegmentShape(body, v(-97 * shapeScale, 37 * shapeScale), v(25 * shapeScale, 37 * shapeScale), 4))
        }else {
          shape = space.addShape(new cp.SegmentShape(body, v(-25 * shapeScale, 37 * shapeScale), v(97 * shapeScale, 37 * shapeScale), 4))
        }
        shape.setFriction(friction);
        shape.setElasticity(elasticity)
      }
    }else {
      if(type === MOVABLE_BALK_TYPE) {
        width = 105 / PHYS_SCALE * shapeScale;
        height = 20 / PHYS_SCALE * shapeScale;
        shape = space.addShape(new cp.BoxShape2(body, new cp.BB(-width / 2, -height / 2, width / 2, height / 2)));
        shape.setFriction(friction);
        shape.setElasticity(elasticity)
      }
    }
  }
  return body
}
function createSegmentPhysics(x, y, scaleX, scaleY, type, angle, ch) {
  ch.isFanMovable = false;
  var friction = 0.8;
  var elasticity = 0;
  var body, shape;
  body = new cp.Body(Infinity, Infinity);
  body.nodeIdleTime = Infinity;
  body.setPos(v(x, y));
  body.setAngle(angle);
  if(type === LAND_TYPE) {
    shape = space.addShape(new cp.SegmentShape(body, v(-60 * scaleX, -22 * scaleY), v(60 * scaleX, -22 * scaleY), 5));
    shape.setFriction(friction);
    shape.setElasticity(elasticity)
  }
  return body
}
function createTrianglePhysics(x, y, scaleX, scaleY, type, angle, ch) {
  var isStatic = false;
  var friction = 0.6;
  var elasticity = 0;
  var collisionType = 0;
  var width = 51 * scaleX;
  var height = 45 * scaleY;
  var density = 1 / 1E3;
  var verts = [-width / 2, -height / 2, 0, height / 2, width / 2, -height / 2];
  if(type === GLASS_TRIANGLE_TYPE) {
    if(ch.isStaticBlock) {
      isStatic = true
    }
    collisionType = 2
  }
  var body;
  if(!isStatic) {
    var mass = width * height * density;
    body = space.addBody(new cp.Body(mass, cp.momentForPoly(mass, verts, cp.vzero)))
  }else {
    body = new cp.Body(Infinity, Infinity);
    body.nodeIdleTime = Infinity;
    ch.isFanMovable = false
  }
  var shape = space.addShape(new cp.PolyShape(body, verts, cp.vzero));
  shape.setFriction(friction);
  shape.setElasticity(elasticity);
  shape.setCollisionType(collisionType);
  body.setPos(v(x, y));
  body.setAngle(angle);
  return body
}
var querySelectedBody;
var queryV = new v(0, 0);
function getBodyAtMouse(queryMouseX, queryMouseY) {
  querySelectedBody = null;
  queryV.x = queryMouseX;
  queryV.y = queryMouseY;
  var nearestInfo = this.space.nearestPointQueryNearest(queryV, 100, cp.ALL_LAYERS, cp.NO_GROUP);
  if(nearestInfo) {
    if(nearestInfo.d < 0) {
      if(nearestInfo.shape && nearestInfo.shape.body) {
        querySelectedBody = nearestInfo.shape.body
      }
    }
  }
  return querySelectedBody
}
function destroyBody(body) {
  var shape;
  if(body.isStatic()) {
    while(body.shapeList.length > 0) {
      shape = body.shapeList[0];
      space.removeStaticShape(shape)
    }
  }else {
    while(body.shapeList.length > 0) {
      shape = body.shapeList[0];
      if(shape.space) {
        space.removeShape(shape)
      }
    }
    if(body.space) {
      space.removeBody(body)
    }
  }
}
function awakeAllBodies(activatorCh) {
  var ch;
  for(var i = allChars.length - 1;i >= 0;--i) {
    ch = allChars[i];
    if(!ch.physBody) {
      continue
    }
    if(activatorCh.type === FAN_TYPE) {
      if(Math.abs(activatorCh.vis.x - ch.vis.x) > activatorCh.activDistance) {
        continue
      }
      if(Math.abs(activatorCh.vis.y - ch.vis.y) > activatorCh.activDistance) {
        continue
      }
    }else {
      if(Math.abs(activatorCh.vis.x - ch.vis.x) > 200) {
        continue
      }
      if(Math.abs(activatorCh.vis.y - ch.vis.y) > 200) {
        continue
      }
    }
    if(ch.physBody.isStatic()) {
      continue
    }
    if(ch.isPhysStatic) {
      continue
    }
    if(ch.teleportationStatus > -1) {
      continue
    }
    if(ch.isDied) {
      continue
    }
    if(ch.isMovable) {
      continue
    }
    if(ch.isAim) {
      continue
    }
    if(ch.isLand) {
      continue
    }
    if(ch.physBody) {
      ch.physBody.activate()
    }
  }
}
var ChipMunkDebugDrawer = function() {
  var space = this.space = new cp.Space;
  this.remainder = 0;
  this.fps = 0;
  this.mouse = v(0, 0);
  this.simulationTime = 0;
  this.drawTime = 0;
  this.scale = 1;
  this.width = minW;
  this.height = minH;
  var self = this;
  var canvas2point = this.canvas2point = function(x, y) {
    return v(x / self.scale, 480 - y / self.scale)
  };
  this.point2canvas = function(point) {
    return v(point.x * self.scale, point.y * self.scale)
  }
};
ChipMunkDebugDrawer.prototype.drawInfo = function() {
  var space = this.space;
  var maxWidth = this.width - 20;
  this.ctx.textAlign = "start";
  this.ctx.textBaseline = "alphabetic";
  this.ctx.fillStyle = "black";
  var fpsStr = Math.floor(this.fps * 10) / 10;
  if(space.activeShapes.count === 0) {
    fpsStr = "--"
  }
  this.ctx.fillText("FPS: " + fpsStr, 10, 50, maxWidth);
  this.ctx.fillText("Step: " + space.stamp, 10, 80, maxWidth);
  var arbiters = space.arbiters.length;
  this.maxArbiters = this.maxArbiters ? Math.max(this.maxArbiters, arbiters) : arbiters;
  this.ctx.fillText("Arbiters: " + arbiters + " (Max: " + this.maxArbiters + ")", 10, 110, maxWidth);
  var contacts = 0;
  for(var i = 0;i < arbiters;i++) {
    contacts += space.arbiters[i].contacts.length
  }
  this.maxContacts = this.maxContacts ? Math.max(this.maxContacts, contacts) : contacts;
  this.ctx.fillText("Contact points: " + contacts + " (Max: " + this.maxContacts + ")", 10, 140, maxWidth);
  this.ctx.fillText("Simulation time: " + this.simulationTime + " ms", 10, 170, maxWidth);
  this.ctx.fillText("Draw time: " + this.drawTime + " ms", 10, 200, maxWidth);
  if(this.message) {
    this.ctx.fillText(this.message, 10, this.height - 50, maxWidth)
  }
};
ChipMunkDebugDrawer.prototype.draw = function() {
  var ctx = this.ctx;
  var self = this;
  self.scale = scaleFactor;
  ctx.strokeStyle = "black";
  ctx.clearRect(0, 0, debugCanvas.width, debugCanvas.height);
  this.ctx.font = "16px sans-serif";
  this.ctx.lineCap = "round";
  this.space.eachShape(function(shape) {
    ctx.fillStyle = shape.style();
    shape.draw(ctx, self.scale, self.point2canvas)
  });
  this.space.eachConstraint(function(c) {
    if(c.draw) {
      c.draw(ctx, self.scale, self.point2canvas)
    }
  })
};
var drawSegment = function(start, end, style) {
  var ctx = this.ctx;
  ctx.beginPath();
  var startT = this.point2canvas(start);
  var endT = this.point2canvas(end);
  ctx.moveTo(startT.x, startT.y);
  ctx.lineTo(endT.x, endT.y);
  ctx.lineWidth = 1;
  ctx.strokeStyle = style;
  ctx.stroke()
};
var drawBB = function(bb, fillStyle, strokeStyle) {
  var ctx = this.ctx;
  var p = this.point2canvas(v(bb.l, bb.t));
  var width = this.scale * (bb.r - bb.l);
  var height = this.scale * (bb.t - bb.b);
  if(fillStyle) {
    ctx.fillStyle = fillStyle;
    ctx.fillRect(p.x, p.y, width, height)
  }
  if(strokeStyle) {
    ctx.strokeStyle = strokeStyle;
    ctx.strokeRect(p.x, p.y, width, height)
  }
};
var drawCircle = function(ctx, scale, point2canvas, c, radius) {
  var c = point2canvas(c);
  ctx.beginPath();
  ctx.arc(c.x, c.y, scale * radius, 0, 2 * Math.PI, false);
  ctx.fill();
  ctx.stroke()
};
var drawLine = function(ctx, point2canvas, a, b) {
  a = point2canvas(a);
  b = point2canvas(b);
  ctx.beginPath();
  ctx.moveTo(a.x, a.y);
  ctx.lineTo(b.x, b.y);
  ctx.stroke()
};
var drawRect = function(ctx, point2canvas, pos, size) {
  var pos_ = point2canvas(pos);
  var size_ = cp.v.sub(point2canvas(cp.v.add(pos, size)), pos_);
  ctx.fillRect(pos_.x, pos_.y, size_.x, size_.y)
};
var springPoints = [v(0, 0), v(0.2, 0), v(0.25, 3), v(0.3, -6), v(0.35, 6), v(0.4, -6), v(0.45, 6), v(0.5, -6), v(0.55, 6), v(0.6, -6), v(0.65, 6), v(0.7, -3), v(0.75, 6), v(0.8, 0), v(1, 0)];
var drawSpring = function(ctx, scale, point2canvas, a, b) {
  a = point2canvas(a);
  b = point2canvas(b);
  ctx.beginPath();
  ctx.moveTo(a.x, a.y);
  var delta = v.sub(b, a);
  var len = v.len(delta);
  var rot = v.mult(delta, 1 / len);
  for(var i = 1;i < springPoints.length;i++) {
    var p = v.add(a, v.rotate(v(springPoints[i].x * len, springPoints[i].y * scale), rot));
    ctx.lineTo(p.x, p.y)
  }
  ctx.stroke()
};
cp.PolyShape.prototype.draw = function(ctx, scale, point2canvas) {
  ctx.beginPath();
  var verts = this.tVerts;
  var len = verts.length;
  var lastPoint = point2canvas(new cp.Vect(verts[len - 2], verts[len - 1]));
  ctx.moveTo(lastPoint.x, lastPoint.y);
  for(var i = 0;i < len;i += 2) {
    var p = point2canvas(new cp.Vect(verts[i], verts[i + 1]));
    ctx.lineTo(p.x, p.y)
  }
  ctx.fill();
  ctx.stroke()
};
cp.SegmentShape.prototype.draw = function(ctx, scale, point2canvas) {
  var oldLineWidth = ctx.lineWidth;
  ctx.lineWidth = Math.max(1, this.r * scale * 2);
  drawLine(ctx, point2canvas, this.ta, this.tb);
  ctx.lineWidth = oldLineWidth
};
cp.CircleShape.prototype.draw = function(ctx, scale, point2canvas) {
  drawCircle(ctx, scale, point2canvas, this.tc, this.r);
  drawLine(ctx, point2canvas, this.tc, cp.v.mult(this.body.rot, this.r).add(this.tc))
};
cp.PinJoint.prototype.draw = function(ctx, scale, point2canvas) {
  var a = this.a.local2World(this.anchr1);
  var b = this.b.local2World(this.anchr2);
  ctx.lineWidth = 2;
  ctx.strokeStyle = "grey";
  drawLine(ctx, point2canvas, a, b)
};
cp.SlideJoint.prototype.draw = function(ctx, scale, point2canvas) {
  var a = this.a.local2World(this.anchr1);
  var b = this.b.local2World(this.anchr2);
  var midpoint = v.add(a, v.clamp(v.sub(b, a), this.min));
  ctx.lineWidth = 2;
  ctx.strokeStyle = "grey";
  drawLine(ctx, point2canvas, a, b);
  ctx.strokeStyle = "red";
  drawLine(ctx, point2canvas, a, midpoint)
};
cp.PivotJoint.prototype.draw = function(ctx, scale, point2canvas) {
  var a = this.a.local2World(this.anchr1);
  var b = this.b.local2World(this.anchr2);
  ctx.strokeStyle = "grey";
  ctx.fillStyle = "grey";
  drawCircle(ctx, scale, point2canvas, a, 2);
  drawCircle(ctx, scale, point2canvas, b, 2)
};
cp.GrooveJoint.prototype.draw = function(ctx, scale, point2canvas) {
  var a = this.a.local2World(this.grv_a);
  var b = this.a.local2World(this.grv_b);
  var c = this.b.local2World(this.anchr2);
  ctx.strokeStyle = "grey";
  drawLine(ctx, point2canvas, a, b);
  drawCircle(ctx, scale, point2canvas, c, 3)
};
cp.DampedSpring.prototype.draw = function(ctx, scale, point2canvas) {
  var a = this.a.local2World(this.anchr1);
  var b = this.b.local2World(this.anchr2);
  ctx.strokeStyle = "grey";
  drawSpring(ctx, scale, point2canvas, a, b)
};
var randColor = function() {
  return Math.floor(Math.random() * 256)
};
var debugAlpha = 0.7;
var styles = [];
for(var i = 0;i < 100;i++) {
  styles.push("rgba(" + randColor() + ", " + randColor() + ", " + randColor() + "," + debugAlpha + ")")
}
cp.Shape.prototype.style = function() {
  var body;
  if(this.sensor) {
    return"rgba(255,255,255,0)"
  }else {
    body = this.body;
    if(body.isSleeping()) {
      return"rgba(50,50,50," + debugAlpha + ")"
    }else {
      if(body.nodeIdleTime > this.space.sleepTimeThreshold) {
        return"rgba(170,170,170," + debugAlpha + ")"
      }else {
        return styles[this.hashid % styles.length]
      }
    }
  }
};
var MINIMUM_SPEED = 3;
var MAX_SPEED = 6;
var IS_NITRO = false;
var DEFAULT_STATE = 0;
var COLLIDED_STATE = 1;
var ACTIVATOR_RADIUS = 25;
var ACTIVATED_STATE = 10;
var WAIT_STATE = 20;
var WAIT_TO_ACTIV_STATE = 21;
var ACTIV_TO_WAIT_STATE = 22;
var MORE_EASY_MULT = 1;
var dx, dy, dist;
var isNeedActivate = false;
(function(window) {
  var paramIndex = 0;
  function CharBase(typeId, parent, scaleX, scaleY, additParams) {
    var bmpAnimation = new createjs.Sprite(zoeSS);
    bmpAnimation.baseBlock = this;
    this.vis = bmpAnimation;
    bmpAnimation = new createjs.Sprite(zoeSS);
    bmpAnimation.baseBlock = this;
    this.additVision = bmpAnimation;
    this.reset(typeId, parent, scaleX, scaleY, additParams)
  }
  var p = CharBase.prototype;
  p.reset = function(typeId, parent, scaleX, scaleY, additParams) {
    this.typeId = typeId;
    this.type = window[typeId];
    createjs.Tween.removeTweens(this);
    createjs.Tween.removeTweens(this.vis);
    createjs.Tween.removeTweens(this.additVision);
    removeFromParent(this.additVision);
    this.parent = parent;
    this.isSleeps = false;
    this.currBtn = null;
    this.isInTrap = false;
    this.isNeedTransformToStatic = false;
    this.isAutoUpdateAdditVision = false;
    this.isIgnoreAdditVisionRot = false;
    this.isStaticBlock = false;
    this.vis.skewX = this.vis.skewY = 0;
    this.additVision.skewX = this.additVision.skewY = 0;
    this.vis.isOnTop = false;
    this.vis.isOnBottom = true;
    this.isTransforming = false;
    this.isMovable = false;
    this.isCollected = false;
    this.teleportPartner = null;
    this.isReversed = false;
    this.dir = 1;
    this.isJoint = false;
    this.isZombie = false;
    this.isBuyer = false;
    this.joint = null;
    this.jointPartner = null;
    this.activForce = FAN_MAX_FORCE;
    this.activDistance = FAN_ACTIV_DISTANCE;
    this.glassExplodeDistance = -1;
    this.distanceEndPos = 0;
    this.distanceStartPos = 0;
    this.isClicked = false;
    this.isRemovable = false;
    this.doorDistanceEnd = 0;
    this.isGlass = false;
    this.isActivated = false;
    this.isMechanic = false;
    this.activTime = 0;
    this.waitTime = 0;
    this.currentTimer = 0;
    this.labelId = "";
    this.isNeedDispose = false;
    this.teleportationStatus = -1;
    this.vis.alpha = 1;
    this.isCatched = false;
    this.additVision.alpha = 1;
    this.additVision.visible = true;
    this.vis.mouseEnabled = false;
    this.physBody = null;
    this.scale = scaleX;
    this.scaleY = scaleY;
    this.isEnemy = false;
    this.loadAllAdditParams(additParams);
    this.startTeleport = null;
    this.aimTeleport = null;
    this.isAim = false;
    this.catchedHero = null;
    this.isFanMovable = true;
    this.isDanger = false;
    this.additRotation = 0;
    this.additVisRotMargin = 0;
    this.additVisXMargin = 0;
    this.additVisionScaleMarginX = 1;
    this.additVisionScaleMarginY = 1;
    this.teleportAngle = 0;
    this.additVisYMargin = 0;
    this.isTeleport = false;
    this.isFirstCollided = false;
    this.shape = null;
    this.catchedTrap = null;
    this.defaultRotation = 0;
    this.animMargin = Math.random() * 30;
    this.isNeutralEnemy = false;
    this.currSpeed = 0;
    this.visionWidth = 0;
    this.activId = -1;
    this.visionHeight = 0;
    this.startMoveX = 0;
    this.startMargin = 0;
    this.isVerticalMove = false;
    this.state = DEFAULT_STATE;
    this.charRadius = 0;
    this.collideTimer = 0;
    this.isExploded = false;
    this.lastColliderType = -1;
    this.vis.rotation = 0;
    this.raduis = 0;
    this.isDied = false;
    this.vel = null;
    this.forceToFly = null;
    this.isByPhysPosUpdate = true;
    this.vis.cursor = null;
    this.additVision.cursor = null;
    this.additVision.mouseEnabled = false;
    this.isHero = false;
    this.isLand = false;
    this.lastVelocity = 0;
    this.lastAngularVelocity = 0;
    this.isHelp = typeId.indexOf("HELP") > -1;
    this.isDecor = typeId.indexOf("DECOR") > -1;
    this.isDynamicDecor = this.isDecor ? this.isDynDecor() : true;
    this.skinId = "";
    this.isPhysStatic = typeId.indexOf("PHYSICS") > -1;
    this.vis.visible = !this.isPhysStatic;
    if(this.type === LAND_TYPE) {
      this.isLand = true
    }
    this.setVisionByType();
    this.updateVisionScale();
    if(!this.isDynamicDecor && isWithCache) {
      this.parent = allBgContainer
    }
    if(this.additVision.parent) {
      addToParent(this.vis, this.parent);
      addToParent(this.additVision, this.parent)
    }else {
      addToParent(this.vis, this.parent)
    }
  };
  p.isDynDecor = function() {
    return this.isHelp || (this.type === DECOR_ARROW_TYPE || this.type === DECOR_SCREAMER_TYPE)
  };
  p.setupMouseEventListeners = function() {
    this.vis.cursor = "pointer"
  };
  p.setVisionByType = function() {
    this.skinId = "";
    paramIndex = this.getAdditParamIndex("SKIN");
    if(paramIndex != null) {
      this.skinId = "_" + this.getAdditParams(paramIndex + 1)
    }
    this.vis.gotoAndStop(this.typeId + this.skinId);
    if(this.hasAdditParams("INVIS")) {
      this.vis.visible = false
    }
    if(this.hasAdditParams("REMOV")) {
      this.isRemovable = true
    }
    if(this.type === BUYER_TYPE) {
      this.setBuyerVision()
    }else {
      if(this.type === ZOMBIE_TYPE) {
        this.setZombieVision()
      }else {
        if(this.type === BOMB_TYPE) {
          this.vis.cursor = "pointer";
          this.vis._animation.speed = 0.75;
          this.vis.mouseEnabled = true;
          this.activDistance = parseInt(this.getAdditParams(0));
          this.activForce = parseInt(this.getAdditParams(1));
          this.glassExplodeDistance = this.getAdditParams(2) ? parseInt(this.getAdditParams(2)) : this.glassExplodeDistance;
          addToArray(allBombs, this);
          this.additVision.gotoAndPlay("bombsmrad");
          this.additVision._animation.speed = 0.75;
          addToParent(this.additVision, this.parent);
          this.isIgnoreAdditVisionRot = true
        }else {
          if(this.type === GLASS_BLOCK_TYPE || (this.type === GLASS_BOX_TYPE || this.type === GLASS_TRIANGLE_TYPE)) {
            this.isGlass = true;
            if(this.getAdditParams(0) == "STATIC") {
              this.isStaticBlock = true
            }
          }else {
            if(this.type === TELEGA_TYPE) {
              if(this.getAdditParams(1)) {
                this.readMovableConfig(1);
                this.isMovable = true
              }
              this.visionWidth = 106;
              this.visionHeight = 43
            }else {
              if(this.type === MOVABLE_BALK_TYPE) {
                this.readMovableConfig(1);
                this.isMovable = true;
                this.visionWidth = 106;
                this.visionHeight = 20;
                this.vis.gotoAndStop("STATIC_BALK_1_TYPE");
                if(this.getAdditParams(0) == "2") {
                  this.vis.gotoAndStop("STATIC_BALK_1_TYPE_2");
                  this.isRemovable = true
                }
              }else {
                if(this.type === STATIC_BALK_1_TYPE) {
                  if(this.getAdditParams(0)) {
                    this.isRemovable = true
                  }
                }else {
                  if(this.type === STATIC_BALK_2_TYPE) {
                    this.isRemovable = true
                  }else {
                    if(this.type === FAN_TYPE) {
                      this.vis.cursor = "pointer";
                      this.vis.mouseEnabled = true;
                      addToArray(allFans, this);
                      this.isByPhysPosUpdate = true
                    }else {
                      if(this.type === ELECTRO_DANGER_TYPE) {
                        this.setElectroVision()
                      }else {
                        if(this.type === SPIKE_TYPE) {
                          this.setSpikesVision()
                        }else {
                          if(this.type === TRAP_TYPE) {
                            this.setTrapVision()
                          }else {
                            if(this.type === INVISIBLE_TYPE) {
                              this.setInvisibleVision()
                            }else {
                              if(this.type === DECOR_SCREAMER_TYPE) {
                                addToArray(allScreamers, this)
                              }else {
                                if(this.type === BUTTON_TYPE) {
                                  this.setButtonVision()
                                }else {
                                  if(this.type === DOOR_REMOTE_TYPE) {
                                    this.setDoorRemoteVision()
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    if(this.type === DYNAMIC_ANGLE_TYPE) {
      this.vis.gotoAndStop("DYNAMIC_RECT_2_TYPE");
      this.additVision.gotoAndStop("DYNAMIC_ANGLE_TYPE");
      this.parent.addChildAt(this.additVision, 0);
      this.isRemovable = true
    }else {
      if(this.type === DYNAMIC_CIRCLE_TYPE) {
        this.isRemovable = true
      }
    }
    if(this.type === DANGER_TYPE) {
      this.isDanger = true;
      this.isDynamicDecor = false
    }
    if(this.type === TELEPORT_TYPE) {
      this.vis.play();
      this.rotation = Math.random() * 300;
      this.isByPhysPosUpdate = false;
      this.isTeleport = true;
      this.labelId = this.getAdditParams(0);
      addToArray(allTeleports, this);
      for(var i = allTeleports.length - 1;i >= 0;--i) {
        var partner = allTeleports[i];
        if(partner.labelId === this.labelId) {
          partner.teleportPartner = this;
          this.teleportPartner = partner
        }
      }
    }
    if(this.isRemovable) {
      this.vis.cursor = "pointer";
      this.vis.mouseEnabled = true;
      this.additVision.cursor = "pointer";
      this.additVision.mouseEnabled = true;
      currentRemovablesNum++
    }
    if(this.type === FAN_TYPE) {
      if("REV" == this.getAdditParams(0)) {
        this.isReversed = true;
        this.dir = -1
      }
      if(this.getAdditParams(1)) {
        this.activDistance = parseInt(this.getAdditParams(1))
      }
      if(this.getAdditParams(2)) {
        this.activForce = parseInt(this.getAdditParams(2))
      }
      if(this.getAdditParams(3)) {
        this.isMovable = true;
        this.visionWidth = 47;
        this.visionHeight = 58;
        this.readMovableConfig(4)
      }
    }
    if(this.type === JOINT_PIVOT_TYPE) {
      this.isJoint = true
    }
    if(!this.vis.paused) {
      this.vis.currentAnimationFrame = Math.floor(Math.random() * 20)
    }
  };
  p.readMovableConfig = function(marginIndex) {
    var dirParam = this.getAdditParams(marginIndex);
    if(dirParam === "U" || dirParam === "D") {
      this.dir = dirParam === "D" ? 1 : -1;
      this.isVerticalMove = true
    }else {
      this.dir = dirParam === "R" ? 1 : -1
    }
    var margin = parseInt(this.getAdditParams(1 + marginIndex));
    this.startMargin = margin >= 1E3 ? 1E3 - margin : margin;
    this.currSpeed = parseInt(this.getAdditParams(2 + marginIndex)) / 10
  };
  p.setupActivLabel = function() {
    this.labelId = this.getAdditParams(0)
  };
  p.bombClick = function(event) {
    if(isLevelCompleted || (isLevelFailed || isGamePaused)) {
      return
    }
    var b = this;
    if(b.isExploded) {
      return
    }
    createExplosion(b);
    removeFromParent(this.additVision);
    b.vis.removeAllEventListeners();
    b.vis.mouseEnabled = false;
    b.vis.scaleX = b.vis.scaleY = b.scale = 1;
    b.vis.gotoAndPlay("bombexplosionv");
    addToParent(b.vis, this.parent);
    b.isByPhysPosUpdate = false;
    this.disposePhysBody();
    b.isExploded = true;
    playSound("explodeSound");
    hideAllHelps()
  };
  p.calculateBoundingBox = function() {
    var margin = 1;
    if(this.isEnemy) {
      margin = 0.7
    }
    var data = this.vis._animation;
    if(data && (data.frames && data.frames.length > 0)) {
      this.bounds = charSS.getFrameBounds(data.frames[0]);
      this.bounds.width *= this.scale * margin;
      this.bounds.height *= this.scale * margin;
      this.bounds.x *= this.scale * margin;
      this.bounds.y *= this.scale * margin;
      this.charRadius = this.bounds.width / 2
    }
  };
  p.setPosition = function(x, y, rotation) {
    var posX = x;
    var posY = y;
    if(this.isMovable) {
      if(this.isVerticalMove) {
        this.distanceEndPos = this.scaleY * 140 - this.scale * this.visionHeight;
        this.distanceStartPos = y - this.distanceEndPos / 2;
        this.distanceEndPos = y + this.distanceEndPos / 2;
        posY = Math.min(this.distanceEndPos, Math.max(this.distanceStartPos, y + this.startMargin))
      }else {
        this.distanceEndPos = this.scale * 140 - this.scaleY * this.visionWidth;
        this.distanceStartPos = x - this.distanceEndPos / 2;
        this.distanceEndPos = x + this.distanceEndPos / 2;
        posX = Math.min(this.distanceEndPos, Math.max(this.distanceStartPos, x + this.startMargin))
      }
    }
    this.vis.x = posX;
    this.additVision.x = posX + this.additVisXMargin;
    this.vis.y = posY;
    this.additVision.y = posY + this.additVisYMargin;
    this.vis.rotation = rotation;
    this.additVision.rotation = rotation + this.additVisRotMargin;
    this.defaultRotation = rotation
  };
  p.initPhysics = function() {
    if(this.isDecor) {
      return
    }
    if(this.type === ACTIVATOR_TYPE) {
      return
    }
    if(this.type === TELEPORT_TYPE) {
      return
    }
    var body;
    var posX = this.vis.x / PHYS_SCALE;
    var posY = this.vis.y / PHYS_SCALE;
    var angle = this.vis.rotation * DEGREES_TO_RAD;
    if(this.isJoint) {
      var nearestBody = getBodyAtMouse(this.vis.x, this.vis.y);
      var joint = new cp.PivotJoint(nearestBody, space.staticBody, v(this.vis.x, this.vis.y));
      space.addConstraint(joint);
      this.joint = joint;
      var otherCh = nearestBody.userdata;
      this.jointPartner = otherCh;
      otherCh.jointPartner = this;
      return
    }else {
      if(this.isPhysStatic || (this.type === DYNAMIC_BOX_TYPE || (this.type === DANGER_TYPE || (this.type === GLASS_BLOCK_TYPE || (this.type === GLASS_BOX_TYPE || (this.type === DOOR_TYPE || (this.type === DYNAMIC_RECT_TYPE || (this.type === DYNAMIC_RECT_2_TYPE || (this.type === HARD_RECT_TYPE || (this.type === HARD_BOX_TYPE || (this.type === STATIC_BALK_1_TYPE || (this.type === STATIC_BALK_2_TYPE || (this.type === STATIC_BOX_TYPE || (this.type === DYNAMIC_ANGLE_TYPE || (this.type === TABLE_1_TYPE || 
      (this.type === TABLE_2_TYPE || (this.type === TABLE_3_TYPE || (this.type === TABLE_4_TYPE || (this.type === TABLE_5_TYPE || (this.type === INVISIBLE_TYPE || this.type === DOOR_REMOTE_TYPE)))))))))))))))))))) {
        body = createRectPhysics(posX, posY, this.scale, this.scaleY, this.type, angle, this)
      }else {
        if(this.type === ELECTRO_DANGER_TYPE || (this.type === STAIRS_DANGER_TYPE || (this.type === SPIKE_TYPE || this.type === TRAP_TYPE))) {
          body = createBoxSensorPhysics(posX, posY, this.scale, this.scaleY, this.type, angle, this)
        }else {
          if(this.type === DYNAMIC_TRIANGLE_TYPE || (this.type === GLASS_TRIANGLE_TYPE || this.type === HARD_TRIANGLE_TYPE)) {
            body = createTrianglePhysics(posX, posY, this.scale, this.scaleY, this.type, angle, this)
          }else {
            if(this.type === TELEGA_TYPE || this.type === MOVABLE_BALK_TYPE) {
              body = createKinematicPhysics(posX, posY, this.scale, this.scaleY, this.type, angle, this)
            }else {
              if(this.type === LAND_TYPE) {
                body = createSegmentPhysics(posX, posY, this.scale, this.scaleY, this.type, angle, this)
              }else {
                if(this.type === BUSH_DANGER_TYPE || (this.type === BANANA_TYPE || this.type === BUTTON_TYPE)) {
                  body = createCircleSensorPhysics(posX, posY, this.scale, this.scaleY, this.type, angle, this)
                }else {
                  body = createCircleShape(posX, posY, this.scale * this.getRadiusByType() / PHYS_SCALE, this.type, angle, this)
                }
              }
            }
          }
        }
      }
    }
    if(!body) {
      return
    }
    body.userdata = this;
    this.physBody = body
  };
  p.getRadiusByType = function() {
    switch(this.type) {
      case BUYER_TYPE:
        return 38;
        break;
      case ZOMBIE_TYPE:
        return 38;
        break;
      case TELEPORT_TYPE:
        return 25;
        break;
      case BOMB_TYPE:
        return 20;
        break;
      case DYNAMIC_CIRCLE_TYPE:
        return 25;
        break;
      case FAN_TYPE:
        return 25;
        break
    }
    return 0
  };
  p.setFrame = function(frame, isPlay) {
    if(isPlay) {
      this.vis.gotoAndPlay(frame)
    }else {
      this.vis.gotoAndStop(frame)
    }
  };
  p.tick = function() {
    if(this.isNeedDispose) {
      addToArray(toDisposeChars, this);
      return
    }
    if(isGamePaused) {
      return
    }
    if(this.isDecor && !this.isDynamicDecor) {
      return
    }
    if(this.isJoint) {
      return
    }
    if(this.physBody && (!this.isPhysStatic && this.isByPhysPosUpdate)) {
      if(this.isMovable) {
        if(this.isVerticalMove) {
          if(this.vis.y > this.distanceEndPos) {
            this.dir = -1
          }else {
            if(this.vis.y < this.distanceStartPos) {
              this.dir = 1
            }
          }
          this.physBody.setVel(v(0, this.currSpeed * 15 * this.dir * dtScale));
          this.physBody.p.y += this.currSpeed * this.dir * dtScale
        }else {
          if(this.vis.x > this.distanceEndPos) {
            this.dir = -1
          }else {
            if(this.vis.x < this.distanceStartPos) {
              this.dir = 1
            }
          }
          this.physBody.setVel(v(this.currSpeed * 15 * this.dir * dtScale, 0));
          this.physBody.p.x += this.currSpeed * this.dir * dtScale
        }
      }
      this.vis.x = this.physBody.p.x;
      this.additVision.x = this.vis.x + this.additVisXMargin;
      this.vis.y = this.physBody.p.y;
      this.additVision.y = this.vis.y + this.additVisYMargin;
      this.vis.rotation = Math.atan2(this.physBody.rot.y, this.physBody.rot.x) * RAD_TO_DEGREES + this.additRotation;
      if(!this.isIgnoreAdditVisionRot) {
        this.additVision.rotation = this.vis.rotation + this.additVisRotMargin
      }else {
        this.additVision.rotation = this.additVisRotMargin
      }
    }
    if(this.isAutoUpdateAdditVision) {
      this.additVision.x = this.vis.x + this.additVisXMargin;
      this.additVision.y = this.vis.y + this.additVisYMargin;
      this.additVision.scaleX = this.vis.scaleX;
      this.additVision.scaleY = this.vis.scaleY;
      if(!this.isIgnoreAdditVisionRot) {
        this.additVision.rotation = this.vis.rotation + this.additVisRotMargin
      }else {
        this.additVision.rotation = this.additVisRotMargin
      }
    }
    if(this.type === BOMB_TYPE) {
      if(!this.isExploded && this.teleportationStatus < 0) {
        this.vis.play()
      }
      if(this.isExploded && this.vis.currentAnimationFrame >= 21) {
        this.isNeedDispose = true
      }
    }else {
      if(this.isHelp) {
        this.vis.scaleX = this.vis.scaleY = this.scale + Math.cos((counter + this.animMargin) / 12) / 20
      }else {
        if(this.type === DECOR_SCREAMER_TYPE) {
          this.vis.rotation = this.defaultRotation + 25 * Math.cos((counter + this.animMargin) / 6)
        }
      }
    }
    if(this.isHero) {
      this.updateHero()
    }
    if(this.isZombie) {
      this.updateZombie()
    }else {
      if(this.isBuyer) {
        this.updateBuyer()
      }
    }
    if(this.type === TELEPORT_TYPE) {
      for(var i = allChars.length - 1;i >= 0;i--) {
        var hero = allChars[i];
        if(hero.type != BOMB_TYPE && !hero.isHero) {
          continue
        }
        if(hero.isTransforming) {
          continue
        }
        if(Math.abs(hero.vis.x - this.vis.x) < 50 * this.scale && Math.abs(hero.vis.y - this.vis.y) < 50 * this.scale) {
          hero.teleportTo(this)
        }else {
          if(hero.teleportationStatus < 0) {
            hero.teleportContactEnd(this)
          }
        }
      }
    }else {
      if(this.type === ELECTRO_DANGER_TYPE) {
        this.updateElectroDanger()
      }else {
        if(this.type === SPIKE_TYPE) {
          this.updateSpikes()
        }else {
          if(this.type === TRAP_TYPE) {
            this.updateTraps()
          }else {
            if(this.type === INVISIBLE_TYPE) {
              this.updateInvisibleBlock()
            }else {
              if(this.type === BUTTON_TYPE) {
                this.updateButton()
              }else {
                if(this.type === DOOR_REMOTE_TYPE) {
                  this.updateDoorRemote()
                }
              }
            }
          }
        }
      }
    }
    this.updateTeleportation()
  };
  p.updateTeleportation = function() {
    if(!this.physBody) {
      return
    }
    if(this.teleportationStatus === 0) {
      this.isByPhysPosUpdate = false;
      this.teleportationStatus = 1;
      this.physBody.p.x = -1E3;
      this.physBody.p.y = 0;
      this.teleportAngle = Math.atan2(this.physBody.vy, this.physBody.vx);
      this.teleportationSpeedX = this.physBody.vx;
      this.teleportationSpeedY = this.physBody.vy;
      var b = this;
      playSound("portalAppearSound");
      this.isAutoUpdateAdditVision = true;
      createjs.Tween.get(this.vis, {override:true}).to({rotation:900, scaleX:0.05, scaleY:0.05, x:this.startTeleport.vis.x, y:this.startTeleport.vis.y}, 700).to({x:this.aimTeleport.vis.x, y:this.aimTeleport.vis.y}, 0).call(function() {
      }).to({rotation:0, scaleX:this.scale, scaleY:this.scale}, 700).call(function() {
        b.teleportationStatus = 2
      })
    }else {
      if(this.teleportationStatus == 2) {
        this.isAutoUpdateAdditVision = false;
        this.physBody.p.x = this.aimTeleport.vis.x / PHYS_SCALE;
        this.physBody.p.y = this.aimTeleport.vis.y / PHYS_SCALE;
        this.physBody.w = 0;
        this.physBody.setAngle(0);
        this.physBody.setVel(v(this.teleportationSpeedX, this.teleportationSpeedY));
        this.teleportationStatus = -1;
        this.isByPhysPosUpdate = true
      }
    }
  };
  p.updateVisionScale = function() {
    this.vis.scaleX = this.scale;
    this.vis.scaleY = this.scaleY;
    if(this.isMovable) {
      if(this.isVerticalMove) {
        this.vis.scaleX = this.vis.scaleY = this.scale
      }else {
        this.vis.scaleX = this.vis.scaleY = this.scaleY
      }
    }
    if(this.isReversed) {
      this.vis.scaleX *= -1
    }
    this.additVision.scaleX = this.vis.scaleX * this.additVisionScaleMarginX;
    this.additVision.scaleY = this.vis.scaleY * this.additVisionScaleMarginY
  };
  p.dispose = function() {
    removeFromArray(allChars, this);
    if(this.isHero) {
      removeFromArray(allHeroes, this)
    }
    this.lastColliderType = -1;
    addToDisposed(this);
    this.vis.removeAllEventListeners();
    this.disposePhysBody();
    this.shape = null;
    this.vis.stop();
    removeFromParent(this.vis);
    removeFromParent(this.additVision)
  };
  p.collideWithOtherDynamic = function() {
    if(this.teleportationStatus > -1) {
      return
    }
    this.isByPhysPosUpdate = true
  };
  p.toggleFly = function() {
  };
  p.heroRejoicing = function() {
    this.vis.gotoAndPlay(this.typeId)
  };
  p.aimCollected = function() {
    this.isCollected = true;
    ballNeededToWinNum--;
    createPrerenderedPart(this.vis.x, this.vis.y, 1.4, "parteffectv3", 0.71, this.vis, 0.8)
  };
  p.teleportTo = function(teleport) {
    if(this.aimTeleport) {
      return
    }
    this.startTeleport = teleport;
    this.aimTeleport = teleport.teleportPartner;
    this.teleportationStatus = 0
  };
  p.teleportContactEnd = function(teleport) {
    if(this.aimTeleport !== teleport) {
      return
    }
    this.startTeleport = null;
    this.aimTeleport = null
  };
  p.die = function(destinationX, destinationY) {
    if(isLevelCompleted || isLevelFailed) {
      return
    }
    isLevelFailed = true;
    this.isDied = true;
    this.isFly = false;
    this.isAutoUpdateAdditVision = true;
    this.isByPhysPosUpdate = false;
    this.isTransforming = true;
    hideGameInterface();
    createjs.Tween.get(this.vis, {override:true}).to({alpha:0, scaleX:0, scaleY:0, rotation:900, x:destinationX ? destinationX : this.vis.x, y:destinationY ? destinationY : this.vis.y}, 1200).wait(400).call(showRestartWin);
    if(this.physBody) {
      this.physBody.p.x = -1E3
    }
  };
  p.dieByElectricity = function(destinationX, destinationY) {
    if(isLevelCompleted || isLevelFailed) {
      return
    }
    isLevelFailed = true;
    this.isDied = true;
    this.isFly = false;
    this.isAutoUpdateAdditVision = true;
    this.isByPhysPosUpdate = false;
    removeFromParent(this.additVision);
    hideGameInterface();
    this.vis.gotoAndPlay(this.vis.currentAnimation + "_ELECTRO");
    createjs.Tween.get(this.vis, {override:true}).wait(1E3).call(showRestartWin);
    createPrerenderedPart(this.vis.x, this.vis.y, this.scale * 1.2, "electricityAnim", 1, this.vis, null, null, true);
    if(this.physBody) {
      this.physBody.p.x = -1E3
    }
    playSound("zapDeath")
  };
  p.dieByWorldOut = function() {
    if(isLevelCompleted || isLevelFailed) {
      return
    }
    isLevelFailed = true;
    this.isDied = true;
    this.isFly = false;
    this.isByPhysPosUpdate = false;
    hideGameInterface();
    createjs.Tween.get(this.vis).wait(400).call(showRestartWin);
    if(this.physBody) {
      this.physBody.p.x = -1E3
    }
    playWorldOutSound()
  };
  p.collideWithDyn = function(other) {
    if(this.isFirstCollided) {
      return
    }
    this.isFirstCollided = true;
    this.isByPhysPosUpdate = true
  };
  p.breakGlass = function() {
    if(!this.vis.visible || levelStartTimer < 5) {
      return
    }
    if(this.physBody) {
      this.disposePhysBody();
      this.vis.visible = false;
      if(this.type === GLASS_BLOCK_TYPE) {
        createGlassRectExplode(this.vis.x, this.vis.y, this.scale, this.vis.rotation)
      }else {
        createPartExplode(this.vis.x, this.vis.y, 3, PART_GLASS_TYPE, null, 3)
      }
      playSound("glassBrakeSound")
    }
  };
  p.activateBtn = function() {
    if(this.isActivated) {
      return
    }
    this.isActivated = true;
    this.vis.currentAnimationFrame = 1;
    var ch;
    for(var i = 0;i < allChars.length;i++) {
      ch = allChars[i];
      if(ch.isMechanic && (!ch.isActivated && ch.labelId === this.labelId)) {
        ch.activateMechanic()
      }
    }
    playSound("clickSound")
  };
  p.deActivateBtn = function() {
    if(!this.isActivated) {
      return
    }
    this.isActivated = false;
    this.vis.currentAnimationFrame = 0;
    var ch;
    for(var i = 0;i < allChars.length;i++) {
      ch = allChars[i];
      if(ch.isMechanic && (ch.isActivated && ch.labelId === this.labelId)) {
        ch.deActivateMechanic()
      }
    }
    playSound("clickSound")
  };
  p.activateMechanic = function() {
    this.isActivated = true
  };
  p.deActivateMechanic = function() {
    this.isActivated = false
  };
  p.toggleFan = function() {
    this.isActivated = !this.isActivated;
    if(this.isActivated) {
      this.vis.gotoAndPlay("FAN_TYPE_ON");
      awakeAllBodies(this);
      playWindSound()
    }else {
      this.vis.gotoAndStop("FAN_TYPE");
      var currentActive = 0;
      for(var i = allFans.length - 1;i >= 0;--i) {
        if(allFans[i].isActivated) {
          currentActive++
        }
      }
      if(currentActive < 1) {
        stopWindSound()
      }
    }
  };
  p.removeFromField = function(isWithoutSound) {
    this.disposePhysBody();
    this.isByPhysPosUpdate = false;
    currentRemovablesNum--;
    var self = this;
    createjs.Tween.get(this.vis).to({alpha:0, scaleX:0, scaleY:0}, 250).call(function() {
      self.isNeedDispose = true
    });
    if(this.type != BOMB_TYPE) {
      createjs.Tween.get(this.additVision).to({alpha:0, scaleX:0, scaleY:0}, 250)
    }
    if(!isWithoutSound) {
      playRemoveObjectSound()
    }
  };
  p.disposePhysBody = function() {
    if(this.isJoint && this.joint) {
      space.removeConstraint(this.joint);
      this.joint = null;
      this.jointPartner = null
    }
    if(this.physBody) {
      toDisposePhysicsBodies.push(this.physBody)
    }
    if(this.jointPartner) {
      this.jointPartner.removeFromField(true)
    }
    this.physBody = null
  };
  window.CharBase = CharBase
})(window);
(function() {
  var MAX_INT = 9007199254740992;
  var MIN_INT = -MAX_INT;
  var NUMBERS = "0123456789";
  var CHARS_LOWER = "abcdefghijklmnopqrstuvwxyz";
  var CHARS_UPPER = CHARS_LOWER.toUpperCase();
  var HEX_POOL = NUMBERS + "abcdef";
  var Chance = function(seed) {
    if(seed !== undefined) {
      if(typeof seed === "function") {
        this.random = seed
      }else {
        this.seed = seed
      }
    }
    if(typeof this.random === "undefined") {
      this.mt = this.mersenne_twister(seed);
      this.random = function() {
        return this.mt.random(this.seed)
      }
    }
  };
  function initOptions(options, defaults) {
    options || (options = {});
    if(!defaults) {
      return options
    }
    for(var i in defaults) {
      if(typeof options[i] === "undefined") {
        options[i] = defaults[i]
      }
    }
    return options
  }
  function testRange(test, errorMessage) {
    if(test) {
      throw new RangeError(errorMessage);
    }
  }
  Chance.prototype.bool = function(options) {
    options = initOptions(options, {likelihood:50});
    testRange(options.likelihood < 0 || options.likelihood > 100, "Chance: Likelihood accepts values from 0 to 100.");
    return this.random() * 100 < options.likelihood
  };
  Chance.prototype.character = function(options) {
    options = initOptions(options);
    var symbols = "!@#$%^&*()[]", letters, pool;
    testRange(options.alpha && options.symbols, "Chance: Cannot specify both alpha and symbols.");
    if(options.casing === "lower") {
      letters = CHARS_LOWER
    }else {
      if(options.casing === "upper") {
        letters = CHARS_UPPER
      }else {
        letters = CHARS_LOWER + CHARS_UPPER
      }
    }
    if(options.pool) {
      pool = options.pool
    }else {
      if(options.alpha) {
        pool = letters
      }else {
        if(options.symbols) {
          pool = symbols
        }else {
          pool = letters + NUMBERS + symbols
        }
      }
    }
    return pool.charAt(this.natural({max:pool.length - 1}))
  };
  Chance.prototype.floating = function(options) {
    var num, range;
    options = initOptions(options, {fixed:4});
    var fixed = Math.pow(10, options.fixed);
    testRange(options.fixed && options.precision, "Chance: Cannot specify both fixed and precision.");
    var max = MAX_INT / fixed;
    var min = -max;
    testRange(options.min && (options.fixed && options.min < min), "Chance: Min specified is out of range with fixed. Min should be, at least, " + min);
    testRange(options.max && (options.fixed && options.max > max), "Chance: Max specified is out of range with fixed. Max should be, at most, " + max);
    options = initOptions(options, {min:min, max:max});
    num = this.integer({min:options.min * fixed, max:options.max * fixed});
    var num_fixed = (num / fixed).toFixed(options.fixed);
    return parseFloat(num_fixed)
  };
  Chance.prototype.integer = function(options) {
    var num, range;
    options = initOptions(options, {min:MIN_INT, max:MAX_INT});
    range = Math.max(Math.abs(options.min), Math.abs(options.max));
    do {
      num = this.natural({max:range});
      num = this.bool() ? num : num * -1
    }while(num < options.min || num > options.max);
    return num
  };
  Chance.prototype.natural = function(options) {
    options = initOptions(options, {min:0, max:MAX_INT});
    testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");
    return Math.floor(this.random() * (options.max - options.min + 1) + options.min)
  };
  Chance.prototype.normal = function(options) {
    options = initOptions(options, {mean:0, dev:1});
    var s, u, v, norm, mean = options.mean, dev = options.dev;
    do {
      u = this.random() * 2 - 1;
      v = this.random() * 2 - 1;
      s = u * u + v * v
    }while(s >= 1);
    norm = u * Math.sqrt(-2 * Math.log(s) / s);
    return dev * norm + mean
  };
  Chance.prototype.string = function(options) {
    options = initOptions(options);
    var length = options.length || this.natural({min:5, max:20}), text = "", pool = options.pool;
    for(var i = 0;i < length;i++) {
      text += this.character({pool:pool})
    }
    return text
  };
  Chance.prototype.capitalize = function(word) {
    return word.charAt(0).toUpperCase() + word.substr(1)
  };
  Chance.prototype.mixin = function(obj) {
    var chance = this;
    for(var func_name in obj) {
      Chance.prototype[func_name] = obj[func_name]
    }
    return this
  };
  Chance.prototype.pick = function(arr, count) {
    if(!count || count === 1) {
      return arr[this.natural({max:arr.length - 1})]
    }else {
      return this.shuffle(arr).slice(0, count)
    }
  };
  Chance.prototype.shuffle = function(arr) {
    var old_array = arr.slice(0), new_array = [], j = 0, length = Number(old_array.length);
    for(var i = 0;i < length;i++) {
      j = this.natural({max:old_array.length - 1});
      new_array[i] = old_array[j];
      old_array.splice(j, 1)
    }
    return new_array
  };
  Chance.prototype.paragraph = function(options) {
    options = initOptions(options);
    var sentences = options.sentences || this.natural({min:3, max:7}), sentence_array = [];
    for(var i = 0;i < sentences;i++) {
      sentence_array.push(this.sentence())
    }
    return sentence_array.join(" ")
  };
  Chance.prototype.sentence = function(options) {
    options = initOptions(options);
    var words = options.words || this.natural({min:12, max:18}), text, word_array = [];
    for(var i = 0;i < words;i++) {
      word_array.push(this.word())
    }
    text = word_array.join(" ");
    text = this.capitalize(text) + ".";
    return text
  };
  Chance.prototype.syllable = function(options) {
    options = initOptions(options);
    var length = options.length || this.natural({min:2, max:3}), consanants = "bcdfghjklmnprstvwz", vowels = "aeiou", all = consanants + vowels, text = "", chr;
    for(var i = 0;i < length;i++) {
      if(i === 0) {
        chr = this.character({pool:all})
      }else {
        if(consanants.indexOf(chr) === -1) {
          chr = this.character({pool:consanants})
        }else {
          chr = this.character({pool:vowels})
        }
      }
      text += chr
    }
    return text
  };
  Chance.prototype.word = function(options) {
    options = initOptions(options);
    testRange(options.syllables && options.length, "Chance: Cannot specify both syllables AND length.");
    var syllables = options.syllables || this.natural({min:1, max:3}), text = "";
    if(options.length) {
      do {
        text += this.syllable()
      }while(text.length < options.length);
      text = text.substring(0, options.length)
    }else {
      for(var i = 0;i < syllables;i++) {
        text += this.syllable()
      }
    }
    return text
  };
  Chance.prototype.age = function(options) {
    options = initOptions(options);
    var age;
    switch(options.type) {
      case "child":
        age = this.natural({min:1, max:12});
        break;
      case "teen":
        age = this.natural({min:13, max:19});
        break;
      case "adult":
        age = this.natural({min:18, max:120});
        break;
      case "senior":
        age = this.natural({min:65, max:120});
        break;
      default:
        age = this.natural({min:1, max:120});
        break
    }
    return age
  };
  Chance.prototype.birthday = function(options) {
    options = initOptions(options, {year:(new Date).getFullYear() - this.age(options)});
    return this.date(options)
  };
  var firstNames = ["Sophia", "Emma", "Isabella", "Jacob", "Mason", "Ethan", "Noah", "Olivia", "William", "Liam", "Jayden", "Michael", "Ava", "Alexander", "Aiden", "Daniel", "Matthew", "Elijah", "Emily", "James", "Anthony", "Benjamin", "Abigail", "Joshua", "Andrew", "David", "Joseph", "Logan", "Jackson", "Mia", "Christopher", "Gabriel", "Madison", "Samuel", "Ryan", "Lucas", "John", "Nathan", "Isaac", "Dylan", "Caleb", "Elizabeth", "Chloe", "Christian", "Landon", "Jonathan", "Carter", "Ella", "Luke", 
  "Owen", "Brayden", "Avery", "Gavin", "Wyatt", "Addison", "Isaiah", "Aubrey", "Henry", "Eli", "Hunter", "Lily", "Jack", "Natalie", "Evan", "Sofia", "Jordan", "Nicholas", "Tyler", "Aaron", "Charlotte", "Zoey", "Jeremiah", "Julian", "Cameron", "Grace", "Hannah", "Amelia", "Harper", "Levi", "Lillian", "Brandon", "Angel", "Austin", "Connor", "Adrian", "Robert", "Samantha", "Charles", "Evelyn", "Victoria", "Thomas", "Brooklyn", "Sebastian", "Zoe", "Colton", "Jaxon", "Layla", "Kevin", "Zachary", "Ayden", 
  "Dominic", "Blake", "Jose", "Hailey", "Oliver", "Justin", "Bentley", "Leah", "Jason", "Chase", "Ian", "Kaylee", "Anna", "Aaliyah", "Gabriella", "Josiah", "Allison", "Parker", "Xavier", "Nevaeh", "Alexis", "Adam", "Audrey", "Cooper", "Savannah", "Sarah", "Alyssa", "Claire", "Taylor", "Riley", "Camila", "Nathaniel", "Arianna", "Ashley", "Grayson", "Jace", "Brianna", "Carson", "Sophie", "Peyton", "Nolan", "Tristan", "Luis", "Brody", "Bella", "Khloe", "Genesis", "Alexa", "Juan", "Hudson", "Serenity", 
  "Kylie", "Aubree", "Scarlett", "Bryson", "Carlos", "Stella", "Maya", "Easton", "Katherine", "Julia", "Damian", "Alex", "Kayden", "Ryder", "Lucy", "Madelyn", "Jesus", "Cole", "Autumn", "Makayla", "Kayla", "Mackenzie", "Micah", "Vincent", "Max", "Lauren", "Jaxson", "Gianna", "Eric", "Ariana", "Asher", "Hayden", "Faith", "Alexandra", "Melanie", "Sydney", "Bailey", "Caroline", "Naomi", "Morgan", "Kennedy", "Ellie", "Jasmine", "Eva", "Skylar", "Diego", "Kimberly", "Violet", "Molly", "Miles", "Steven", 
  "Aria", "Ivan", "Jocelyn", "Trinity", "Elias", "Aidan", "Maxwell", "London", "Bryce", "Lydia", "Madeline", "Antonio", "Giovanni", "Reagan", "Timothy", "Bryan", "Piper", "Andrea", "Santiago", "Annabelle", "Maria", "Colin", "Richard", "Braxton", "Kaleb", "Brooke", "Kyle", "Kaden", "Preston", "Payton", "Miguel", "Jonah", "Paisley", "Paige", "Lincoln", "Ruby", "Nora", "Riley", "Mariah", "Leo", "Victor", "Brady", "Jeremy", "Mateo", "Brian", "Jaden", "Ashton", "Patrick", "Rylee", "Declan", "Lilly", "Brielle", 
  "Sean", "Joel", "Gael", "Sawyer", "Alejandro", "Jade", "Marcus", "Destiny", "Leonardo", "Jesse", "Caden", "Jake", "Kaiden", "Nicole", "Mila", "Wesley", "Kendall", "Liliana", "Camden", "Kaitlyn", "Natalia", "Sadie", "Edward", "Brantley", "Jordyn", "Roman", "Vanessa", "Mary", "Mya", "Penelope", "Isabelle", "Alice", "Axel", "Silas", "Jude", "Grant", "Reese", "Gabrielle", "Hadley", "Katelyn", "Angelina", "Rachel", "Isabel", "Eleanor", "Cayden", "Emmanuel", "George", "Clara", "Brooklynn", "Jessica", 
  "Maddox", "Malachi", "Bradley", "Alan", "Weston", "Elena", "Gage", "Aliyah", "Vivian", "Laila", "Sara", "Amy", "Devin", "Eliana", "Greyson", "Lyla", "Juliana", "Kenneth", "Mark", "Oscar", "Tanner", "Rylan", "Valeria", "Adriana", "Nicolas", "Makenzie", "Harrison", "Elise", "Mckenzie", "Derek", "Quinn", "Delilah", "Peyton", "Ezra", "Cora", "Kylee", "Tucker", "Emmett", "Avery", "Cody", "Rebecca", "Gracie", "Izabella", "Calvin", "Andres", "Jorge", "Abel", "Paul", "Abraham", "Kai", "Josephine", "Alaina", 
  "Michelle", "Jennifer", "Collin", "Theodore", "Ezekiel", "Eden", "Omar", "Jayce", "Valentina", "Conner", "Bennett", "Aurora", "Catherine", "Stephanie", "Trevor", "Valerie", "Eduardo", "Peter", "Maximus", "Jayla", "Jaiden", "Willow", "Jameson", "Seth", "Daisy", "Alana", "Melody", "Hazel", "Kingston", "Summer", "Melissa", "Javier", "Margaret", "Travis", "Kinsley", "Kinley", "Garrett", "Everett", "Ariel", "Lila", "Graham", "Giselle", "Ryleigh", "Xander", "Haley", "Julianna", "Ivy", "Alivia", "Cristian", 
  "Brynn", "Damien", "Ryker", "Griffin", "Keira", "Daniela", "Aniyah", "Angela", "Kate", "Londyn", "Corbin", "Myles", "Hayden", "Harmony", "Adalyn", "Luca", "Zane", "Francisco", "Ricardo", "Alexis", "Stephen", "Zayden", "Megan", "Allie", "Gabriela", "Iker", "Drake", "Alayna", "Lukas", "Presley", "Charlie", "Spencer", "Zion", "Erick", "Jenna", "Josue", "Alexandria", "Ashlyn", "Adrianna", "Jada", "Jeffrey", "Trenton", "Fiona", "Chance", "Norah", "Paxton", "Elliot", "Emery", "Fernando", "Maci", "Miranda", 
  "Keegan", "Landen", "Ximena", "Amaya", "Manuel", "Amir", "Shane", "Cecilia", "Raymond", "Andre", "Ana", "Shelby", "Katie", "Hope", "Callie", "Jordan", "Luna", "Leilani", "Eliza", "Mckenna", "Angel", "Genevieve", "Makenna", "Isla", "Lola", "Danielle", "Chelsea", "Leila", "Tessa", "Adelyn", "Camille", "Mikayla", "Adeline", "Adalynn", "Sienna", "Esther", "Jacqueline", "Emerson", "Arabella", "Maggie", "Athena", "Lucia", "Lexi", "Ayla"];
  Chance.prototype.first = function() {
    return this.pick(firstNames)
  };
  Chance.prototype.gender = function() {
    return this.pick(["Male", "Female"])
  };
  var lastNames = ["Smith", "Johnson", "Williams", "Jones", "Brown", "Davis", "Miller", "Wilson", "Moore", "Taylor", "Anderson", "Thomas", "Jackson", "White", "Harris", "Martin", "Thompson", "Garcia", "Martinez", "Robinson", "Clark", "Rodriguez", "Lewis", "Lee", "Walker", "Hall", "Allen", "Young", "Hernandez", "King", "Wright", "Lopez", "Hill", "Scott", "Green", "Adams", "Baker", "Gonzalez", "Nelson", "Carter", "Mitchell", "Perez", "Roberts", "Turner", "Phillips", "Campbell", "Parker", "Evans", "Edwards", 
  "Collins", "Stewart", "Sanchez", "Morris", "Rogers", "Reed", "Cook", "Morgan", "Bell", "Murphy", "Bailey", "Rivera", "Cooper", "Richardson", "Cox", "Howard", "Ward", "Torres", "Peterson", "Gray", "Ramirez", "James", "Watson", "Brooks", "Kelly", "Sanders", "Price", "Bennett", "Wood", "Barnes", "Ross", "Henderson", "Coleman", "Jenkins", "Perry", "Powell", "Long", "Patterson", "Hughes", "Flores", "Washington", "Butler", "Simmons", "Foster", "Gonzales", "Bryant", "Alexander", "Russell", "Griffin", 
  "Diaz", "Hayes", "Myers", "Ford", "Hamilton", "Graham", "Sullivan", "Wallace", "Woods", "Cole", "West", "Jordan", "Owens", "Reynolds", "Fisher", "Ellis", "Harrison", "Gibson", "McDonald", "Cruz", "Marshall", "Ortiz", "Gomez", "Murray", "Freeman", "Wells", "Webb", "Simpson", "Stevens", "Tucker", "Porter", "Hunter", "Hicks", "Crawford", "Henry", "Boyd", "Mason", "Morales", "Kennedy", "Warren", "Dixon", "Ramos", "Reyes", "Burns", "Gordon", "Shaw", "Holmes", "Rice", "Robertson", "Hunt", "Black", "Daniels", 
  "Palmer", "Mills", "Nichols", "Grant", "Knight", "Ferguson", "Rose", "Stone", "Hawkins", "Dunn", "Perkins", "Hudson", "Spencer", "Gardner", "Stephens", "Payne", "Pierce", "Berry", "Matthews", "Arnold", "Wagner", "Willis", "Ray", "Watkins", "Olson", "Carroll", "Duncan", "Snyder", "Hart", "Cunningham", "Bradley", "Lane", "Andrews", "Ruiz", "Harper", "Fox", "Riley", "Armstrong", "Carpenter", "Weaver", "Greene", "Lawrence", "Elliott", "Chavez", "Sims", "Austin", "Peters", "Kelley", "Franklin", "Lawson", 
  "Fields", "Gutierrez", "Ryan", "Schmidt", "Carr", "Vasquez", "Castillo", "Wheeler", "Chapman", "Oliver", "Montgomery", "Richards", "Williamson", "Johnston", "Banks", "Meyer", "Bishop", "McCoy", "Howell", "Alvarez", "Morrison", "Hansen", "Fernandez", "Garza", "Harvey", "Little", "Burton", "Stanley", "Nguyen", "George", "Jacobs", "Reid", "Kim", "Fuller", "Lynch", "Dean", "Gilbert", "Garrett", "Romero", "Welch", "Larson", "Frazier", "Burke", "Hanson", "Day", "Mendoza", "Moreno", "Bowman", "Medina", 
  "Fowler", "Brewer", "Hoffman", "Carlson", "Silva", "Pearson", "Holland", "Douglas", "Fleming", "Jensen", "Vargas", "Byrd", "Davidson", "Hopkins", "May", "Terry", "Herrera", "Wade", "Soto", "Walters", "Curtis", "Neal", "Caldwell", "Lowe", "Jennings", "Barnett", "Graves", "Jimenez", "Horton", "Shelton", "Barrett", "Obrien", "Castro", "Sutton", "Gregory", "McKinney", "Lucas", "Miles", "Craig", "Rodriquez", "Chambers", "Holt", "Lambert", "Fletcher", "Watts", "Bates", "Hale", "Rhodes", "Pena", "Beck", 
  "Newman", "Haynes", "McDaniel", "Mendez", "Bush", "Vaughn", "Parks", "Dawson", "Santiago", "Norris", "Hardy", "Love", "Steele", "Curry", "Powers", "Schultz", "Barker", "Guzman", "Page", "Munoz", "Ball", "Keller", "Chandler", "Weber", "Leonard", "Walsh", "Lyons", "Ramsey", "Wolfe", "Schneider", "Mullins", "Benson", "Sharp", "Bowen", "Daniel", "Barber", "Cummings", "Hines", "Baldwin", "Griffith", "Valdez", "Hubbard", "Salazar", "Reeves", "Warner", "Stevenson", "Burgess", "Santos", "Tate", "Cross", 
  "Garner", "Mann", "Mack", "Moss", "Thornton", "Dennis", "McGee", "Farmer", "Delgado", "Aguilar", "Vega", "Glover", "Manning", "Cohen", "Harmon", "Rodgers", "Robbins", "Newton", "Todd", "Blair", "Higgins", "Ingram", "Reese", "Cannon", "Strickland", "Townsend", "Potter", "Goodwin", "Walton", "Rowe", "Hampton", "Ortega", "Patton", "Swanson", "Joseph", "Francis", "Goodman", "Maldonado", "Yates", "Becker", "Erickson", "Hodges", "Rios", "Conner", "Adkins", "Webster", "Norman", "Malone", "Hammond", "Flowers", 
  "Cobb", "Moody", "Quinn", "Blake", "Maxwell", "Pope", "Floyd", "Osborne", "Paul", "McCarthy", "Guerrero", "Lindsey", "Estrada", "Sandoval", "Gibbs", "Tyler", "Gross", "Fitzgerald", "Stokes", "Doyle", "Sherman", "Saunders", "Wise", "Colon", "Gill", "Alvarado", "Greer", "Padilla", "Simon", "Waters", "Nunez", "Ballard", "Schwartz", "McBride", "Houston", "Christensen", "Klein", "Pratt", "Briggs", "Parsons", "McLaughlin", "Zimmerman", "French", "Buchanan", "Moran", "Copeland", "Roy", "Pittman", "Brady", 
  "McCormick", "Holloway", "Brock", "Poole", "Frank", "Logan", "Owen", "Bass", "Marsh", "Drake", "Wong", "Jefferson", "Park", "Morton", "Abbott", "Sparks", "Patrick", "Norton", "Huff", "Clayton", "Massey", "Lloyd", "Figueroa", "Carson", "Bowers", "Roberson", "Barton", "Tran", "Lamb", "Harrington", "Casey", "Boone", "Cortez", "Clarke", "Mathis", "Singleton", "Wilkins", "Cain", "Bryan", "Underwood", "Hogan", "McKenzie", "Collier", "Luna", "Phelps", "McGuire", "Allison", "Bridges", "Wilkerson", "Nash", 
  "Summers", "Atkins"];
  Chance.prototype.last = function() {
    return this.pick(lastNames)
  };
  Chance.prototype.name = function(options) {
    options = initOptions(options);
    var first = this.first(), last = this.last(), name;
    if(options.middle) {
      name = first + " " + this.first() + " " + last
    }else {
      if(options.middle_initial) {
        name = first + " " + this.character({alpha:true, casing:"upper"}) + ". " + last
      }else {
        name = first + " " + last
      }
    }
    if(options.prefix) {
      name = this.prefix() + " " + name
    }
    return name
  };
  Chance.prototype.name_prefixes = function() {
    return[{name:"Doctor", abbreviation:"Dr."}, {name:"Miss", abbreviation:"Miss"}, {name:"Misses", abbreviation:"Mrs."}, {name:"Mister", abbreviation:"Mr."}]
  };
  Chance.prototype.prefix = function(options) {
    return this.name_prefix(options)
  };
  Chance.prototype.name_prefix = function(options) {
    options = initOptions(options);
    return options.full ? this.pick(this.name_prefixes()).name : this.pick(this.name_prefixes()).abbreviation
  };
  Chance.prototype.color = function(options) {
    function gray(value, delimiter) {
      return[value, value, value].join(delimiter || "")
    }
    options = initOptions(options, {format:this.pick(["hex", "shorthex", "rgb"]), grayscale:false});
    var isGrayscale = options.grayscale;
    if(options.format === "hex") {
      return"#" + (isGrayscale ? gray(this.hash({length:2})) : this.hash({length:6}))
    }
    if(options.format === "shorthex") {
      return"#" + (isGrayscale ? gray(this.hash({length:1})) : this.hash({length:3}))
    }
    if(options.format === "rgb") {
      if(isGrayscale) {
        return"rgb(" + gray(this.natural({max:255}), ",") + ")"
      }else {
        return"rgb(" + this.natural({max:255}) + "," + this.natural({max:255}) + "," + this.natural({max:255}) + ")"
      }
    }
    throw new Error('Invalid format provided. Please provide one of "hex", "shorthex", or "rgb"');
  };
  Chance.prototype.domain = function(options) {
    options = initOptions(options);
    return this.word() + "." + (options.tld || this.tld())
  };
  Chance.prototype.email = function(options) {
    options = initOptions(options);
    return this.word() + "@" + (options.domain || this.domain())
  };
  Chance.prototype.fbid = function() {
    return parseInt("10000" + this.natural({max:1E11}), 10)
  };
  Chance.prototype.hashtag = function() {
    return"#" + this.word()
  };
  Chance.prototype.ip = function() {
    return this.natural({max:255}) + "." + this.natural({max:255}) + "." + this.natural({max:255}) + "." + this.natural({max:255})
  };
  Chance.prototype.ipv6 = function() {
    var ip_addr = "";
    for(var i = 0;i < 8;i++) {
      ip_addr += this.hash({length:4}) + ":"
    }
    return ip_addr.substr(0, ip_addr.length - 1)
  };
  Chance.prototype.klout = function() {
    return this.natural({min:1, max:99})
  };
  Chance.prototype.tlds = function() {
    return["com", "org", "edu", "gov", "co.uk", "net", "io"]
  };
  Chance.prototype.tld = function() {
    return this.pick(this.tlds())
  };
  Chance.prototype.twitter = function() {
    return"@" + this.word()
  };
  Chance.prototype.address = function(options) {
    options = initOptions(options);
    return this.natural({min:5, max:2E3}) + " " + this.street(options)
  };
  Chance.prototype.areacode = function(options) {
    options = initOptions(options, {parens:true});
    var areacode = this.natural({min:2, max:9}).toString() + this.natural({min:0, max:8}).toString() + this.natural({min:0, max:9}).toString();
    return options.parens ? "(" + areacode + ")" : areacode
  };
  Chance.prototype.city = function() {
    return this.capitalize(this.word({syllables:3}))
  };
  Chance.prototype.coordinates = function(options) {
    options = initOptions(options);
    return this.latitude(options) + ", " + this.longitude(options)
  };
  Chance.prototype.latitude = function(options) {
    options = initOptions(options, {fixed:5});
    return this.floating({min:-90, max:90, fixed:options.fixed})
  };
  Chance.prototype.longitude = function(options) {
    options = initOptions(options, {fixed:5});
    return this.floating({min:0, max:180, fixed:options.fixed})
  };
  Chance.prototype.phone = function(options) {
    options = initOptions(options, {formatted:true});
    if(!options.formatted) {
      options.parens = false
    }
    var areacode = this.areacode(options).toString();
    var exchange = this.natural({min:2, max:9}).toString() + this.natural({min:0, max:9}).toString() + this.natural({min:0, max:9}).toString();
    var subscriber = this.natural({min:1E3, max:9999}).toString();
    return options.formatted ? areacode + " " + exchange + "-" + subscriber : areacode + exchange + subscriber
  };
  Chance.prototype.postal = function() {
    var pd = this.character({pool:"XVTSRPNKLMHJGECBA"});
    var fsa = pd + this.natural({max:9}) + this.character({alpha:true, casing:"upper"});
    var ldu = this.natural({max:9}) + this.character({alpha:true, casing:"upper"}) + this.natural({max:9});
    return fsa + " " + ldu
  };
  Chance.prototype.provinces = function() {
    return[{name:"Alberta", abbreviation:"AB"}, {name:"British Columbia", abbreviation:"BC"}, {name:"Manitoba", abbreviation:"MB"}, {name:"New Brunswick", abbreviation:"NB"}, {name:"Newfoundland and Labrador", abbreviation:"NL"}, {name:"Nova Scotia", abbreviation:"NS"}, {name:"Ontario", abbreviation:"ON"}, {name:"Prince Edward Island", abbreviation:"PE"}, {name:"Quebec", abbreviation:"QC"}, {name:"Saskatchewan", abbreviation:"SK"}, {name:"Northwest Territories", abbreviation:"NT"}, {name:"Nunavut", 
    abbreviation:"NU"}, {name:"Yukon", abbreviation:"YT"}]
  };
  Chance.prototype.province = function(options) {
    return options && options.full ? this.pick(this.provinces()).name : this.pick(this.provinces()).abbreviation
  };
  Chance.prototype.radio = function(options) {
    options = initOptions(options, {side:"?"});
    var fl = "";
    switch(options.side.toLowerCase()) {
      case "east":
      ;
      case "e":
        fl = "W";
        break;
      case "west":
      ;
      case "w":
        fl = "K";
        break;
      default:
        fl = this.character({pool:"KW"});
        break
    }
    return fl + this.character({alpha:true, casing:"upper"}) + this.character({alpha:true, casing:"upper"}) + this.character({alpha:true, casing:"upper"})
  };
  Chance.prototype.state = function(options) {
    return options && options.full ? this.pick(this.states()).name : this.pick(this.states()).abbreviation
  };
  Chance.prototype.states = function() {
    return[{name:"Alabama", abbreviation:"AL"}, {name:"Alaska", abbreviation:"AK"}, {name:"American Samoa", abbreviation:"AS"}, {name:"Arizona", abbreviation:"AZ"}, {name:"Arkansas", abbreviation:"AR"}, {name:"Armed Forces Europe", abbreviation:"AE"}, {name:"Armed Forces Pacific", abbreviation:"AP"}, {name:"Armed Forces the Americas", abbreviation:"AA"}, {name:"California", abbreviation:"CA"}, {name:"Colorado", abbreviation:"CO"}, {name:"Connecticut", abbreviation:"CT"}, {name:"Delaware", abbreviation:"DE"}, 
    {name:"District of Columbia", abbreviation:"DC"}, {name:"Federated States of Micronesia", abbreviation:"FM"}, {name:"Florida", abbreviation:"FL"}, {name:"Georgia", abbreviation:"GA"}, {name:"Guam", abbreviation:"GU"}, {name:"Hawaii", abbreviation:"HI"}, {name:"Idaho", abbreviation:"ID"}, {name:"Illinois", abbreviation:"IL"}, {name:"Indiana", abbreviation:"IN"}, {name:"Iowa", abbreviation:"IA"}, {name:"Kansas", abbreviation:"KS"}, {name:"Kentucky", abbreviation:"KY"}, {name:"Louisiana", abbreviation:"LA"}, 
    {name:"Maine", abbreviation:"ME"}, {name:"Marshall Islands", abbreviation:"MH"}, {name:"Maryland", abbreviation:"MD"}, {name:"Massachusetts", abbreviation:"MA"}, {name:"Michigan", abbreviation:"MI"}, {name:"Minnesota", abbreviation:"MN"}, {name:"Mississippi", abbreviation:"MS"}, {name:"Missouri", abbreviation:"MO"}, {name:"Montana", abbreviation:"MT"}, {name:"Nebraska", abbreviation:"NE"}, {name:"Nevada", abbreviation:"NV"}, {name:"New Hampshire", abbreviation:"NH"}, {name:"New Jersey", abbreviation:"NJ"}, 
    {name:"New Mexico", abbreviation:"NM"}, {name:"New York", abbreviation:"NY"}, {name:"North Carolina", abbreviation:"NC"}, {name:"North Dakota", abbreviation:"ND"}, {name:"Northern Mariana Islands", abbreviation:"MP"}, {name:"Ohio", abbreviation:"OH"}, {name:"Oklahoma", abbreviation:"OK"}, {name:"Oregon", abbreviation:"OR"}, {name:"Pennsylvania", abbreviation:"PA"}, {name:"Puerto Rico", abbreviation:"PR"}, {name:"Rhode Island", abbreviation:"RI"}, {name:"South Carolina", abbreviation:"SC"}, {name:"South Dakota", 
    abbreviation:"SD"}, {name:"Tennessee", abbreviation:"TN"}, {name:"Texas", abbreviation:"TX"}, {name:"Utah", abbreviation:"UT"}, {name:"Vermont", abbreviation:"VT"}, {name:"Virgin Islands, U.S.", abbreviation:"VI"}, {name:"Virginia", abbreviation:"VA"}, {name:"Washington", abbreviation:"WA"}, {name:"West Virginia", abbreviation:"WV"}, {name:"Wisconsin", abbreviation:"WI"}, {name:"Wyoming", abbreviation:"WY"}]
  };
  Chance.prototype.street = function(options) {
    options = initOptions(options);
    var street = this.word({syllables:2});
    street = this.capitalize(street);
    street += " ";
    street += options.short_suffix ? this.street_suffix().abbreviation : this.street_suffix().name;
    return street
  };
  Chance.prototype.street_suffix = function() {
    return this.pick(this.street_suffixes())
  };
  Chance.prototype.street_suffixes = function() {
    return[{name:"Avenue", abbreviation:"Ave"}, {name:"Boulevard", abbreviation:"Blvd"}, {name:"Center", abbreviation:"Ctr"}, {name:"Circle", abbreviation:"Cir"}, {name:"Court", abbreviation:"Ct"}, {name:"Drive", abbreviation:"Dr"}, {name:"Extension", abbreviation:"Ext"}, {name:"Glen", abbreviation:"Gln"}, {name:"Grove", abbreviation:"Grv"}, {name:"Heights", abbreviation:"Hts"}, {name:"Highway", abbreviation:"Hwy"}, {name:"Junction", abbreviation:"Jct"}, {name:"Key", abbreviation:"Key"}, {name:"Lane", 
    abbreviation:"Ln"}, {name:"Loop", abbreviation:"Loop"}, {name:"Manor", abbreviation:"Mnr"}, {name:"Mill", abbreviation:"Mill"}, {name:"Park", abbreviation:"Park"}, {name:"Parkway", abbreviation:"Pkwy"}, {name:"Pass", abbreviation:"Pass"}, {name:"Path", abbreviation:"Path"}, {name:"Pike", abbreviation:"Pike"}, {name:"Place", abbreviation:"Pl"}, {name:"Plaza", abbreviation:"Plz"}, {name:"Point", abbreviation:"Pt"}, {name:"Ridge", abbreviation:"Rdg"}, {name:"River", abbreviation:"Riv"}, {name:"Road", 
    abbreviation:"Rd"}, {name:"Square", abbreviation:"Sq"}, {name:"Street", abbreviation:"St"}, {name:"Terrace", abbreviation:"Ter"}, {name:"Trail", abbreviation:"Trl"}, {name:"Turnpike", abbreviation:"Tpke"}, {name:"View", abbreviation:"Vw"}, {name:"Way", abbreviation:"Way"}]
  };
  Chance.prototype.zip = function(options) {
    var zip = "";
    for(var i = 0;i < 5;i++) {
      zip += this.natural({max:9}).toString()
    }
    if(options && options.plusfour === true) {
      zip += "-";
      for(i = 0;i < 4;i++) {
        zip += this.natural({max:9}).toString()
      }
    }
    return zip
  };
  Chance.prototype.ampm = function() {
    return this.bool() ? "am" : "pm"
  };
  Chance.prototype.date = function(options) {
    var m = this.month({raw:true}), date_string;
    options = initOptions(options, {year:parseInt(this.year(), 10), month:m.numeric - 1, day:this.natural({min:1, max:m.days}), hour:this.hour(), minute:this.minute(), second:this.second(), millisecond:this.millisecond(), american:true, string:false});
    var date = new Date(options.year, options.month, options.day, options.hour, options.minute, options.second, options.millisecond);
    if(options.american) {
      date_string = date.getMonth() + 1 + "/" + date.getDate() + "/" + date.getFullYear()
    }else {
      date_string = date.getDate() + "/" + (date.getMonth() + 1) + "/" + date.getFullYear()
    }
    return options.string ? date_string : date
  };
  Chance.prototype.hammertime = function(options) {
    return this.date(options).getTime()
  };
  Chance.prototype.hour = function(options) {
    options = initOptions(options);
    var max = options.twentyfour ? 24 : 12;
    return this.natural({min:1, max:max})
  };
  Chance.prototype.millisecond = function() {
    return this.natural({max:999})
  };
  Chance.prototype.minute = Chance.prototype.second = function() {
    return this.natural({max:59})
  };
  Chance.prototype.month = function(options) {
    options = initOptions(options);
    var month = this.pick(this.months());
    return options.raw ? month : month.name
  };
  Chance.prototype.months = function() {
    return[{name:"January", short_name:"Jan", numeric:"01", days:31}, {name:"February", short_name:"Feb", numeric:"02", days:28}, {name:"March", short_name:"Mar", numeric:"03", days:31}, {name:"April", short_name:"Apr", numeric:"04", days:30}, {name:"May", short_name:"May", numeric:"05", days:31}, {name:"June", short_name:"Jun", numeric:"06", days:30}, {name:"July", short_name:"Jul", numeric:"07", days:31}, {name:"August", short_name:"Aug", numeric:"08", days:31}, {name:"September", short_name:"Sep", 
    numeric:"09", days:30}, {name:"October", short_name:"Oct", numeric:"10", days:31}, {name:"November", short_name:"Nov", numeric:"11", days:30}, {name:"December", short_name:"Dec", numeric:"12", days:31}]
  };
  Chance.prototype.second = function() {
    return this.natural({max:59})
  };
  Chance.prototype.timestamp = function() {
    return this.natural({min:1, max:parseInt((new Date).getTime() / 1E3, 10)})
  };
  Chance.prototype.year = function(options) {
    options = initOptions(options, {min:(new Date).getFullYear()});
    options.max = typeof options.max !== "undefined" ? options.max : options.min + 100;
    return this.natural(options).toString()
  };
  Chance.prototype.cc = function(options) {
    options = initOptions(options);
    var type, number, to_generate, type_name;
    type = options.type ? this.cc_type({name:options.type, raw:true}) : this.cc_type({raw:true});
    number = type.prefix.split("");
    to_generate = type.length - type.prefix.length - 1;
    for(var i = 0;i < to_generate;i++) {
      number.push(this.integer({min:0, max:9}))
    }
    number.push(this.luhn_calculate(number.join("")));
    return number.join("")
  };
  Chance.prototype.cc_types = function() {
    return[{name:"American Express", short_name:"amex", prefix:"34", length:15}, {name:"Bankcard", short_name:"bankcard", prefix:"5610", length:16}, {name:"China UnionPay", short_name:"chinaunion", prefix:"62", length:16}, {name:"Diners Club Carte Blanche", short_name:"dccarte", prefix:"300", length:14}, {name:"Diners Club enRoute", short_name:"dcenroute", prefix:"2014", length:15}, {name:"Diners Club International", short_name:"dcintl", prefix:"36", length:14}, {name:"Diners Club United States & Canada", 
    short_name:"dcusc", prefix:"54", length:16}, {name:"Discover Card", short_name:"discover", prefix:"6011", length:16}, {name:"InstaPayment", short_name:"instapay", prefix:"637", length:16}, {name:"JCB", short_name:"jcb", prefix:"3528", length:16}, {name:"Laser", short_name:"laser", prefix:"6304", length:16}, {name:"Maestro", short_name:"maestro", prefix:"5018", length:16}, {name:"Mastercard", short_name:"mc", prefix:"51", length:16}, {name:"Solo", short_name:"solo", prefix:"6334", length:16}, 
    {name:"Switch", short_name:"switch", prefix:"4903", length:16}, {name:"Visa", short_name:"visa", prefix:"4", length:16}, {name:"Visa Electron", short_name:"electron", prefix:"4026", length:16}]
  };
  Chance.prototype.cc_type = function(options) {
    options = initOptions(options);
    var types = this.cc_types(), type = null;
    if(options.name) {
      for(var i = 0;i < types.length;i++) {
        if(types[i].name === options.name || types[i].short_name === options.name) {
          type = types[i];
          break
        }
      }
      if(type === null) {
        throw new Error("Credit card type '" + options.name + "'' is not suppoted");
      }
    }else {
      type = this.pick(types)
    }
    return options.raw ? type : type.name
  };
  Chance.prototype.dollar = function(options) {
    options = initOptions(options, {max:1E4, min:0});
    var dollar = this.floating({min:options.min, max:options.max, fixed:2}).toString(), cents = dollar.split(".")[1];
    if(cents === undefined) {
      dollar += ".00"
    }else {
      if(cents.length < 2) {
        dollar = dollar + "0"
      }
    }
    if(dollar < 0) {
      return"-$" + dollar.replace("-", "")
    }else {
      return"$" + dollar
    }
  };
  Chance.prototype.exp = function(options) {
    options = initOptions(options);
    var exp = {};
    exp.year = this.exp_year();
    if(exp.year === (new Date).getFullYear()) {
      exp.month = this.exp_month({future:true})
    }else {
      exp.month = this.exp_month()
    }
    return options.raw ? exp : exp.month + "/" + exp.year
  };
  Chance.prototype.exp_month = function(options) {
    options = initOptions(options);
    var month, month_int;
    if(options.future) {
      do {
        month = this.month({raw:true}).numeric;
        month_int = parseInt(month, 10)
      }while(month_int < (new Date).getMonth())
    }else {
      month = this.month({raw:true}).numeric
    }
    return month
  };
  Chance.prototype.exp_year = function() {
    return this.year({max:(new Date).getFullYear() + 10})
  };
  Chance.prototype.d4 = function() {
    return this.natural({min:1, max:4})
  };
  Chance.prototype.d6 = function() {
    return this.natural({min:1, max:6})
  };
  Chance.prototype.d8 = function() {
    return this.natural({min:1, max:8})
  };
  Chance.prototype.d10 = function() {
    return this.natural({min:1, max:10})
  };
  Chance.prototype.d12 = function() {
    return this.natural({min:1, max:12})
  };
  Chance.prototype.d20 = function() {
    return this.natural({min:1, max:20})
  };
  Chance.prototype.d30 = function() {
    return this.natural({min:1, max:30})
  };
  Chance.prototype.d100 = function() {
    return this.natural({min:1, max:100})
  };
  Chance.prototype.rpg = function(thrown, options) {
    options = initOptions(options);
    if(thrown === null) {
      throw new Error("A type of die roll must be included");
    }else {
      var bits = thrown.toLowerCase().split("d"), rolls = [];
      if(bits.length !== 2 || (!parseInt(bits[0], 10) || !parseInt(bits[1], 10))) {
        throw new Error("Invalid format provided. Please provide #d# where the first # is the number of dice to roll, the second # is the max of each die");
      }
      for(var i = bits[0];i > 0;i--) {
        rolls[i - 1] = this.natural({min:1, max:bits[1]})
      }
      return typeof options.sum !== "undefined" && options.sum ? rolls.reduce(function(p, c) {
        return p + c
      }) : rolls
    }
  };
  Chance.prototype.guid = function(options) {
    options = options || {version:5};
    var guid_pool = "ABCDEF1234567890", variant_pool = "AB89", guid = this.string({pool:guid_pool, length:8}) + "-" + this.string({pool:guid_pool, length:4}) + "-" + options.version + this.string({pool:guid_pool, length:3}) + "-" + this.string({pool:variant_pool, length:1}) + this.string({pool:guid_pool, length:3}) + "-" + this.string({pool:guid_pool, length:12});
    return guid
  };
  Chance.prototype.hash = function(options) {
    options = initOptions(options, {length:40, casing:"lower"});
    var pool = options.casing === "upper" ? HEX_POOL.toUpperCase() : HEX_POOL;
    return this.string({pool:pool, length:options.length})
  };
  Chance.prototype.luhn_check = function(num) {
    var str = num.toString();
    var checkDigit = +str.substring(str.length - 1);
    return checkDigit === this.luhn_calculate(+str.substring(0, str.length - 1))
  };
  Chance.prototype.luhn_calculate = function(num) {
    var digits = num.toString().split("").reverse();
    var sum = 0;
    for(var i = 0, l = digits.length;l > i;++i) {
      var digit = +digits[i];
      if(i % 2 === 0) {
        digit *= 2;
        if(digit > 9) {
          digit -= 9
        }
      }
      sum += digit
    }
    return sum * 9 % 10
  };
  Chance.prototype.mersenne_twister = function(seed) {
    return new MersenneTwister(seed)
  };
  Chance.prototype.VERSION = "0.5.3";
  var MersenneTwister = function(seed) {
    if(seed === undefined) {
      seed = (new Date).getTime()
    }
    this.N = 624;
    this.M = 397;
    this.MATRIX_A = 2567483615;
    this.UPPER_MASK = 2147483648;
    this.LOWER_MASK = 2147483647;
    this.mt = new Array(this.N);
    this.mti = this.N + 1;
    this.init_genrand(seed)
  };
  MersenneTwister.prototype.init_genrand = function(s) {
    this.mt[0] = s >>> 0;
    for(this.mti = 1;this.mti < this.N;this.mti++) {
      s = this.mt[this.mti - 1] ^ this.mt[this.mti - 1] >>> 30;
      this.mt[this.mti] = (((s & 4294901760) >>> 16) * 1812433253 << 16) + (s & 65535) * 1812433253 + this.mti;
      this.mt[this.mti] >>>= 0
    }
  };
  MersenneTwister.prototype.init_by_array = function(init_key, key_length) {
    var i = 1, j = 0, k, s;
    this.init_genrand(19650218);
    k = this.N > key_length ? this.N : key_length;
    for(;k;k--) {
      s = this.mt[i - 1] ^ this.mt[i - 1] >>> 30;
      this.mt[i] = (this.mt[i] ^ (((s & 4294901760) >>> 16) * 1664525 << 16) + (s & 65535) * 1664525) + init_key[j] + j;
      this.mt[i] >>>= 0;
      i++;
      j++;
      if(i >= this.N) {
        this.mt[0] = this.mt[this.N - 1];
        i = 1
      }
      if(j >= key_length) {
        j = 0
      }
    }
    for(k = this.N - 1;k;k--) {
      s = this.mt[i - 1] ^ this.mt[i - 1] >>> 30;
      this.mt[i] = (this.mt[i] ^ (((s & 4294901760) >>> 16) * 1566083941 << 16) + (s & 65535) * 1566083941) - i;
      this.mt[i] >>>= 0;
      i++;
      if(i >= this.N) {
        this.mt[0] = this.mt[this.N - 1];
        i = 1
      }
    }
    this.mt[0] = 2147483648
  };
  MersenneTwister.prototype.genrand_int32 = function() {
    var y;
    var mag01 = new Array(0, this.MATRIX_A);
    if(this.mti >= this.N) {
      var kk;
      if(this.mti === this.N + 1) {
        this.init_genrand(5489)
      }
      for(kk = 0;kk < this.N - this.M;kk++) {
        y = this.mt[kk] & this.UPPER_MASK | this.mt[kk + 1] & this.LOWER_MASK;
        this.mt[kk] = this.mt[kk + this.M] ^ y >>> 1 ^ mag01[y & 1]
      }
      for(;kk < this.N - 1;kk++) {
        y = this.mt[kk] & this.UPPER_MASK | this.mt[kk + 1] & this.LOWER_MASK;
        this.mt[kk] = this.mt[kk + (this.M - this.N)] ^ y >>> 1 ^ mag01[y & 1]
      }
      y = this.mt[this.N - 1] & this.UPPER_MASK | this.mt[0] & this.LOWER_MASK;
      this.mt[this.N - 1] = this.mt[this.M - 1] ^ y >>> 1 ^ mag01[y & 1];
      this.mti = 0
    }
    y = this.mt[this.mti++];
    y ^= y >>> 11;
    y ^= y << 7 & 2636928640;
    y ^= y << 15 & 4022730752;
    y ^= y >>> 18;
    return y >>> 0
  };
  MersenneTwister.prototype.genrand_int31 = function() {
    return this.genrand_int32() >>> 1
  };
  MersenneTwister.prototype.genrand_real1 = function() {
    return this.genrand_int32() * (1 / 4294967295)
  };
  MersenneTwister.prototype.random = function() {
    return this.genrand_int32() * (1 / 4294967296)
  };
  MersenneTwister.prototype.genrand_real3 = function() {
    return(this.genrand_int32() + 0.5) * (1 / 4294967296)
  };
  MersenneTwister.prototype.genrand_res53 = function() {
    var a = this.genrand_int32() >>> 5, b = this.genrand_int32() >>> 6;
    return(a * 67108864 + b) * (1 / 9007199254740992)
  };
  if(typeof exports !== "undefined") {
    if(typeof module !== "undefined" && module.exports) {
      exports = module.exports = Chance
    }
    exports.Chance = Chance
  }
  if(typeof define === "function" && define.amd) {
    define("Chance", [], function() {
      return Chance
    })
  }
  if(typeof window === "object" && typeof window.document === "object") {
    window.Chance = Chance;
    window.chance = new Chance
  }
})();
var bananaDirectionRandomizer;
(function(window) {
  var p = CharBase.prototype;
  p.updateHero = function() {
    if(this.vis.x < -40 + deltaForHLeft() || (this.vis.x > 360 - deltaForHLeft() || (this.vis.y > viewportH + 43 || this.vis.y < -43))) {
      this.dieByWorldOut()
    }
    if(!this.isCatched && (!this.isTransforming && (this.teleportationStatus < 0 && !this.isDied))) {
      this.vis.scaleX = this.additVision.scaleX = this.scaleY + Math.cos((counter + this.animMargin) / 5) / 80;
      this.vis.scaleY = this.additVision.scaleY = this.scaleY - Math.cos((counter + this.animMargin) / 5) / 100
    }
  };
  p.applyBananaImpulse = function() {
    if(!bananaDirectionRandomizer) {
      bananaDirectionRandomizer = new Chance
    }
    var angle = Math.atan2(this.physBody.vy, this.physBody.vx);
    angle += bananaDirectionRandomizer.floating({min:-1.57, max:1.57});
    var speed = Math.sqrt(this.physBody.vy * this.physBody.vy + this.physBody.vx * this.physBody.vx);
    speed = Math.max(170, speed);
    this.physBody.setVel(v(speed * Math.cos(angle), speed * Math.sin(angle)));
    playSound("bananaSound")
  }
})(window);
(function(window) {
  var p = CharBase.prototype;
  p.loadAllAdditParams = function(params) {
    if(params.length > 0 && params[0].length > 0) {
      this.additParams = params[0].split("_")
    }else {
      this.additParams = []
    }
  };
  p.getAdditParams = function(index) {
    if(this.additParams.length > index) {
      return this.additParams[index]
    }else {
      return null
    }
  };
  p.hasAdditParams = function(paramName) {
    for(var i = this.additParams.length;i >= 0;i--) {
      if(this.additParams[i] === paramName) {
        return true
      }
    }
    return false
  };
  p.getAdditParamIndex = function(paramName) {
    for(var i = this.additParams.length;i >= 0;i--) {
      if(this.additParams[i] === paramName) {
        return i
      }
    }
    return null
  }
})(window);
(function(window) {
  var p = CharBase.prototype;
  p.setZombieVision = function() {
    this.isZombie = true;
    this.isHero = true;
    this.vis.play();
    this.isByPhysPosUpdate = true;
    addToArray(allHeroes, this);
    if(this.hasAdditParams("SLEEP")) {
      this.additVision.gotoAndPlay("zzzanim");
      this.additVision.currentAnimationFrame = Math.floor(Math.random() * 40);
      this.isIgnoreAdditVisionRot = true;
      addToParent(this.additVision, this.parent);
      this.isSleeps = true
    }
  };
  p.updateZombie = function() {
    if(isDragging && currentChar === this) {
      strenghtArrow.x = currentChar.vis.x;
      strenghtArrow.y = currentChar.vis.y
    }
  }
})(window);
var animStartRandomizer;
var zombieSkinRandomizer;
(function(window) {
  var p = CharBase.prototype;
  p.setBuyerVision = function() {
    if(!animStartRandomizer) {
      animStartRandomizer = new Chance;
      zombieSkinRandomizer = new Chance
    }
    this.isHero = true;
    this.isBuyer = true;
    this.vis.play();
    this.isByPhysPosUpdate = true;
    addToArray(allHeroes, this);
    this.additVision.gotoAndPlay("eyesAnim");
    this.additVision.currentAnimationFrame = Math.floor(Math.random() * 40);
    addToParent(this.additVision, this.parent);
    if(!this.hasAdditParams("IDLE")) {
      var tween = createjs.Tween.get(this, {override:true, loop:true}).to({additRotation:-30}, 250, createjs.Ease.sineOut).wait(2E3).to({additRotation:0}, 250, createjs.Ease.sineOut).wait(1750).to({additRotation:30}, 250, createjs.Ease.sineOut).wait(2E3).to({additRotation:0}, 250, createjs.Ease.sineOut).wait(1750);
      tween.setPosition(animStartRandomizer.integer({min:0, max:5E3}))
    }
  };
  p.updateBuyer = function() {
  };
  p.transformToZombie = function(zombieCollided) {
    if(this.teleportationStatus >= 0) {
      return
    }
    this.isZombie = true;
    this.isBuyer = false;
    createjs.Tween.removeTweens(this);
    this.isTransforming = true;
    this.createTransformBuyerTween();
    createPrerenderedPart(this.vis.x, this.vis.y, 1, "transitionEffect", 1120, this.vis, 1);
    playSound("zombieConversion");
    addAchiev(GREAT_START_ACHIEV)
  };
  p.createTransformBuyerTween = function() {
    var self = this;
    var skew = 15;
    createjs.Tween.get(this.vis, {override:true}).wait(80).to({skewX:-skew}, 80).to({skewX:skew}, 80).to({skewX:-skew}, 80).call(function() {
      self.endTransformBuyerToZombie()
    }).to({skewX:0}, 0)
  };
  p.endTransformBuyerToZombie = function() {
    if(this.skinId === "_7") {
      this.vis.gotoAndStop("ZOMBIE_TYPE" + this.skinId)
    }else {
      this.vis.gotoAndStop("ZOMBIE_TYPE_" + zombieSkinRandomizer.integer({min:1, max:2}))
    }
    removeFromParent(this.additVision);
    createPrerenderedPart(this.vis.x, this.vis.y, 1, "soul", 625, null, null, -90);
    this.isTransforming = false;
    checkForLevelWin()
  }
})(window);
(function(window) {
  var p = CharBase.prototype;
  p.setElectroVision = function() {
    this.additVision.gotoAndPlay("electroDangerAnim");
    this.additVision.currentAnimationFrame = Math.floor(Math.random() * 40);
    this.additVisionScaleMarginX = 1.25;
    this.additVisionScaleMarginX = 1.25;
    this.waitTime = parseInt(this.getAdditParams(0));
    this.activTime = parseInt(this.getAdditParams(1));
    this.currentTimer = parseInt(this.getAdditParams(2));
    this.state = WAIT_STATE;
    this.isActivated = false;
    this.additVision.visible = false
  };
  p.updateElectroDanger = function() {
    if(!this.additVision.parent) {
      addToParentWithIndex(this.additVision, this.parent, 2);
      addToParentWithIndex(this.vis, this.parent, 2)
    }
    this.currentTimer += lastDelta;
    if(this.state === ACTIVATED_STATE) {
      if(this.currentTimer >= this.activTime) {
        this.currentTimer = 0;
        this.state = WAIT_STATE;
        this.additVision.visible = false;
        this.isActivated = false
      }
    }else {
      if(this.state === WAIT_STATE) {
        if(this.currentTimer >= this.waitTime) {
          this.currentTimer = 0;
          this.state = ACTIVATED_STATE;
          this.additVision.visible = true;
          this.isActivated = true
        }
      }
    }
  }
})(window);
(function(window) {
  var ACTIVATING_FRAME = "SPIKE_TYPE_ACTIVATING";
  var DISABLING_FRAME = "SPIKE_TYPE_DISABLING";
  var p = CharBase.prototype;
  p.setSpikesVision = function() {
    this.vis.gotoAndStop(ACTIVATING_FRAME);
    setNextAnimation(this.vis, "");
    this.vis.gotoAndStop(DISABLING_FRAME);
    setNextAnimation(this.vis, "");
    this.vis.gotoAndStop(this.typeId);
    this.waitTime = parseInt(this.getAdditParams(0));
    this.activTime = parseInt(this.getAdditParams(1));
    this.currentTimer = parseInt(this.getAdditParams(2));
    this.state = WAIT_STATE;
    this.isActivated = false
  };
  p.updateSpikes = function() {
    this.currentTimer += lastDelta;
    if(this.state === ACTIVATED_STATE) {
      if(this.currentTimer >= this.activTime) {
        this.currentTimer = 0;
        this.state = WAIT_STATE;
        this.isActivated = false;
        this.vis.gotoAndPlay(DISABLING_FRAME)
      }
    }else {
      if(this.state === WAIT_STATE) {
        if(this.currentTimer >= this.waitTime) {
          this.currentTimer = 0;
          this.state = ACTIVATED_STATE;
          this.isActivated = true;
          this.vis.gotoAndPlay(ACTIVATING_FRAME)
        }
      }
    }
  }
})(window);
(function(window) {
  var ACTIVATING_FRAME = "TRAP_TYPE_ACTIVATED";
  var DISABLING_FRAME = "TRAP_TYPE";
  var p = CharBase.prototype;
  p.setTrapVision = function() {
    this.state = WAIT_STATE;
    this.isActivated = false;
    this.isByPhysPosUpdate = false
  };
  p.updateTraps = function() {
    if(this.catchedHero && this.catchedHero.isNeedTransformToStatic) {
      this.catchedHero.isNeedTransformToStatic = false;
      this.catchedHero.physBody = createCircleShape(this.vis.x, this.vis.y - 5, this.catchedHero.getRadiusByType() * this.catchedHero.scale, CATCHED_HERO_TYPE, 0, this.catchedHero);
      this.catchedHero.additRotation = 0;
      this.catchedHero.physBody.w = 0;
      this.catchedHero.physBody.setAngle(0);
      this.vis.y += 5;
      this.catchedHero.isInTrap = true;
      checkForTrapsLevelFail()
    }
  };
  p.trapHero = function(hero) {
    if(this.isActivated) {
      return
    }
    if(!hero.physBody) {
      return
    }
    this.catchedHero = hero;
    this.catchedHero.catchedTrap = this;
    if(hero.physBody) {
      toDisposePhysicsBodies.push(hero.physBody);
      hero.physBody = null;
      hero.isNeedTransformToStatic = true
    }
    this.isActivated = true;
    this.catchedHero.isCatched = true;
    this.vis.gotoAndStop(ACTIVATING_FRAME);
    addToParent(this.vis, this.parent);
    playSound("trapSound")
  }
})(window);
(function(window) {
  var p = CharBase.prototype;
  p.setInvisibleVision = function() {
    this.waitTime = parseInt(this.getAdditParams(0));
    this.activTime = parseInt(this.getAdditParams(1));
    this.currentTimer = parseInt(this.getAdditParams(2));
    this.state = WAIT_STATE;
    this.isActivated = false
  };
  p.updateInvisibleBlock = function() {
    this.currentTimer += lastDelta;
    if(this.state === ACTIVATED_STATE) {
      if(this.currentTimer >= this.activTime) {
        this.currentTimer = 0;
        this.state = WAIT_STATE;
        this.isActivated = false;
        this.physBody.shapeList[0].setSensor(false);
        createjs.Tween.get(this.vis, {override:true}).to({alpha:1}, 100)
      }
    }else {
      if(this.state === WAIT_STATE) {
        if(this.currentTimer >= this.waitTime) {
          this.currentTimer = 0;
          this.state = ACTIVATED_STATE;
          this.isActivated = true;
          this.physBody.shapeList[0].setSensor(true);
          createjs.Tween.get(this.vis, {override:true}).to({alpha:0.1}, 100)
        }
      }
    }
  }
})(window);
(function(window) {
  var p = CharBase.prototype;
  p.setButtonVision = function() {
    this.isActivated = false;
    this.activId = this.getActivIdByParameter(0);
    addToArray(allButtons, this)
  };
  p.updateButton = function() {
    this.vis.currentAnimationFrame = this.isActivated ? 1 : 0
  };
  p.postButtonUpdate = function() {
    this.isActivated = false
  }
})(window);
var RED = 0;
var BLUE = 1;
var GREEN = 2;
(function(window) {
  var p = CharBase.prototype;
  p.setDoorRemoteVision = function() {
    this.isActivated = false;
    this.activId = this.getActivIdByParameter(0);
    this.currentTimer = 0;
    this.state = WAIT_STATE;
    this.additVision.gotoAndStop("DOOR_" + this.getAdditParams(0));
    if(this.skinId.length > 0) {
      this.additVisionScaleMarginX = 0.69
    }
    addToParent(this.additVision, this.parent)
  };
  p.updateDoorRemote = function() {
    if(!this.currBtn) {
      this.findCurrentButton()
    }
    if(this.state === WAIT_STATE) {
      if(this.currBtn.isActivated) {
        this.vis.currentAnimationFrame = 0;
        this.vis.play();
        this.state = WAIT_TO_ACTIV_STATE;
        playSound("doorDown")
      }
    }else {
      if(this.state === WAIT_TO_ACTIV_STATE) {
        if(this.vis.currentAnimationFrame >= 7) {
          this.vis.stop();
          this.state = ACTIVATED_STATE;
          this.physBody.shapeList[0].setSensor(true)
        }
      }else {
        if(this.state === ACTIVATED_STATE) {
          if(!this.currBtn.isActivated) {
            this.vis.currentAnimationFrame = 12;
            this.vis.play();
            this.state = ACTIV_TO_WAIT_STATE;
            this.physBody.shapeList[0].setSensor(false);
            playSound("doorUp")
          }
        }else {
          if(this.state === ACTIV_TO_WAIT_STATE) {
            if(this.vis.currentAnimationFrame >= 18) {
              this.vis.stop();
              this.state = WAIT_STATE
            }
          }
        }
      }
    }
  };
  p.findCurrentButton = function() {
    for(var i = allButtons.length - 1;i >= 0;i--) {
      var btn = allButtons[i];
      if(btn.activId === this.activId) {
        this.currBtn = btn
      }
    }
  };
  p.getActivIdByParameter = function(paramNum) {
    var param = this.getAdditParams(paramNum);
    switch(param) {
      case "RED":
        return RED;
        break;
      case "BLUE":
        return BLUE;
        break;
      case "GREEN":
        return GREEN;
        break
    }
  }
})(window);
var allChars = [];
var allHeroes = [];
var disposedChars = [];
var allBombs = [];
var allButtons = [];
var allMonsters = [];
var allActivators = [];
var allTeleports = [];
var allScreamers = [];
var allFans = [];
var blockContainer;
var currentLevel = 0;
var isLevelCompleted = false;
var isLevelFailed = false;
var isInflateReason = false;
var currentChar;
var totalFriends = 0;
var isExplosionIgnoreBombs = false;
var totalBonuses = 0;
var collectedBonuses = 0;
var totalScore = 0;
var currentLevelScore = 0;
var scoreToAdd = 0;
var currentMoves = 0;
function initLevelManager() {
  container.addChild(blockContainer);
  initPhysics();
  strenghtArrow = createButton(0, 0, 1, "strenghtarrow", null, null, null);
  stage.addEventListener("stagemousedown", onCharContainerMouseDown);
  stage.addEventListener("stagemousemove", onCharContainerMouseMove);
  stage.addEventListener("stagemouseup", onCharContainerMouseUp)
}
function createChar(type, x, y, scaleX, scaleY, rotation, additParams) {
  var bon = geCharFromPool(type, blockContainer, scaleX, scaleY, additParams);
  bon.setPosition(x, y, rotation);
  bon.initPhysics();
  if(!isArrayContains(allChars, bon)) {
    allChars.push(bon)
  }
  return bon
}
var levelRestartsCounter = 0;
var levelsWithoutRestartsCounter = 0;
var diamondsCounter = 0;
function loadLevel(levelNum) {
  if(currentLevel != levelNum) {
    levelRestartsCounter = 0;
    MORE_EASY_MULT = 1
  }
  currentLevel = levelNum;
  if(currentLevel >= LEVELS_NUM) {
    currentLevel = currentLevel % LEVELS_NUM
  }
  showBgByLevelNum(currentLevel);
  setCurrentLevelLabel(currentLevel);
  loadLevelByCode(allLevels[currentLevel]);
  isGamePaused = false;
  isLevelRestarted = false;
  isNeedCacheSizeUpdate = true;
  playSound("levelStart")
}
var totalEnemies = 0;
function loadLevelByCode(code) {
  isGamePaused = true;
  disposeLevel();
  addInstructions();
  if(!code) {
    return
  }
  totalEnemies = 0;
  resetSoundOnNewLevel();
  for(var i = 0;i < code.length;i++) {
    var bonCode = code[i];
    if(isJoint(bonCode[0])) {
      keepJoint(bonCode)
    }else {
      if(isModification(bonCode[0])) {
        createModification(bonCode[0])
      }else {
        if(isBonus(bonCode[0])) {
          createBonus(bonCode[0], bonCode[1], bonCode[2], bonCode[3], bonCode[4], bonCode[5], bonCode[6])
        }else {
          createChar(bonCode[0], bonCode[1], bonCode[2], bonCode[3], bonCode[4], bonCode[5], bonCode[6])
        }
      }
    }
  }
  for(var i = 0;i < allJointCodes.length;i++) {
    var bonCode = allJointCodes[i];
    createChar(bonCode[0], bonCode[1], bonCode[2], bonCode[3], bonCode[4], bonCode[5], bonCode[6])
  }
  var length = allChars.length;
  for(i = allChars.length - 1;i >= 0;i--) {
    var ch = allChars[i];
    if(ch.type === AIM_TYPE) {
      addToParent(ch.vis, ch.parent)
    }
  }
  currentMoves = allStepsIndexes[currentLevel];
  updateMovesLabel()
}
function createModification(modCode) {
  if(modCode.indexOf("BOMB_IGNORE") > -1) {
    isExplosionIgnoreBombs = true
  }
}
var allJointCodes = [];
function keepJoint(jointCode) {
  allJointCodes.push(jointCode)
}
function isBonus(typeId) {
  return typeId.indexOf("BONUS") > -1
}
function isModification(typeId) {
  return typeId.indexOf("MODIFICATION") > -1
}
function isJoint(typeId) {
  return typeId.indexOf("JOINT_") > -1
}
var isLevelRestarted = false;
function restartLevel() {
  isLevelRestarted = true;
  levelRestartsCounter += 1;
  levelsWithoutRestartsCounter = 0;
  loadLevel(currentLevel);
  if(levelRestartsCounter >= 5) {
    addAchiev(ZOMBIE_KILLER_ACHIEV)
  }
  slowShowBgMusic(0)
}
function loadNextLevel() {
  loadLevel(currentLevel + 1)
}
var levelStartTimer = 0;
var ballNeededToWinNum = 0;
function disposeLevel() {
  isExplosionIgnoreBombs = false;
  ballNeededToWinNum = 0;
  disposeInstructions();
  isLevelFailed = isLevelCompleted = isInflateReason = false;
  levelStartTimer = 0;
  currentChar = null;
  isFailedByMovesOut = false;
  failByMovesTimer = 0;
  currentMoves = 0;
  scoreToAdd = 0;
  currentLevelScore = 0;
  totalBonuses = 0;
  collectedBonuses = 0;
  currentRemovablesNum = 0;
  var length = allChars.length;
  var i;
  for(i = 0;i < length;i++) {
    var ch = allChars.pop();
    ch.dispose()
  }
  allJointCodes = [];
  toDisposeChars = [];
  clickedChars = [];
  disposeBonuses();
  allBombs = [];
  allMonsters = [];
  allActivators = [];
  allTeleports = [];
  allFans = [];
  allScreamers = [];
  allButtons = [];
  while(toDisposePhysicsBodies.length > 0) {
    var body = toDisposePhysicsBodies.pop();
    destroyBody(body)
  }
  space.step(0.01);
  removeFromParent(strenghtArrow)
}
function disposeLevelPhysics() {
  var length = allChars.length;
  var i;
  for(i = 0;i < length;i++) {
    var ch = allChars[i];
    ch.disposePhysBody()
  }
  while(toDisposePhysicsBodies.length > 0) {
    var body = toDisposePhysicsBodies.pop();
    destroyBody(body)
  }
}
function addScore(score) {
  currentLevelScore += score
}
function addToDisposed(bonus) {
  if(!isArrayContains(disposedChars, bonus)) {
    disposedChars.push(bonus)
  }
}
function geCharFromPool(type, blockContainer, scaleX, scaleY, additParams) {
  if(disposedChars.length > 0) {
    var db = disposedChars.pop();
    db.reset(type, blockContainer, scaleX, scaleY, additParams);
    return db
  }else {
    return new CharBase(type, blockContainer, scaleX, scaleY, additParams)
  }
}
var BIG_DISTANCE = 1E8;
var mouseStartDx = 0;
var mouseStartDy = 0;
var lastMousePosX = 0;
var lastMousePosY = 0;
function onCharContainerMouseDown(event) {
  if(splashContainer && splashContainer.parent) {
    sponsorClick(event)
  }
  if(isGamePaused || (isLevelCompleted || isLevelFailed)) {
    return
  }
  var posX = (event.stageX - container.x) / scaleFactor;
  var posY = (event.stageY - container.y) / scaleFactor;
  var ch;
  var minDist = BIG_DISTANCE;
  var distSq = 0;
  var dx = 0;
  var dy = 0;
  var i = 0;
  for(i = 0;i < allBombs.length;i++) {
    ch = allBombs[i];
    if(ch.isExploded) {
      continue
    }
    dx = ch.vis.x - posX;
    dy = ch.vis.y - posY;
    distSq = dx * dx + dy * dy;
    if(distSq < 22 * 22) {
      addToArray(clickedChars, ch);
      return
    }
  }
  for(i = allFans.length - 1;i >= 0;--i) {
    ch = allFans[i];
    dx = ch.vis.x - posX;
    dy = ch.vis.y - posY;
    distSq = dx * dx + dy * dy;
    if(distSq < 28 * 28) {
      addToArray(clickedChars, ch);
      return
    }
  }
  for(i = allHeroes.length - 1;i >= 0;--i) {
    if(waitLaunchTouchTimer >= 0) {
      continue
    }
    ch = allHeroes[i];
    if(currentMoves <= 0) {
      continue
    }
    if(!ch.isZombie) {
      continue
    }
    if(ch.isTransforming) {
      continue
    }
    if(ch.isCatched) {
      continue
    }
    if(ch.isSleeps) {
      continue
    }
    if(ch.teleportationStatus >= 0) {
      continue
    }
    dx = ch.vis.x - posX;
    dy = ch.vis.y - posY;
    distSq = dx * dx + dy * dy;
    if(distSq < 34 * 34) {
      isDragging = true;
      currentChar = ch;
      strenghtArrow.x = ch.x;
      strenghtArrow.y = ch.y;
      mouseStartDx = dx;
      mouseStartDy = dy;
      lastMousePosX = posX;
      lastMousePosY = posY;
      pushStrenght = 0;
      strenghtArrow.currentAnimationFrame = 0;
      removeScreamers();
      return
    }
  }
  var body = getBodyAtMouse(posX / PHYS_SCALE, posY / PHYS_SCALE);
  if(body) {
    var c = body.userdata;
    if(c && c.isRemovable) {
      addToArray(clickedChars, body.userdata)
    }
  }
  event.preventDefault();
  event.stopPropagation();
  event.cancelBubble = true;
  event.returnValue = false;
  return false
}
function removeScreamers() {
  while(allScreamers.length > 0) {
    allScreamers.pop().dispose()
  }
}
var isDragging = false;
var pushAngle = 0;
var pushStrenght = 0;
var STRENGHT_ARROW_FRAMES_NUM = 14;
var waitLaunchTouchTimer = 0;
function onCharContainerMouseMove(event) {
  if(isDragging) {
    lastMousePosX = (event.stageX - container.x) / scaleFactor;
    lastMousePosY = (event.stageY - container.y) / scaleFactor;
    if(!strenghtArrow.parent) {
      addToParent(strenghtArrow, blockContainer)
    }
    var dx = lastMousePosX - currentChar.vis.x + mouseStartDx;
    var dy = lastMousePosY - currentChar.vis.y + mouseStartDy;
    pushAngle = Math.atan2(dy, dx);
    pushAngle -= Math.PI;
    pushStrenght = Math.sqrt(dx * dx + dy * dy);
    strenghtArrow.rotation = pushAngle * 180 / Math.PI;
    strenghtArrow.currentAnimationFrame = Math.min(STRENGHT_ARROW_FRAMES_NUM, Math.max(0, Math.floor(STRENGHT_ARROW_FRAMES_NUM * pushStrenght / 50)))
  }
  event.preventDefault();
  event.stopPropagation();
  event.cancelBubble = true;
  event.returnValue = false;
  return false
}
function onCharContainerMouseUp(event) {
  if(currentChar && (isDragging && (currentChar.physBody && waitLaunchTouchTimer < 0))) {
    var factor = PUSH_STRENGTH * currentChar.physBody.m * strenghtArrow.currentAnimationFrame / STRENGHT_ARROW_FRAMES_NUM;
    var force = v(Math.cos(pushAngle) * factor, Math.sin(pushAngle) * factor);
    if(Math.abs(force.x) > 1 || Math.abs(force.y) > 1) {
      waitLaunchTouchTimer = 10;
      currentChar.physBody.applyImpulse(force, v(0, 0));
      setTimeout(removeOneMove, 50);
      hideAllHelps();
      playStartVoice()
    }
  }
  isDragging = false;
  currentChar = null;
  removeFromParent(strenghtArrow);
  event.preventDefault();
  event.stopPropagation();
  event.cancelBubble = true;
  event.returnValue = false;
  return false
}
function removeOneMove() {
  currentMoves -= 1;
  updateMovesLabel()
}
function hideAllHelps() {
  var ch;
  for(var i = allChars.length - 1;i >= 0;--i) {
    ch = allChars[i];
    if(!ch.isHelp) {
      continue
    }
    if(ch.isDied) {
      continue
    }
    if(ch.isActivated) {
      continue
    }
    ch.isActivated = true;
    createjs.Tween.get(ch.vis).to({alpha:0}, 700).call(removeChildOnTweenComplete)
  }
}
var lastopenedlvl = 0;
var levelstates = [];
var LEVELS_NUM = 40;
var ZERO_STAR = 0;
var ONE_STAR = 1;
var TWO_STAR = 2;
var THREE_STAR = 3;
var ACHIEVS_NUM = 6;
var NOT_ACHIEVED = 0;
var ACHIEVED = 1;
var allachievs = [];
var GREAT_START_ACHIEV = 0;
var SUPER_COLLECTOR_ACHIEV = 1;
var MEGA_STAR_ACHIEV = 2;
var AMAZING_GAME_ACHIEV = 3;
var ZOMBIE_MASTER_ACHIEV = 4;
var ZOMBIE_KILLER_ACHIEV = 5;
var isStorageSupported = false;
function loadSaves() {
  lastopenedlvl = 0;
  isStorageSupported = isSupportshtml5storage();
  if(!isStorageSupported) {
    trace("storage not supported");
    for(var i = 0;i < LEVELS_NUM;i++) {
      levelstates.push(ZERO_STAR)
    }
    for(var i = 0;i < ACHIEVS_NUM;i++) {
      allachievs.push(NOT_ACHIEVED)
    }
    return
  }
  var stored = localStorage[STORAGE_PREFIX + "lastopenedlvl"];
  if(stored) {
    lastopenedlvl = parseInt(localStorage[STORAGE_PREFIX + "lastopenedlvl"]);
    for(var i = 0;i < LEVELS_NUM;i++) {
      var lvlState = localStorage[STORAGE_PREFIX + "levelstate" + i];
      levelstates.push(parseInt(lvlState))
    }
    for(var i = 0;i < ACHIEVS_NUM;i++) {
      var achievState = localStorage[STORAGE_PREFIX + "achiev" + i];
      if(achievState) {
        allachievs.push(parseInt(achievState))
      }else {
        allachievs.push(NOT_ACHIEVED)
      }
    }
    isMute = localStorage[STORAGE_PREFIX + "ismute"] == "1";
    totalFriends = localStorage[STORAGE_PREFIX + "totalfriends"] ? parseInt(localStorage[STORAGE_PREFIX + "totalFriends"]) : 0;
    totalScore = localStorage[STORAGE_PREFIX + "totalScore"] ? parseInt(localStorage[STORAGE_PREFIX + "totalScore"]) : 0;
    diamondsCounter = localStorage[STORAGE_PREFIX + "diamondsCounter"] ? parseInt(localStorage[STORAGE_PREFIX + "diamondsCounter"]) : 0
  }else {
    trace("saves not found!");
    for(var i = 0;i < LEVELS_NUM;i++) {
      levelstates.push(ZERO_STAR)
    }
    for(var i = 0;i < ACHIEVS_NUM;i++) {
      allachievs.push(NOT_ACHIEVED)
    }
    updateSaves()
  }
}
function getStarsForLevel(lvlNum) {
  return levelstates[lvlNum]
}
function saveGame(stars) {
  if(lastopenedlvl <= currentLevel) {
    lastopenedlvl = currentLevel + 1
  }
  if(levelstates[currentLevel] < stars) {
    levelstates[currentLevel] = stars
  }
  updateSaves()
}
function updateSaves() {
  if(!isStorageSupported) {
    return
  }
  localStorage[STORAGE_PREFIX + "lastopenedlvl"] = lastopenedlvl;
  for(var i = 0;i < LEVELS_NUM;i++) {
    localStorage[STORAGE_PREFIX + "levelstate" + i] = levelstates[i]
  }
  for(var i = 0;i < ACHIEVS_NUM;i++) {
    localStorage[STORAGE_PREFIX + "achiev" + i] = allachievs[i]
  }
  saveMuteState();
  localStorage[STORAGE_PREFIX + "totalfriends"] = "" + totalFriends;
  localStorage[STORAGE_PREFIX + "totalScore"] = "" + totalScore;
  localStorage[STORAGE_PREFIX + "diamondsCounter"] = "" + diamondsCounter
}
function saveMuteState() {
  if(!isStorageSupported) {
    return
  }
  localStorage[STORAGE_PREFIX + "ismute"] = isMute ? "1" : "0"
}
function isSupportshtml5storage() {
  try {
    var isSupported = "localStorage" in window && window["localStorage"] !== null;
    if(isSupported) {
      localStorage.setItem("storage", "");
      localStorage.removeItem("storage")
    }
    return isSupported
  }catch(e) {
    return false
  }
}
var allInstructions = [];
function createInstruction(x, y, frame, isDynamic) {
  var container = isDynamic ? blockContainer : allBgContainer;
  var instr = createPart(PART_INSTRUCTION_TYPE, x, y, 1, container);
  instr.setFrame(frame);
  allInstructions.push(instr);
  return instr
}
function addInstructions() {
  if(!isLevelRestarted) {
    updateBgCache()
  }
}
function disposeInstructions() {
  while(allInstructions.length > 0) {
    allInstructions.pop().dispose()
  }
}
function getCollectedStarsNum() {
  var num = 0;
  for(var i = 0;i < LEVELS_NUM;i++) {
    num += levelstates[i]
  }
  return num
}
function createExplosion(bomb) {
  var ch;
  for(var i = allChars.length - 1;i >= 0;--i) {
    ch = allChars[i];
    if(ch === bomb) {
      continue
    }
    if(!ch.physBody) {
      continue
    }
    if(ch.physBody.isStatic() && !ch.isGlass) {
      continue
    }
    if(ch.isPhysStatic && !ch.isGlass) {
      continue
    }
    if(ch.type === BOMB_TYPE && isExplosionIgnoreBombs) {
      continue
    }
    if(ch.teleportationStatus > -1) {
      continue
    }
    if(ch.isDied) {
      continue
    }
    if(ch.isMovable) {
      continue
    }
    if(ch.isAim) {
      continue
    }
    if(ch.isLand) {
      continue
    }
    CreateExplode(bomb, ch)
  }
}
function checkForLevelWin() {
  if(isLevelCompleted || isLevelFailed) {
    return
  }
  var isWin = true;
  for(var i = allHeroes.length - 1;i >= 0;i--) {
    if(!allHeroes[i].isZombie) {
      isWin = false;
      break
    }
  }
  if(isWin) {
    showLevelCompleteWin()
  }
}
function checkForTrapsLevelFail() {
  if(isLevelCompleted || isLevelFailed) {
    return
  }
  var isFailed = true;
  for(var i = allHeroes.length - 1;i >= 0;i--) {
    if(allHeroes[i].isZombie && (!allHeroes[i].isSleeps && !allHeroes[i].isInTrap)) {
      isFailed = false;
      break
    }
  }
  if(isFailed) {
    isLevelFailed = true;
    hideGameInterface(true);
    createjs.Tween.get({}).wait(1E3).call(showRestartWin);
    showLevelCompleteWin()
  }
}
function CreateExplode(bomb, ch) {
  var charBody = ch.physBody;
  var diffX = ch.vis.x - bomb.vis.x;
  var diffY = ch.vis.y - bomb.vis.y;
  var distance = Math.sqrt(diffX * diffX + diffY * diffY);
  if(ch.isGlass) {
    var bombActivDistance = bomb.glassExplodeDistance >= 0 ? bomb.glassExplodeDistance : bomb.activDistance;
    if(distance < bombActivDistance) {
      ch.breakGlass()
    }
    return
  }
  if(distance > bomb.activDistance) {
    return
  }
  var normalizedX = diffX / distance;
  var normalizedY = diffY / distance;
  var factor = Math.max(0, 1 - distance / bomb.activDistance);
  factor *= bomb.activForce * charBody.m;
  var force = v(normalizedX * factor, normalizedY * factor);
  charBody.applyImpulse(force, v(Math.random() * 10 - 5, 0));
  ch.isByPhysPosUpdate = true
}
var allBonuses = [];
var disposedBonuses = [];
var currentBon;
function initBonusManager() {
}
function createBonus(type, x, y, scaleX, scaleY, rotation, additParams) {
  var bon = getBonusFromPool(type, blockContainer, scaleX, scaleY, additParams);
  bon.setPos(x, y, rotation);
  addToArray(allBonuses, bon)
}
function disposeBonuses() {
  var length = allBonuses.length;
  var i;
  for(i = 0;i < length;i++) {
    var bon = allBonuses.pop();
    bon.dispose()
  }
}
function addToDisposedBonuses(bonus) {
  if(!isArrayContains(disposedBonuses, bonus)) {
    disposedBonuses.push(bonus)
  }
}
function getBonusFromPool(type, blockContainer, scaleX, scaleY, additParams) {
  if(disposedBonuses.length > 0) {
    var db = disposedBonuses.pop();
    db.reset(type, blockContainer, scaleX, scaleY, additParams);
    return db
  }else {
    return new BonusBase(type, blockContainer, scaleX, scaleY, additParams)
  }
}
var toDisposeBonuses = [];
function updateBonusManager() {
  for(var i = 0;i < allBonuses.length;i++) {
    allBonuses[i].tick();
    if(allBonuses[i].isCollected) {
      addToArray(toDisposeBonuses, allBonuses[i])
    }
  }
  while(toDisposeBonuses.length > 0) {
    toDisposeBonuses.pop().dispose()
  }
}
(function(window) {
  function BonusBase(typeId, parent, scaleX, scaleY, additParams) {
    var bmpAnimation = new createjs.Sprite(zoeSS);
    bmpAnimation.mouseEnabled = false;
    bmpAnimation.baseBlock = this;
    this.vis = bmpAnimation;
    this.reset(typeId, parent, scaleX, scaleY, additParams)
  }
  var p = BonusBase.prototype;
  p.reset = function(typeId, parent, scaleX, scaleY, additParams) {
    this.typeId = typeId;
    this.type = window[typeId];
    createjs.Tween.removeTweens(this.vis);
    this.tweenMaxSteps = 0;
    this.isNeedCollect = false;
    this.additParams = additParams;
    this.parent = parent;
    this.vis.isOnTop = false;
    this.vis.isOnBottom = true;
    this.vis.alpha = 1;
    this.isGhost = false;
    this.isCollected = false;
    this.animMargin = Math.random() * 30;
    this.scaleX = scaleX;
    this.scaleY = scaleY;
    this.moveTarget = null;
    this.dx = 0;
    this.dy = 0;
    this.speed = 0;
    this.distanceSq = 0;
    this.hero = null;
    this.dir = 1;
    this.distanceEndPos = 0;
    this.distanceStartPos = 0;
    this.sensorRadiusSq = 60 * 60;
    this.collectRadiusSq = 10 * 10;
    this.setVisionByType();
    this.updateVisionScale();
    parent.addChild(this.vis);
    if(!this.isGhost) {
      totalBonuses++
    }
  };
  p.setPos = function(x, y, rotation) {
    this.vis.x = x;
    this.vis.y = y;
    if(this.isGhost && this.distanceStartPos === 0) {
      this.distanceEndPos = this.scaleX * 140 - this.scaleY * 52;
      this.distanceStartPos = x - this.distanceEndPos / 2;
      this.distanceEndPos = x + this.distanceEndPos / 2
    }
    if(rotation) {
      this.vis.rotation = rotation
    }
  };
  p.updateVisionScale = function() {
    this.vis.scaleX = this.scaleX;
    this.vis.scaleY = this.scaleY;
    if(this.isGhost) {
      this.vis.scaleX = this.scaleY
    }
  };
  p.getAdditParams = function(index) {
    return this.additParams[0].split("_")[index]
  };
  p.setVisionByType = function() {
    this.vis.gotoAndStop(this.typeId);
    if(this.type === BONUS_STAR_TYPE) {
      this.vis.play();
      this.vis._animation.speed = 0.55;
      if(this.getAdditParams(0) === "2") {
        this.vis.gotoAndStop("BONUS_STAR_TYPE_2")
      }
    }
    if(this.type === BONUS_DIAMOND_TYPE) {
      this.vis.play();
      this.vis._animation.speed = 1
    }
    if(!this.vis.paused) {
      this.vis.currentAnimationFrame = Math.floor(Math.random() * 20)
    }
    if(this.type === BONUS_GHOST_TYPE) {
      this.isGhost = true;
      this.vis.play();
      this.speed = parseInt(this.getAdditParams(0)) / 10;
      this.vis._animation.speed = 0.7;
      this.sensorRadiusSq = 25 * 25
    }
  };
  p.tick = function() {
    if(this.isCollected || isGamePaused) {
      return
    }
    if(this.isGhost) {
      this.updateGhost();
      return
    }
    this.vis.scaleX = this.scaleX + Math.cos((counter + this.animMargin) / 10) / 12;
    this.vis.scaleY = this.vis.scaleX;
    if(this.moveTarget) {
      this.speed += 0.2;
      this.dx = this.moveTarget.vis.x - this.vis.x;
      this.dy = this.moveTarget.vis.y - this.vis.y;
      this.distanceSq = this.dx * this.dx + this.dy * this.dy;
      this.vis.x += this.dx / 3 * this.speed;
      this.vis.y += this.dy / 3 * this.speed;
      if(this.distanceSq < this.collectRadiusSq) {
        this.isCollected = true;
        createPrerenderedPart(this.moveTarget.vis.x, this.moveTarget.vis.y, 1, "parteffectv1", 0.9, this.moveTarget.vis);
        addScore(this.getScoreByType());
        this.checkBonusAchievByType();
        this.moveTarget = null;
        collectedBonuses++;
        playBonusPickSound()
      }
    }else {
      for(var i = 0;i < allHeroesLen;i++) {
        this.hero = allHeroes[i];
        this.dx = this.hero.vis.x - this.vis.x;
        this.dy = this.hero.vis.y - this.vis.y;
        this.distanceSq = this.dx * this.dx + this.dy * this.dy;
        if(this.distanceSq < this.sensorRadiusSq) {
          this.moveTarget = this.hero
        }
      }
    }
  };
  p.updateGhost = function() {
    this.vis.x += this.speed * this.dir * dtScale;
    if(this.vis.x > this.distanceEndPos) {
      this.dir = -1
    }
    if(this.vis.x < this.distanceStartPos) {
      this.dir = 1
    }
    for(var i = 0;i < allHeroesLen;i++) {
      this.hero = allHeroes[i];
      this.dx = this.hero.vis.x - this.vis.x;
      this.dy = this.hero.vis.y - this.vis.y;
      this.distanceSq = this.dx * this.dx + this.dy * this.dy;
      if(this.distanceSq < this.sensorRadiusSq) {
        this.hero.die()
      }
    }
  };
  p.checkBonusAchievByType = function() {
    var isAllCollected = true;
    for(var i = 0;i < allBonuses.length;i++) {
      if(!allBonuses[i].isCollected) {
        isAllCollected = false
      }
    }
    if(isAllCollected) {
    }
  };
  p.getScoreByType = function() {
    switch(this.type) {
      case BONUS_STAR_TYPE:
        return 50;
        break;
      case BONUS_DIAMOND_TYPE:
        return 150;
        break;
      case BONUS_MONEY_TYPE:
        return 100;
        break;
      default:
        return 50
    }
  };
  p.dispose = function() {
    removeFromArray(allBonuses, this);
    addToDisposedBonuses(this);
    this.vis.removeAllEventListeners();
    this.vis.stop();
    this.parent.removeChild(this.vis)
  };
  p.startCollectAnim = function(time) {
  };
  window.BonusBase = BonusBase
})(window);
var isAudioSupported = false;
var isMute = false;
function initSoundManager() {
  if(!isDesktop()) {
    createjs.Sound.registerPlugins([createjs.WebAudioPlugin])
  }
  if(isSamsungDefaultBrowser()) {
    isAudioSupported = false
  }else {
    isAudioSupported = createjs.Sound.initializeDefaultPlugins()
  }
  if(isAudioSupported) {
    manifest.push({src:"sounds/zm_main.ogg|sounds/zm_main.mp3", id:"bgMusic", data:1}, {src:"sounds/zm_click.ogg|sounds/zm_click.mp3", id:"clickSound", data:1}, {src:"sounds/zm_win.ogg|sounds/zm_win.mp3", id:"winSound", data:1}, {src:"sounds/zm_fail.ogg|sounds/zm_fail.mp3", id:"restartSound", data:1}, {src:"sounds/zm_bomb.ogg|sounds/zm_bomb.mp3", id:"explodeSound", data:1}, {src:"sounds/zm_ach.ogg|sounds/zm_ach.mp3", id:"achievSound0", data:1}, {src:"sounds/zm_win_star1.ogg|sounds/zm_win_star1.mp3", 
    id:"star1", data:1}, {src:"sounds/zm_win_star2.ogg|sounds/zm_win_star2.mp3", id:"star2", data:1}, {src:"sounds/zm_win_star3.ogg|sounds/zm_win_star3.mp3", id:"star3", data:1}, {src:"sounds/zm_coin1.ogg|sounds/zm_coin1.mp3", id:"bonus0", data:1}, {src:"sounds/zm_coin2.ogg|sounds/zm_coin2.mp3", id:"bonus1", data:1}, {src:"sounds/zm_coin3.ogg|sounds/zm_coin3.mp3", id:"bonus2", data:1}, {src:"sounds/zm_creature_death1.ogg|sounds/zm_creature_death1.mp3", id:"worldout0", data:1}, {src:"sounds/zm_creature_death2.ogg|sounds/zm_creature_death2.mp3", 
    id:"worldout1", data:1}, {src:"sounds/zm_creature_death3.ogg|sounds/zm_creature_death3.mp3", id:"worldout2", data:1}, {src:"sounds/zm_death_spikes.ogg|sounds/zm_death_spikes.mp3", id:"deathspikes0", data:1}, {src:"sounds/zm_death_spikes2.ogg|sounds/zm_death_spikes2.mp3", id:"deathspikes1", data:1}, {src:"sounds/zm_death_spikes3.ogg|sounds/zm_death_spikes3.mp3", id:"deathspikes2", data:1}, {src:"sounds/zm_death_spikes3.ogg|sounds/zm_death_spikes3.mp3", id:"deathspikes2", data:1}, {src:"sounds/zm_basement_fall.ogg|sounds/zm_basement_fall.mp3", 
    id:"basementfall", data:1}, {src:"sounds/zm_zap_death.ogg|sounds/zm_zap_death.mp3", id:"zapDeath", data:1}, {src:"sounds/zm_trap.ogg|sounds/zm_trap.mp3", id:"trapSound", data:1}, {src:"sounds/zm_slipping.ogg|sounds/zm_slipping.mp3", id:"bananaSound", data:1}, {src:"sounds/zm_conversion.ogg|sounds/zm_conversion.mp3", id:"zombieConversion", data:1}, {src:"sounds/zm_start_voice1.ogg|sounds/zm_start_voice1.mp3", id:"startVoice0", data:1}, {src:"sounds/zm_start_voice2.ogg|sounds/zm_start_voice2.mp3", 
    id:"startVoice1", data:1}, {src:"sounds/zm_start_voice3.ogg|sounds/zm_start_voice3.mp3", id:"startVoice2", data:1}, {src:"sounds/zm_teleport.ogg|sounds/zm_teleport.mp3", id:"portalAppearSound", data:2}, {src:"sounds/zm_door_down.ogg|sounds/zm_door_down.mp3", id:"doorDown", data:2}, {src:"sounds/zm_door_up.ogg|sounds/zm_door_up.mp3", id:"doorUp", data:2})
  }
}
function isSamsungDefaultBrowser() {
  var nua = navigator.userAgent;
  return nua.toLowerCase().indexOf("samsung") > -1 && nua.indexOf("Android ") > -1
}
function playSound(soundLabel, isLooped) {
  if(isMute || !isAudioSupported) {
    return
  }
  var loopNum = isLooped ? -1 : 0;
  return createjs.Sound.play(soundLabel, {interrupt:createjs.Sound.INTERRUPT_EARLY, loop:loopNum})
}
function toggleMute() {
  isWasTouch = true;
  isMute = !isMute;
  if(isMute) {
    stopBgMusic();
    stopWindSound()
  }else {
    playBgMusic()
  }
  saveMuteState()
}
var scoresSound;
function playScoresSound() {
  if(isMute || !isAudioSupported) {
    return
  }
  if(scoresSound) {
    scoresSound.play()
  }else {
    scoresSound = playSound("countScoreSound", false)
  }
}
function stopScoresSound() {
  if(!isAudioSupported) {
    return
  }
  if(scoresSound) {
    scoresSound.stop();
    scoresSound = null
  }
}
var windSound;
function playWindSound() {
  if(isMute || !isAudioSupported) {
    return
  }
  windSound = playSound("windRelease", false)
}
function stopWindSound() {
  if(!isAudioSupported) {
    return
  }
  if(windSound) {
    windSound.stop();
    windSound = null
  }
}
function playRemoveObjectSound() {
  playSound("remove_object" + Math.floor(Math.random() * 3))
}
function resetSoundOnNewLevel() {
  if(!isAudioSupported) {
    return
  }
  bonusSoundNum = 0
}
var bonusSoundNum = 0;
function playBonusPickSound() {
  playSound("bonus" + bonusSoundNum);
  bonusSoundNum++;
  if(bonusSoundNum > 2) {
    bonusSoundNum = 0
  }
}
var worldOutSoundNum = 0;
function playWorldOutSound() {
  playSound("worldout" + worldOutSoundNum);
  worldOutSoundNum++;
  if(worldOutSoundNum > 2) {
    worldOutSoundNum = 0
  }
}
var deathSpikesSoundRandomizer;
function playDeathSpikes() {
  if(!deathSpikesSoundRandomizer) {
    deathSpikesSoundRandomizer = new Chance
  }
  playSound("deathspikes" + deathSpikesSoundRandomizer.integer({min:0, max:2}))
}
var startVoiceRandomizer;
function playStartVoice() {
  if(!startVoiceRandomizer) {
    startVoiceRandomizer = new Chance
  }
  playSound("startVoice" + startVoiceRandomizer.integer({min:0, max:2}))
}
function playAchievSound() {
  playSound("achievSound0")
}
function startBgMusic() {
  isWasTouch = true;
  if(!bgMusic) {
    playBgMusic()
  }
}
var bgMusic;
function playBgMusic() {
  if(isMute || !isAudioSupported) {
    return
  }
  if(bgMusic) {
    bgMusic.resume()
  }else {
    bgMusic = playSound("bgMusic", true)
  }
}
function stopBgMusic() {
  if(!isAudioSupported) {
    return
  }
  if(bgMusic) {
    bgMusic.pause()
  }
}
var isMusicWasMuted = false;
function slowMuteBgMusic() {
  if(bgMusic) {
    isMusicWasMuted = true;
    createjs.Tween.removeTweens(bgMusic);
    bgMusic.volume = 0
  }
}
function slowShowBgMusic(waitTime) {
  if(bgMusic && isMusicWasMuted) {
    isMusicWasMuted = false;
    createjs.Tween.removeTweens(bgMusic);
    createjs.Tween.get(bgMusic).wait(waitTime).to({volume:1}, 600)
  }
}
var pauseBtnV, playMenuBtn, creditsBtn, logoImg, levelSelectContainer, interfaceRestartBtn;
var isGamePaused, levelLabel, movesLabel;
var menuEase;
function initInterface() {
  pauseBtnV = createButton(24, 24, 0.7 * 0.8, "pausebtn", onPressStandartHandler, null, onPauseUp, LOGO_LEFT_POS, LOGO_VERTICAL_ANY_POS, 1);
  interfaceRestartBtn = createButton(295, 24, 0.6 * 0.8, "restartbtn", onPressStandartHandler, null, onInterfaceRestartUp, LOGO_RIGHT_POS, LOGO_VERTICAL_ANY_POS, 1);
  levelLabel = new createjs.BitmapText("0", zoeSS);
  levelLabel.scaleX = levelLabel.scaleY = 0.25;
  levelLabel.mouseEnabled = false;
  levelLabel.y = 253;
  levelLabel.score = 0;
  levelLabel.spaceWidth = 10;
  levelLabel.postfix = "ll";
  movesLabel = new createjs.BitmapText("0", zoeSS);
  movesLabel.scaleX = movesLabel.scaleY = 0.5;
  movesLabel.mouseEnabled = false;
  movesLabel.alpha = 0.9;
  movesLabel.y = 440;
  movesLabel.spaceWidth = 13;
  movesLabel.letterSpacing = -15;
  menuEase = createjs.Ease.getElasticOut(1, 0.35);
  createMainMenu();
  createLevelSelectMenu();
  createLevelCompleteWin();
  createPauseWin();
  createAchievWin();
  createAchievGalleryMenu();
  createCreditsWin();
  creategameCompleteWin();
  createBlinkWin();
  isGamePaused = true;
  if(!isSkipMenus) {
    if(isLevelSelectShow) {
      showLevelsMenu()
    }else {
      if(isAchievGalleryShow) {
        showAchievGallery()
      }else {
        showMainMenu(false)
      }
    }
  }else {
    showGameInterface();
    if(isLevelCompleteMenuShow) {
      showLevelCompleteWin()
    }
  }
}
function updateMovesLabel() {
  movesLabel.text = "" + currentMoves
}
var comixContainer;
function showComix() {
  if(!comixContainer) {
    comixContainer = new createjs.Container;
    createButton(287, 442, 0.7, "nextlevelwin", onPressStandartHandler, comixContainer, loadLevelAfterComix)
  }
  showBgByLevelNum(0, 2);
  startBlink(400, "tint2");
  hideLevelsMenu();
  addToParent(comixContainer, container);
  showSponsorLogo(160, 445, 0.8, container, 1, LOGO_HORIZ_ANY_POS, LOGO_BOTTOM_POS, 2)
}
function loadLevelAfterComix(event) {
  onOutScale(event.target);
  if(isCursorOutMoved(event)) {
    return
  }
  playSound("clickSound");
  levelRestartsCounter = 0;
  levelsWithoutRestartsCounter = 0;
  showGameInterface();
  loadLevel(0);
  showGameField();
  removeFromParent(comixContainer)
}
var blinkWin;
function createBlinkWin() {
  blinkWin = createButton(-40, -60, 6.5, "tint2");
  blinkWin.scaleX = 4.5
}
function startBlink(animTime, frame) {
  addToParent(blinkWin, container);
  blinkWin.alpha = 1;
  blinkWin.gotoAndStop(frame);
  createjs.Tween.get(blinkWin, {override:true}).to({alpha:0}, animTime).call(removeChildOnTweenComplete)
}
function showFPSMeter() {
  if(isNeedFpsMeter) {
    addToParent(fpsText, container)
  }
  if(isNeedHelperLabel) {
    addToParent(helperLabel, container)
  }
}
function showGameInterface() {
  addToParent(pauseBtnV, container);
  addToParent(interfaceRestartBtn, container);
  addToParent(levelLabel, container);
  addToParent(movesLabel, container);
  showFPSMeter()
}
function hideGameInterface(isButtonsOnly) {
  if(pauseBtnV.parent) {
    container.removeChild(pauseBtnV)
  }
  removeFromParent(interfaceRestartBtn);
  if(!isButtonsOnly) {
    removeFromParent(levelLabel);
    removeFromParent(movesLabel)
  }
}
function setCurrentLevelLabel(levelNum) {
  levelLabel.text = "l " + (levelNum + 1)
}
function onPausePress(event) {
  if(isGamePaused || (isLevelFailed || isLevelCompleted)) {
    return
  }
  onHoverScale(event.target)
}
function onPauseUp(event) {
  onOutScale(event.target);
  if(isGamePaused || (isLevelFailed || (isLevelCompleted || levelPauseContainer.parent))) {
    return
  }
  if(isCursorOutMoved(event)) {
    return
  }
  playSound("clickSound");
  showPauseWin()
}
var menuContainer, mainMenuMuteBtn, mainMenuMoreGames, mainMenuAchievBtn;
function createMainMenu() {
  menuContainer = new createjs.Container;
  playMenuBtn = createButton(ow / 2, 371, 0.7, "playbtnup", onPlayPress, menuContainer, onPlayUp);
  creditsBtn = createButton(29, 29, 0.62, "btnbaseup", onCreditsPress, menuContainer, onCreditsUp, LOGO_LEFT_POS, LOGO_VERTICAL_ANY_POS, 1);
  logoImg = new createjs.Bitmap(files["logo_menu"]);
  setSpritePosAndAngle(logoImg, 20, 53);
  setSpriteScale(logoImg, 0.7);
  addToParent(logoImg, menuContainer);
  mainMenuAchievBtn = createButton(32, 445, 0.68, "achievbtn", onAchievGalleryPress, menuContainer, onAchievGalleryUp, LOGO_LEFT_POS, LOGO_VERTICAL_ANY_POS, 1);
  mainMenuMuteBtn = createButton(291, 29, 0.62, "musiconbtn", onMainMenuMutePress, menuContainer, onMainMenuMuteUp, LOGO_RIGHT_POS, LOGO_VERTICAL_ANY_POS, 1);
  mainMenuMoreGames = createButton(160, 454, 0.65, "moregames2v", onPressStandartHandler, menuContainer, moregamesClick);
  if(!isAudioSupported) {
    mainMenuMuteBtn.visible = false
  }
  createMainMenuTweens()
}
var MUTED_FRAME = "musicoffbtn";
var UNMUTED_FRAME = "musiconbtn";
function onMainMenuMutePress(event) {
  onHoverScale(event.target)
}
function onMainMenuMuteUp(event) {
  onOutScale(event.target);
  if(isCursorOutMoved(event)) {
    return
  }
  toggleMute();
  updateMusicIconFrame(event.target);
  playSound("clickSound")
}
function updateMusicIconFrame(btn) {
  var frame = isMute ? MUTED_FRAME : UNMUTED_FRAME;
  btn.gotoAndStop(frame)
}
function showMainMenu(isWithAnimation) {
  container.addChild(menuContainer);
  updateMusicIconFrame(mainMenuMuteBtn);
  showBgByLevelNum(0, 0);
  showFPSMeter();
  showTopLogo(0.8);
  if(!isWithAnimation) {
    return
  }
  startBlink(700, "tint2");
  isNeedCacheSizeUpdate = true
}
function showMainMenuTweenComplete(event) {
}
function hideMainMenu() {
  removeFromParent(menuContainer)
}
function hideMainMenuTweenComplete(event) {
  var cont = event.target;
  cont.alpha = 1;
  if(cont.parent) {
    container.removeChild(cont)
  }
}
function createBigWinBg(x, y, scaleX, cont) {
  var frame = "bgwinv";
  var bigbg = createButton(x, y, isLowGfx ? 2 : 1, frame, null, cont);
  bigbg.rotation = -90;
  bigbg.scaleX = isLowGfx ? scaleX * 2 : scaleX;
  return bigbg
}
function createMainMenuTweens() {
  var ease = createjs.Ease.bounceOut;
  createjs.Tween.removeTweens(playMenuBtn);
  var startScale = 0.6;
  var scaleDt = 0.15;
  playMenuBtn.scaleX = playMenuBtn.scaleY = startScale;
  createjs.Tween.get(playMenuBtn, {override:true, loop:true}).to({scaleX:startScale + scaleDt, scaleY:startScale + scaleDt}, 3E3, ease).wait(1E3).to({scaleX:startScale, scaleY:startScale}, 3E3, ease)
}
function disposeMainMenuTweens() {
  createjs.Tween.removeTweens(playMenuBtn)
}
function onPlayPress(event) {
  onHoverScale(event.target)
}
function onPlayUp(event) {
  onOutScale(event.target);
  if(isCursorOutMoved(event)) {
    return
  }
  playSound("clickSound");
  hideMainMenu();
  showLevelsMenu();
  startBgMusic()
}
function onAchievGalleryPress(event) {
  onHoverScale(event.target)
}
function onAchievGalleryUp(event) {
  onOutScale(event.target);
  if(isCursorOutMoved(event)) {
    return
  }
  playSound("clickSound");
  hideMainMenu();
  showAchievGallery()
}
function onCreditsPress(event) {
  onHoverScale(event.target);
  trace("play credits!")
}
function onCreditsUp(event) {
  onOutScale(event.target);
  if(isCursorOutMoved(event)) {
    return
  }
  playSound("clickSound");
  hideMainMenu();
  showCreditsWin()
}
function createButton(x, y, scale, visionLabel, mouseDownFunc, parent, mouseUpFunc, objHorizAlign, objVertAlign, alignDevisor) {
  var b = new createjs.Sprite(interfaceSS);
  b.snapToPixel = true;
  b.x = x;
  b.y = y;
  b.scaleX = b.scaleY = scale;
  b.gotoAndStop(visionLabel);
  b.defaultScale = scale;
  b.defaultParams = {x:x, y:y, parent:parent, scaleX:scale, scaleY:scale, rotation:0, horizAlign:objHorizAlign, vertAlign:objVertAlign, alignDevisor:alignDevisor};
  if(mouseUpFunc) {
    b.addEventListener("pressup", mouseUpFunc, false)
  }
  if(mouseDownFunc) {
    b.addEventListener("mousedown", mouseDownFunc, false);
    b.cursor = "pointer"
  }else {
    b.mouseEnabled = false
  }
  if(mouseDownFunc || mouseUpFunc) {
    var data = interfaceSS.getAnimation(visionLabel);
    if(data && (data.frames && data.frames.length > 0)) {
      var rect = interfaceSS.getFrameBounds(data.frames[0]);
      b.setBoundingBox(rect.x * scale, rect.y * scale, rect.width * scale, rect.height * scale)
    }
  }
  if(objHorizAlign) {
    addAutoAlignToObj(b)
  }
  if(parent) {
    parent.addChild(b)
  }
  return b
}
var selectMenuBackBtn, selectMenuNextBtn, selectMenuPreviousBtn;
var allLevelBtns = [];
var levelsScreen1, levelsScreen2;
function createLevelSelectMenu() {
  var cont = levelSelectContainer = new createjs.Container;
  levelSelectContainer.name = "levelselcont";
  levelsScreen1 = new createjs.Container;
  levelsScreen1.name = "levelsScreen1";
  levelsScreen2 = new createjs.Container;
  selectMenuBackBtn = createButton(60, 421, 0.72, "quitbtn", onBackToMenuPress, levelsScreen1, onBackToMenuUp);
  selectMenuNextBtn = createButton(264, 421, 0.69, "nextlevelwin", onPressStandartHandler, levelsScreen1, onNextPageUp, LOGO_HORIZ_ANY_POS, LOGO_HORIZ_ANY_POS, 1);
  selectMenuPreviousBtn = createButton(60, 421, 0.69, "backbtn", onPressStandartHandler, levelsScreen2, onPreviousPageUp, LOGO_HORIZ_ANY_POS, LOGO_HORIZ_ANY_POS, 1);
  createLevelsButtons();
  if(isNeedDebugGui) {
    if(isLevelSelectShow) {
      createLevelsBtnDebugGUI()
    }
  }
  levelSelectContainer.addChild(levelsScreen1);
  levelSelectContainer.addChild(levelsScreen2)
}
function animateLevelsButtons(startIndex) {
  for(var i = startIndex;i < startIndex + LEVELS_ON_PAGE;i++) {
    var btn = allLevelBtns[i];
    var onPageIndex = i - startIndex;
    animateButtonShow2(btn, onPageIndex * 40);
    if(btn.txtNum.parent) {
      animateButtonShow2(btn.txtNum, onPageIndex * 50 + 50)
    }
  }
}
function onNextPageUp(event) {
  var b = event.target;
  onOutScale(b);
  if(isCursorOutMoved(event)) {
    return
  }
  animateLevelsButtons(LEVELS_ON_PAGE);
  removeFromParent(levelsScreen1);
  addToParent(levelsScreen2, levelSelectContainer);
  playSound("clickSound")
}
function onPreviousPageUp(event) {
  var b = event.target;
  onOutScale(b);
  if(isCursorOutMoved(event)) {
    return
  }
  animateLevelsButtons(0);
  removeFromParent(levelsScreen2);
  addToParent(levelsScreen1, levelSelectContainer);
  playSound("clickSound")
}
var levelsBtnCreateParams = {left:{val:68, min:0, max:200}, spaceX:{val:61, min:0, max:200}, top:{val:93, min:0, max:200}, scale:{val:0.59, min:0, max:3}, spaceY:{val:62, min:0, max:200}, txtScale:{val:0.63, min:0, max:3}, txtMarginX:{val:0, min:-50, max:50}, txtMarginY:{val:15, min:-50, max:50}, openedLevels:{val:openedLevels, min:0, max:LEVELS_NUM}};
var LEVELS_ON_PAGE = 20;
function createLevelsButtons() {
  for(var i = 0;i < LEVELS_NUM;i++) {
    var p = levelsBtnCreateParams;
    var posIndex = i % LEVELS_ON_PAGE;
    var cell = posIndex % 4;
    var row = Math.floor(posIndex / 4);
    var btn = createButton(p.left.val + cell * p.spaceX.val, p.top.val + row * p.spaceY.val, p.scale.val, "lvlLabelStar0", onLevelBtnPress, i >= LEVELS_ON_PAGE ? levelsScreen2 : levelsScreen1, onLevelBtnUp);
    btn.levelNum = i;
    allLevelBtns.push(btn);
    var txtNum = createButton(btn.x, btn.y, 0.7, "lvlnum" + (i + 1), null);
    txtNum.scaleX = txtNum.scaleY = p.txtScale.val;
    txtNum.x = btn.x + p.txtMarginX.val;
    txtNum.y = btn.y + p.txtMarginY.val;
    txtNum.mouseEnabled = false;
    btn.txtNum = txtNum;
    rememberDefaultParames(btn.txtNum)
  }
}
function deleteLevelsBtn() {
  while(allLevelBtns.length > 0) {
    var lb = allLevelBtns.pop();
    removeFromParent(lb);
    removeFromParent(lb.txtNum)
  }
}
function updateLevelsButtons() {
  for(var i = 0;i < LEVELS_NUM;i++) {
    var isOpened = i <= lastopenedlvl;
    if(isOpenAllLevels) {
      isOpened = i < levelsBtnCreateParams.openedLevels.val
    }
    var frame;
    if(isOpened) {
      var stars = getStarsForLevel(i);
      frame = "lvlLabelStar" + stars
    }else {
      frame = "levelbuttonlocked"
    }
    var btn = allLevelBtns[i];
    btn.gotoAndStop(frame);
    btn.isOpened = isOpened;
    if(isOpened) {
      if(!btn.txtNum.parent) {
        btn.parent.addChild(btn.txtNum)
      }
    }else {
      if(btn.txtNum.parent) {
        btn.parent.removeChild(btn.txtNum)
      }
    }
  }
}
function onLevelBtnPress(event) {
  var b = event.target;
  onHoverScale(b);
  trace("level " + b.levelNum + " load")
}
function onLevelBtnUp(event) {
  var b = event.target;
  onOutScale(b);
  if(isCursorOutMoved(event)) {
    return
  }
  if(b.levelNum === 0) {
    showComix();
    playSound("clickSound")
  }else {
    if(b.isOpened) {
      levelRestartsCounter = 0;
      levelsWithoutRestartsCounter = 0;
      showGameInterface();
      loadLevel(b.levelNum);
      startBlink(400, "tint2");
      showGameField();
      hideLevelsMenu();
      playSound("clickSound")
    }else {
      playSound("clickSound")
    }
  }
}
function updateCacheByBtnNum(levelNum) {
}
function onBackToMenuPress(event) {
  var b = event.target;
  onHoverScale(event.target)
}
function onBackToMenuUp(event) {
  var b = event.target;
  onOutScale(event.target);
  if(isCursorOutMoved(event)) {
    return
  }
  hideLevelsMenu();
  showMainMenu(true);
  playSound("clickSound")
}
function showLevelsMenu() {
  container.addChild(levelSelectContainer);
  updateLevelsButtons();
  if(levelsScreen2.parent) {
    levelSelectContainer.removeChild(levelsScreen2)
  }
  if(!levelsScreen1.parent) {
    levelSelectContainer.addChild(levelsScreen1)
  }
  levelsScreen1.x = 0;
  levelsScreen1.alpha = 1;
  showBgByLevelNum(0, 1);
  startBlink(700, "tint2");
  showTopLogo(0.8)
}
function hideLevelsMenu() {
  createjs.Tween.removeTweens(levelSelectContainer);
  removeFromParent(levelSelectContainer)
}
function showGameField() {
  createjs.Tween.removeTweens(blockContainer);
  if(!blockContainer.parent) {
    container.addChild(blockContainer)
  }
  blockContainer.alpha = 0;
  blockContainer.visible = true;
  createjs.Tween.get(blockContainer, {override:true}).to({alpha:1}, 400);
  showTopLogo(0.8)
}
function hideGameField(isNeedLevelDispose, time) {
  isGamePaused = true;
  createjs.Tween.removeTweens(blockContainer);
  var tween = createjs.Tween.get(blockContainer).to({alpha:0, visible:false}, time ? time : 200).call(removeFromParent);
  if(isNeedLevelDispose) {
    tween.call(disposeLevelPhysics)
  }
}
function showRestartWin() {
  if(!isLevelFailed) {
    return
  }
  if(levelPauseContainer.parent) {
    return
  }
  showPauseWin(true)
}
var levelCompleteContainer, completeWinNextBtn, star1, star2, star3, completeLevelLabel, completeTotalScore;
function createLevelCompleteWin() {
  var cont = levelCompleteContainer = new createjs.Container;
  var bg = createButton(162, 265, 0.84, "lvlcompletebgnew", doNothing, cont);
  createButton(155, 213, 0.75, "levelcompletetext", doNothing, cont, null);
  createButton(162, 281, 0.7, "levelreadylabel", doNothing, cont);
  star1 = createButton(80, 106, 0.9, "completestar", doNothing, null, null);
  star1.rotation = 343;
  star2 = createButton(165, 87, 0.9, "completestar", doNothing, null, null);
  star3 = createButton(253, 105, 0.9, "completestar", doNothing, null, null);
  star3.rotation = 17;
  completeLevelLabel = new createjs.BitmapText("0", zoeSS);
  completeLevelLabel.scaleX = completeLevelLabel.scaleY = 0.62;
  completeLevelLabel.mouseEnabled = false;
  completeLevelLabel.y = 259;
  completeLevelLabel.x = 180;
  completeLevelLabel.score = 0;
  completeLevelLabel.letterSpacing = -15;
  addToParent(completeLevelLabel, cont);
  createButton(160, 424, 0.7, "moregames2v", moregamesClick, cont, null);
  completeWinNextBtn = createButton(245, 358, 0.75, "nextlevelwin", onPressStandartHandler, cont, onNextLevelUp);
  createButton(160, 358, 0.75, "restartbtn", onPressStandartHandler, cont, onCompleteRestartUp);
  createButton(80, 358, 0.78, "quitbtn", onPressStandartHandler, cont, onCompleteQuitUp)
}
function onCompleteQuitUp(event) {
  var b = event.target;
  onOutScale(event.target);
  if(isCursorOutMoved(event)) {
    return
  }
  disposeLevel();
  hideLevelCompleteWin();
  hideGameInterface();
  showMainMenu(true);
  hideGameField(false);
  hideGameInterface();
  playSound("clickSound");
  stopScoresSound();
  slowShowBgMusic(400)
}
function onCompleteRestartUp(event) {
  var b = event.target;
  onOutScale(event.target);
  if(isCursorOutMoved(event)) {
    return
  }
  playSound("clickSound");
  restartLevel();
  showGameField();
  hideLevelCompleteWin();
  stopScoresSound()
}
function onPressStandartHandler(event) {
  onHoverScale(event.target)
}
function onNextLevelUp(event) {
  var b = event.target;
  onOutScale(event.target);
  if(isCursorOutMoved(event)) {
    return
  }
  playSound("clickSound");
  saveStarsNum();
  hideLevelCompleteWin();
  handleNextLevelClick();
  stopScoresSound()
}
function saveStarsNum() {
  currentLevelStarsNum = ZERO_STAR;
  if(totalBonuses <= collectedBonuses) {
    currentLevelStarsNum = THREE_STAR
  }else {
    if(collectedBonuses >= totalBonuses / 2) {
      currentLevelStarsNum = TWO_STAR
    }else {
      if(collectedBonuses > 0) {
        currentLevelStarsNum = ONE_STAR
      }
    }
  }
  saveGame(currentLevelStarsNum)
}
function handleNextLevelClick() {
  var achievId = getNewAchievedId();
  if(achievId > -1) {
    showAchievWin(achievId)
  }else {
    if(currentLevel >= LEVELS_NUM - 1) {
      hideGameInterface();
      disposeLevel();
      showMainMenu(true)
    }else {
      showGameInterface();
      loadNextLevel();
      showGameField()
    }
    slowShowBgMusic(400)
  }
}
var currentLevelStarsNum = 0;
function showLevelCompleteWin() {
  if(isLevelCompleted || isLevelFailed) {
    return
  }
  isLevelCompleted = true;
  hideGameInterface();
  createjs.Tween.removeTweens(levelCompleteContainer);
  removeFromParent(star1);
  removeFromParent(star2);
  removeFromParent(star3);
  container.addChild(levelCompleteContainer);
  addToParent(particleContainer, container);
  levelCompleteContainer.x = 400;
  levelCompleteContainer.alpha = 0;
  createjs.Tween.get(blockContainer).wait(800).call(hideGameField);
  createjs.Tween.get(levelCompleteContainer, {override:true}).wait(900).to({alpha:1, x:0}, 1300, menuEase).call(showStars);
  totalScore += currentLevelScore + scoreToAdd;
  scoreToAdd = 0;
  totalFriends += totalEnemies;
  completeLevelLabel.text = "" + (currentLevel + 1);
  checkCompleteAchievs();
  stopWindSound();
  playSound("winSound");
  showTopLogo(0.8)
}
function sendSpilScore() {
  if(sponsorApi) {
    GameAPI.Score.submit(getOverallScore())
  }
}
function getOverallScore() {
  var score = 0;
  var i;
  for(i = 0;i < LEVELS_NUM;i++) {
    var state = levelstates[i];
    var levelScore = 0;
    if(state == ONE_STAR) {
      levelScore += 1
    }else {
      if(state == TWO_STAR) {
        levelScore += 3
      }else {
        if(state == THREE_STAR) {
          levelScore += 6
        }
      }
    }
    levelScore *= i + 1;
    score += levelScore
  }
  for(i = 0;i < ACHIEVS_NUM;i++) {
    if(allachievs[i] == ACHIEVED) {
      score += 5
    }
  }
  return score * 100
}
function checkCompleteAchievs() {
  if(getStarsForLevel(0) + getStarsForLevel(1) + getStarsForLevel(2) >= 9) {
    addAchiev(SUPER_COLLECTOR_ACHIEV)
  }
  if(currentLevel >= LEVELS_NUM - 1) {
    addAchiev(ZOMBIE_MASTER_ACHIEV)
  }
  if(getCollectedStarsNum() >= 120) {
    addAchiev(MEGA_STAR_ACHIEV)
  }
  levelsWithoutRestartsCounter++;
  if(levelsWithoutRestartsCounter >= 5) {
    addAchiev(AMAZING_GAME_ACHIEV)
  }
}
var scoreTweenLength = 0;
function showStars(event) {
  saveStarsNum();
  sendSpilScore();
  startSponsorAds();
  animateStar(star1, 20 + scoreTweenLength, 0.91, "star1");
  if(currentLevelStarsNum >= TWO_STAR) {
    animateStar(star2, 800 + scoreTweenLength, 0.91, "star2")
  }
  if(currentLevelStarsNum >= THREE_STAR) {
    animateStar(star3, 1600 + scoreTweenLength, 0.91, "star3")
  }
}
function animateStar(star, delay, scale, soundName) {
  levelCompleteContainer.addChild(star);
  star.alpha = 0;
  star.scaleX = star.scaleY = 2;
  createjs.Tween.get(star, {override:true}).wait(delay).to({alpha:1, scaleX:scale, scaleY:scale}, 700, createjs.Ease.bounceOut).call(function() {
  });
  createjs.Tween.get({x:100}).wait(delay + 200).call(function() {
    if(isLevelCompleted) {
      playSound(soundName);
      createPrerenderedPart(star.x, star.y, 1.2, "parteffectv2", 0.85, star, 0.8)
    }
  })
}
function removeFromParent(obj) {
  if(obj.parent) {
    obj.parent.removeChild(obj)
  }
}
function hideLevelCompleteWin() {
  createjs.Tween.removeTweens(star1);
  createjs.Tween.removeTweens(star2);
  createjs.Tween.removeTweens(star3);
  createjs.Tween.removeTweens(levelCompleteContainer);
  createjs.Tween.get(levelCompleteContainer).to({alpha:0, x:-400}, 200).call(removeChildOnTweenComplete);
  showGameInterface()
}
var levelPauseContainer, pauseContinueBtn, pauseMuteBtn, pauseTitle, loosemacaque, pauseQuitBtn, pauseRestartBtn, pauseMoreGamesBtn;
function createPauseWin() {
  var cont = levelPauseContainer = new createjs.Container;
  pauseTitle = createButton(ow / 2 - 2, 165, 0.8, "pausetitle", doNothing, levelPauseContainer);
  loosemacaque = createButton(158, 172, 0.81, "loosemacaque", doNothing, levelPauseContainer);
  loosemacaque.visible = false;
  pauseQuitBtn = createButton(80, 355, 0.78, "quitbtn", onPauseQuitPress, levelPauseContainer, onPauseQuitUp);
  pauseRestartBtn = createButton(237, 353, 0.72, "restartbtn", onPauseRestartPress, levelPauseContainer, onPauseRestartUp);
  pauseMuteBtn = createButton(ow / 2, 355, 0.78, "musiconbtn", onPauseMutePress, levelPauseContainer, onPauseMuteUp);
  if(!isAudioSupported) {
    pauseMuteBtn.visible = false
  }
  pauseContinueBtn = createButton(160, 255, 0.68, "playbtnup", onPauseContinuePress, levelPauseContainer, onPauseContinueUp);
  pauseMoreGamesBtn = createButton(160, 420, 0.62, "moregames2v", moregamesClick, levelPauseContainer, null)
}
function onPauseMutePress(event) {
  onHoverScale(event.target)
}
function onPauseMuteUp(event) {
  onOutScale(event.target);
  if(isCursorOutMoved(event)) {
    return
  }
  toggleMute();
  updateMusicIconFrame(event.target);
  if(!isMute) {
    playSound("clickSound")
  }
}
function onPauseRestartPress(event) {
  var b = event.target;
  onHoverScale(event.target)
}
function onPauseRestartUp(event) {
  var b = event.target;
  onOutScale(event.target);
  if(isCursorOutMoved(event)) {
    return
  }
  playSound("clickSound");
  hidePauseWin(false, false);
  showGameField();
  restartLevel()
}
function onInterfaceRestartUp(event) {
  onOutScale(event.target);
  if(isCursorOutMoved(event)) {
    return
  }
  playSound("clickSound");
  showGameField();
  restartLevel()
}
function onPauseQuitPress(event) {
  onHoverScale(event.target)
}
function onPauseQuitUp(event) {
  var b = event.target;
  onOutScale(event.target);
  if(isCursorOutMoved(event)) {
    return
  }
  playSound("clickSound");
  isGamePaused = true;
  disposeLevel();
  hidePauseWin(false, true);
  updateBgCache();
  hideGameField(false, 100);
  showMainMenu(true);
  slowShowBgMusic(400)
}
function onPauseContinuePress(event) {
  onHoverScale(event.target)
}
function onPauseContinueUp(event) {
  var b = event.target;
  onOutScale(event.target);
  if(isCursorOutMoved(event)) {
    return
  }
  playSound("clickSound");
  hidePauseWin(false, false);
  showGameField()
}
function showPauseWin(isFail) {
  if(levelPauseContainer.parent) {
    return
  }
  isGamePaused = true;
  hideGameInterface();
  updateMusicIconFrame(pauseMuteBtn);
  container.addChild(levelPauseContainer);
  pauseContinueBtn.visible = !isFail;
  loosemacaque.visible = isFail;
  pauseMuteBtn.visible = isAudioSupported;
  if(isFail) {
    if(isFailedByMovesOut) {
      pauseTitle.gotoAndStop("outofmoves")
    }else {
      pauseTitle.gotoAndStop("tryagaintitle")
    }
    setSpritePosAndAngle(pauseTitle, 158, 293);
    setSpriteScale(pauseTitle, 0.83);
    hideGameField(true, 400);
    stopWindSound();
    playSound("restartSound")
  }else {
    pauseTitle.gotoAndStop("pausetitle");
    setSpritePosAndAngle(pauseTitle, 158, 165);
    setSpriteScale(pauseTitle, 0.8);
    setSpriteScale(pauseMoreGamesBtn, 0.62);
    setSpritePosAndAngle(pauseQuitBtn, 80, 355);
    setSpritePosAndAngle(pauseRestartBtn, 237, 353)
  }
  levelPauseContainer.x = -400;
  levelPauseContainer.y = -20;
  levelPauseContainer.alpha = 0;
  createjs.Tween.get(levelPauseContainer).to({alpha:1, x:0}, 1300, menuEase);
  hideGameField(false, 50);
  showTopLogo(0.8)
}
function hidePauseWin(isRightDir, isHideInterface) {
  isGamePaused = false;
  createjs.Tween.removeTweens(levelPauseContainer);
  createjs.Tween.get(levelPauseContainer).to({alpha:0, x:400}, 300).call(removeChildOnTweenComplete);
  if(!isHideInterface) {
    showGameInterface()
  }
}
var achievContainer, raduga, achievDesc;
function createAchievWin() {
  achievContainer = new createjs.Container;
  createButton(160, 84, 1, "newachievtitle", null, achievContainer);
  raduga = createButton(160, 222, 1.1, "radugav", null, achievContainer);
  createButton(160, 262, 1.1, "newachievbgv", null, achievContainer);
  achievDesc = createButton(160, 343, 0.9, "achievdesc1", null, achievContainer);
  createButton(160, 399, 0.7, "nextlevelwin", onAchievContinuePress, achievContainer)
}
function onAchievContinuePress(event) {
  hideAchievWin();
  handleNextLevelClick();
  slowShowBgMusic(0)
}
function showAchievWin(achievId) {
  if(!achievContainer.parent) {
    container.addChild(achievContainer)
  }
  achievContainer.y = 34;
  disposeLevel();
  updateBgCache();
  hideGameInterface();
  achievDesc.gotoAndStop("achievdesc" + Math.round(achievId));
  centerSpriteToX(achievDesc, 160);
  allachievs[achievId] = ACHIEVED;
  updateSaves();
  createjs.Tween.removeTweens(achievContainer);
  achievContainer.alpha = 0;
  createjs.Tween.get(achievContainer, {override:true}).to({alpha:1}, 300).call(function() {
    playAchievSound();
    slowShowBgMusic(1200)
  });
  addSpilAward(achievId + 1);
  showTopLogo(0.8)
}
function hideAchievWin() {
  removeFromParent(achievContainer)
}
function getNewAchievedId() {
  if(achievsReadyToShow.length > 0) {
    return achievsReadyToShow.pop()
  }
  return-1
}
var achievsReadyToShow = [];
function addAchiev(achievId) {
  if(!isAlreadyAchieved(achievId)) {
    addToArray(achievsReadyToShow, achievId)
  }
}
function addSpilAward(index) {
  var award = {award:"award" + index};
  if(sponsorApi) {
  }
}
function isAlreadyAchieved(type) {
  return allachievs[type] == ACHIEVED
}
var achGalleryMenuBackBtn, achGalleryContainer, achievGalleryTotalScore;
var allAchievsLabels = [];
function createAchievGalleryMenu() {
  var cont = achGalleryContainer = new createjs.Container;
  createButton(154, 72, 0.86, "achievmenutitle", doNothing, cont);
  createAchievLabels();
  achGalleryMenuBackBtn = createButton(ow / 2, 420, 0.7, "quitbtn", onPressStandartHandler, cont, onAchievGalleryBackUp)
}
function createAchievLabels() {
  for(var i = 0;i < ACHIEVS_NUM;i++) {
    var row = i;
    var marginY = 45;
    var bg = createButton(160, 130 + row * marginY, 0.7, "achievback", doNothing, achGalleryContainer, null);
    var btn = createButton(160, 130 + row * marginY, 0.6, "achievclosed", doNothing, achGalleryContainer, null);
    allAchievsLabels.push(btn);
    btn.bg = bg
  }
}
var achievDeskMargins = [153, 153, 153, 153, 153, 153];
function updateAchievLabels() {
  for(var i = 0;i < ACHIEVS_NUM;i++) {
    var isOpened = allachievs[i] == ACHIEVED;
    var frame, bgframe;
    if(isOpened) {
      frame = "achievdesc" + i.toString();
      bgframe = "achievback"
    }else {
      frame = "achievclosed";
      bgframe = "achievlockedbg"
    }
    var btn = allAchievsLabels[i];
    btn.x = isOpened ? achievDeskMargins[i] : 153;
    btn.bg.gotoAndStop(bgframe);
    btn.gotoAndStop(frame)
  }
}
function onAchievGalleryBackUp(event) {
  onOutScale(event.target);
  if(isCursorOutMoved(event)) {
    return
  }
  playSound("clickSound");
  hideAchievGallery();
  showMainMenu(true)
}
function showAchievGallery() {
  container.addChild(achGalleryContainer);
  updateAchievLabels();
  achGalleryContainer.x = 0;
  achGalleryContainer.alpha = 1;
  showBgByLevelNum(0, 0, 1.2);
  startBlink(700, "tint2");
  showTopLogo(0.8)
}
function hideAchievGallery() {
  createjs.Tween.removeTweens(achGalleryContainer);
  createjs.Tween.get(achGalleryContainer, {override:true}).to({alpha:0, x:400}, 200).call(uncacheAndRemove)
}
var creditsContainer;
function createCreditsWin() {
  var cont = creditsContainer = new createjs.Container;
  createButton(ow / 2, 418, 0.72, "quitbtn", onCreditsQuitPress, cont, onCreditsQuitUp);
  createButton(160, 100, 0.8, "creditstitle", doNothing, cont);
  createButton(ow / 2, 320, 0.8, "creditspersons", doNothing, cont);
  createButton(160, 177, 0.75, "biglimetxt", doNothing, cont)
}
function doNothing(e) {
}
function onSiteLinkPress(event) {
  window.open("http://porubov.com", "_blank")
}
function onCreditsLinkPress(event) {
  window.location = "mailto:seddas@gmail.com?subject=BattleFish"
}
function onCreditsQuitPress(event) {
  onHoverScale(event.target)
}
function onCreditsQuitUp(event) {
  onOutScale(event.target);
  if(isCursorOutMoved(event)) {
    return
  }
  playSound("clickSound");
  hideCreditsWin();
  showMainMenu(true)
}
function showCreditsWin() {
  container.addChild(creditsContainer);
  creditsContainer.x = 0;
  creditsContainer.alpha = 1;
  showBgByLevelNum(0, 0);
  startBlink(700, "tint2")
}
function hideCreditsWin() {
  removeFromParent(creditsContainer)
}
var gameCompleteContainer, collectedStarsTxt;
function creategameCompleteWin() {
  gameCompleteContainer = new createjs.Container;
  createButton(ow / 2, 310, 1, "nextlevelwin", ongameCompleteQuitPress, gameCompleteContainer, ongameCompleteQuitUp);
  createButton(ow / 2, 237, 1, "levelinstruction8", null, gameCompleteContainer);
  createButton(ow / 2, 105, 1, "allcollectedstars", null, gameCompleteContainer);
  createButton(ow / 2, 30, 1, "gamecompletedTitle", null, gameCompleteContainer);
  collectedStarsTxt = new createjs.BitmapText(getCollectedStarsNum().toString(), interfaceSS);
  collectedStarsTxt.letterSpacing = -7;
  collectedStarsTxt.x = 80;
  collectedStarsTxt.y = 121;
  collectedStarsTxt.mouseEnabled = false;
  gameCompleteContainer.addChild(collectedStarsTxt);
  createButton(260, 335, 0.7, "moregamesbtn", moregamesClick, gameCompleteContainer, null)
}
function ongameCompleteQuitPress(event) {
  var b = event.target;
  b.scaleX = b.scaleY = 1.2
}
function ongameCompleteQuitUp(event) {
  var b = event.target;
  onOutScale(event.target);
  if(isCursorOutMoved(event)) {
    return
  }
  playSound("clickSound");
  hidegameCompleteWin();
  showMainMenu(true)
}
var isGameCompleteScreenShow = false;
function showGameCompleteWin() {
  isGameCompleteScreenShow = true;
  container.addChild(gameCompleteContainer);
  collectedStarsTxt.text = getCollectedStarsNum().toString();
  gameCompleteContainer.x = 400;
  gameCompleteContainer.alpha = 0;
  createjs.Tween.get(gameCompleteContainer, {override:true}).to({alpha:1, x:0}, 1300, createjs.Ease.elasticOut)
}
function hidegameCompleteWin() {
  isGameCompleteScreenShow = false;
  updateMobileBrowserParams();
  createjs.Tween.removeTweens(gameCompleteContainer);
  createjs.Tween.get(gameCompleteContainer, {override:true}).to({alpha:0, x:400}, 200).call(removeChildOnTweenComplete)
}
function uncacheAndRemove(event) {
  var screen = event.target;
  if(screen.parent) {
    screen.parent.removeChild(screen)
  }
}
function removeChildOnTweenComplete(event) {
  var screen = event.target;
  if(screen.parent) {
    screen.parent.removeChild(screen)
  }
}
function isTweened(obj) {
  return createjs.Tween.hasActiveTweens(obj)
}
var hitPoint;
function isCursorOutMoved(event) {
  if(!isDesktop()) {
    return false
  }
  hitPoint = event.target.globalToLocal(event.stageX, event.stageY);
  return!event.target.hitTest(hitPoint.x, hitPoint.y)
}
function updateScoreLabel(score) {
}
var rotatedDecors = [];
function interfaceTick() {
  for(var i = 0;i < rotatedDecors.length;i++) {
    rotatedDecors[i].rotation += 3 * dtScale
  }
  if(raduga) {
    raduga.rotation += dtScale;
    raduga.rotation = raduga.rotation % 360
  }
}
function updateInterfacePositions() {
  if(isNeedFpsMeter) {
    fpsText.x = ow - 32 - deltaForHLeft();
    fpsText.y = deltaForVTop() / 2
  }
  movesLabel.x = 5 + deltaForHLeft();
  updateLogoPos();
  updateAutoAlign();
  if(isLevelEditor && isNeedDebugGui) {
    updateDebugGui()
  }
}
var stage, exportRoot, canvas;
var rect;
var container, preload, rotationContainer, particleContainer;
var winWidth;
var winHeight;
var scaleFactor = 1;
var styleScaleFactor = 1;
var minW = 320;
var minH = 480;
var ow = minW;
var oh = minH;
var maxW = 390;
var maxH = 480;
var desctopMaxW = maxW;
var desctopMaxH = maxH;
var viewportW = minW;
var viewportH = minH;
var stageLeft, stageTop;
var isHighDPI = false;
function initResizeManager() {
  isHighDPI = checkForHiDPI();
  if(isSamsungDefaultBrowser()) {
    isHighDPI = false
  }
  setCorrectViewPort();
  addPreventScrollHandlers();
  window.addEventListener("resize", onWindowResize);
  document.addEventListener("touchstart", PreventScrollTouch);
  window.onorientationchange = orientChange;
  window.addEventListener("scroll", function() {
    if(document.activeElement === document.body && window.scrollY > 0) {
      document.body.scrollTop = 0;
      scrollWinToTop()
    }
  }, true);
  onGameResize();
  setTimeout(scrollWinToTop, 100);
  setTimeout(scrollWinToTop, 1E3);
  setTimeout(scrollWinToTop, 2E3)
}
var isWasPaused = null;
var topVisionLine;
var zoomFactor;
function onGameResize() {
  scrollWinToTop();
  var w = window.innerWidth;
  var h = window.innerHeight;
  winHeight = h;
  zoomFactor = 1;
  if(isLowGfx) {
    zoomFactor = 1.2
  }
  if(isDesktop()) {
    isHighDPI = true
  }
  if(isHighDPI) {
    zoomFactor = 0.5
  }
  var zoomScaleFactor = 1;
  if(zoomFactor <= 1) {
    styleScaleFactor = Math.min(w / minW, h / minH)
  }else {
    styleScaleFactor = Math.min(w / zoomFactor / minW, h / zoomFactor / minH);
    zoomScaleFactor = zoomFactor
  }
  w = w / zoomFactor;
  h = h / zoomFactor;
  var scaleCommand = "scale(" + zoomScaleFactor + "," + zoomScaleFactor + ")";
  canvas.style["transform"] = scaleCommand;
  canvas.style["msTransform"] = scaleCommand;
  canvas.style["MozTransform"] = scaleCommand;
  canvas.style["WebkitTransform"] = scaleCommand;
  canvas.style["OTransform"] = scaleCommand;
  var newW = Math.min(w * (zoomFactor > 1 ? 1 : zoomFactor), maxW * styleScaleFactor);
  var newH = Math.min(h * (zoomFactor > 1 ? 1 : zoomFactor), maxH * styleScaleFactor);
  var diffH = newH / styleScaleFactor - maxH;
  stage.canvas.height = maxH + diffH;
  var diffW = newW / styleScaleFactor - maxW;
  stage.canvas.width = maxW + diffW;
  stage.canvas.width /= zoomFactor;
  stage.canvas.height /= zoomFactor;
  container.scaleX = container.scaleY = 1 / zoomFactor;
  scaleFactor = 1 / zoomFactor;
  stage.canvas.style.width = newW + "px";
  stage.canvas.style.height = newH + "px";
  stage.canvas.style.marginTop = "0px";
  stage.canvas.style.marginLeft = "0px";
  stageLeft = Math.floor((w * zoomFactor - newW) / 2);
  stage.canvas.style.left = stageLeft + "px";
  stageTop = Math.floor((h * zoomFactor - newH) / 2);
  stage.canvas.style.top = stageTop + "px";
  viewportH = newH / styleScaleFactor;
  viewportW = newW / styleScaleFactor;
  stage.autoClear = false;
  topVisionLine = -(viewportH - oh);
  container.x = container.y = 0;
  container.x = -deltaForHLeft() / zoomFactor;
  if(splashContainer) {
    splashContainer.scaleX = container.scaleX;
    splashContainer.scaleY = container.scaleY;
    splashContainer.x = container.x;
    splashContainer.y = container.y / 2
  }
  winWidth = w;
  winHeight = h;
  timer = null;
  if(loaderBar) {
    loaderBar.y = viewportH / 2;
    if(loaderBar.parent) {
      stage.autoClear = true
    }
  }
  if(isAllFilesLoaded && isGameInited) {
    updateInterfacePositions()
  }
  isNeedCacheSizeUpdate = true;
  if(isPhysicsDebugDraw && debugDraw) {
    debugCanvas.width = stage.canvas.width;
    debugCanvas.height = stage.canvas.height;
    debugCanvas.style.width = stage.canvas.style.width;
    debugCanvas.style.height = stage.canvas.style.height;
    debugCanvas.style.top = stage.canvas.style.top;
    debugCanvas.style.left = stageLeft + container.x * styleScaleFactor / 2 + "px";
    debugCanvas.style.marginTop = container.y + blockContainer.y * styleScaleFactor + "px"
  }
  stage.update()
}
function deltaForVCenter() {
  return-(viewportH - oh) / 2
}
function deltaForVTop() {
  return-(viewportH - oh)
}
function deltaForHLeft() {
  return-(viewportW - ow) / 2
}
function getMaxLeft() {
  return-(maxW - ow) / 2
}
function getMaxRight() {
  return maxW + getMaxLeft()
}
function getMaxTop() {
  return-(maxH - oh)
}
function orientChange(event) {
  scrollWinToTop();
  setTimeout(scrollWinToTop, 50);
  if(document.activeElement === document.body && window.scrollY > 0) {
    document.body.scrollTop = 0
  }
  onWindowResize(null)
}
function scrollWinToTop() {
  window.scrollTo(0, 0)
}
function PreventScrollTouch(e) {
  window.scrollTo(0, 0);
  if(window.innerHeight != winHeight) {
    onWindowResize(null)
  }
  e.preventDefault();
  e.stopPropagation();
  e.cancelBubble = true;
  e.returnValue = false;
  return false
}
var timer;
function onWindowResize(event) {
  setTimeout(scrollWinToTop, 1);
  clearTimeout(timer);
  setTimeout(onGameResize, 100);
  setTimeout(onGameResize, 1E3)
}
function getURLParameter(name) {
  return decodeURIComponent(((new RegExp("[?|&]" + name + "=" + "([^&;]+?)(&|#|;|$)")).exec(location.search) || [, ""])[1].replace(/\+/g, "%20")) || null
}
function setCorrectViewPort() {
  if(isDefaultAndroid()) {
    return
  }
  var metas = document.getElementsByTagName("meta");
  for(var i = 0;i < metas.length;i++) {
    if(metas[i].getAttribute("name") && metas[i].getAttribute("name") == "viewport") {
      metas[i].parentNode.removeChild(metas[i]);
      trace("remove meta!")
    }
  }
  var meta = document.createElement("meta");
  meta.name = "viewport";
  meta.content = "width=device-width, minimal-ui, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=0";
  document.getElementsByTagName("head")[0].appendChild(meta);
  trace("new meta!")
}
var isPreventScroll = true;
function addPreventScrollHandlers() {
  document.addEventListener("touchstart", touchPreventHandler, false);
  document.addEventListener("touchmove", touchPreventHandler, false);
  document.addEventListener("touchend", touchPreventHandler, false);
  document.body.addEventListener("touchstart", touchPreventHandler, false);
  document.body.addEventListener("touchmove", touchPreventHandler, false);
  document.body.addEventListener("touchend", touchPreventHandler, false)
}
function touchPreventHandler(e) {
  if(isPreventScroll) {
    e.preventDefault();
    return false
  }
}
function checkForHiDPI() {
  if(window.hasOwnProperty("devicePixelRatio")) {
    if(window.devicePixelRatio >= 2) {
      return true
    }
  }
  return false
}
function isMobileDetected(a) {
  return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|android|ipad|playbook|silk|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od|ad)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 
  4))
}
var MyGame = {};
var images, files;
MyGame.init = function() {
  canvas = document.getElementById("canvas");
  images = images || {};
  files = files || {};
  stage = new createjs.Stage("canvas");
  if(isLevelEditor && isNeedDebugGui) {
    initDebugGui()
  }
  container = new createjs.Container;
  container.isRoot = true;
  container.width = ow;
  container.height = oh;
  stage.addChild(container);
  detectBrowser();
  blockContainer = new createjs.Container;
  splashContainer = new createjs.Container;
  splashContainer.width = ow;
  splashContainer.height = oh;
  particleContainer = new createjs.Container;
  rotationContainer = new createjs.Container;
  rotationContainer.width = ow;
  rotationContainer.height = oh;
  initResizeManager();
  createjs.Touch.enable(stage, true);
  if(isDesktop()) {
    stage.enableMouseOver(20)
  }
  stage.mouseMoveOutside = true;
  if(!isDesktop()) {
    stage.enableDOMEvents(false)
  }
  if(isSamsungDefaultBrowser()) {
    canvas.parentNode.removeChild(canvas);
    var notifier = document.getElementById("chromeNotify");
    notifier.style.visibility = "visible";
    return
  }else {
    initLoaders()
  }
  stage.update();
  var loader = document.getElementById("loader");
  if(loader && loader.parentNode) {
    loader.parentNode.removeChild(loader)
  }
  onGameResize();
  initSpilApi()
};
function isDesktop() {
  return isDesktopBrowser
}
function updateMobileBrowserParams() {
  MAX_PARTICLES_ON_SCREEN = isDesktopBrowser ? 50 : 20
}
function detectBrowser() {
  isDesktopBrowser = !isMobileDetected(navigator.userAgent || (navigator.vendor || window.opera));
  var isMobileParam = getURLParameter("mobile");
  if(isMobileParam) {
    if(parseInt(isMobileParam) == 1) {
      isDesktopBrowser = false
    }
  }else {
  }
  updateMobileBrowserParams()
}
var loaderBar, bar, loaderWidth;
var barHeight = 20;
function initLoaders() {
  var borderPadding = 10;
  var loaderColor = createjs.Graphics.getRGB(247, 247, 247);
  loaderBar = new createjs.Container;
  bar = new createjs.Shape;
  bar.graphics.beginFill(loaderColor).drawRect(0, 0, 1, barHeight).endFill();
  loaderWidth = 300;
  var bgBar = new createjs.Shape;
  var padding = 10;
  bgBar.graphics.setStrokeStyle(2).beginStroke(loaderColor).drawRect(-padding / 2, -padding / 2, loaderWidth + padding, barHeight + padding);
  loaderBar.x = container.width - loaderWidth >> 1;
  loaderBar.y = container.height - barHeight >> 1;
  loaderBar.addChild(bar, bgBar);
  container.addChild(loaderBar);
  initSoundManager();
  preload = new createjs.LoadQueue(true, "assets/");
  preload.installPlugin(createjs.Sound);
  preload.addEventListener("progress", handleOverallProgress);
  preload.addEventListener("complete", handleComplete);
  preload.addEventListener("fileload", handleFileLoad);
  if(isLoadAnimFromJSON) {
    manifest.push({src:"zombiemarketassets.json", id:"anim_json"})
  }
  preload.loadManifest(manifest);
  createjs.Ticker.timingMode = createjs.Ticker.RAF_SYNCHED;
  if(isDefaultAndroid()) {
    createjs.Ticker.timingMode = createjs.Ticker.TIMEOUT
  }
  createjs.Ticker.setFPS(FPS)
}
function isDefaultAndroid() {
  var nua = navigator.userAgent;
  return nua.indexOf("Mozilla/5.0") > -1 && (nua.indexOf("Android ") > -1 && nua.indexOf("AppleWebKit") > -1 && !(nua.indexOf("Chrome") > -1))
}
function handleOverallProgress(event) {
  if(event.total != 0) {
    var progress = event.loaded / event.total;
    bar.scaleX = progress * loaderWidth;
    stage.update()
  }
}
var fpsText, helperLabel;
var zoeSS, interfaceSS, bgSS;
var isPreloaderLogoReady = false;
function handleFileLoad(event) {
  if(event.item.type == "image") {
    images[event.item.id] = event.result
  }
  files[event.item.id] = event.result
}
function sponsorClick(event) {
  window.open(SPONSOR_URL, "_blank")
}
function createRotationScreen() {
  var rotScreen = new createjs.Sprite(bgSS);
  rotScreen.gotoAndStop("rotateScreen");
  rotScreen.x = 30;
  rotationContainer.addChild(rotScreen)
}
var isAllFilesLoaded = false;
function handleComplete(event) {
  if(isAllFilesLoaded) {
    return
  }
  isAllFilesLoaded = true;
  if(isLogoReady || isSponsorLogoError) {
    startGame()
  }
}
function startGame() {
  if(isGameInited) {
    return
  }
  removeFromParent(loaderBar);
  loaderBar = null;
  configureSpritesheets();
  if(isDefaultAndroid()) {
    isLowGfx = true
  }
  createRotationScreen();
  createBG();
  loadSaves();
  initLevelManager();
  initBonusManager();
  initParticleManager();
  if(isNeedFpsMeter) {
    fpsText = new createjs.BitmapText("1", interfaceSS);
    fpsText.scaleX = fpsText.scaleY = 0.6;
    fpsText.letterSpacing = -7;
    fpsText.x = ow - 27;
    container.addChild(fpsText)
  }
  initInterface();
  isGameInited = true;
  onGameResize();
  if(isSkipMenus) {
    if(isLastLevelLoad) {
      loadLevel(allLevels.length - 1)
    }else {
      loadLevel(isDesignerSettingsPreferred ? editorLevelToLoad : autoLevelToLoad)
    }
  }
  stage.update();
  createjs.Ticker.addEventListener("tick", tick);
  initEditorHandlers();
  initCheatHandlers();
  initVisibilityChanger();
  if(isGetAllProperties) {
    getAllProperties()
  }
}
function initCheatHandlers() {
  if(!isCheatVersion) {
    return
  }
  KeyboardJS.on("1", null, addAward1);
  KeyboardJS.on("2", null, addAward2);
  KeyboardJS.on("3", null, addAward3);
  KeyboardJS.on("4", null, addAward4);
  KeyboardJS.on("5", null, addAward5)
}
function addAward1() {
  addSpilAward(1)
}
function addAward2() {
  addSpilAward(2)
}
function addAward3() {
  addSpilAward(3)
}
function addAward4() {
  addSpilAward(4)
}
function addAward5() {
  addSpilAward(5)
}
var splashContainer;
function startSplash() {
  if(isSkipSplash || isSponsorLogoError) {
    return
  }
  if(!splashContainer) {
    return
  }
  if(splashContainer.parent) {
    return
  }
  if(!rotationContainer.parent) {
    removeFromParent(container);
    stage.addChild(splashContainer);
    createjs.Tween.get(splashContainer).wait(3E3).call(addContainer).to({alpha:0}, 200).call(disposeSplash);
    trace("splash");
    stage.autoClear = true
  }
}
function addContainer(event) {
  stage.addChildAt(container, 0)
}
function disposeSplash(event) {
  removeFromParent(splashContainer);
  splashContainer = null;
  stage.autoClear = winWidth > maxW * scaleFactor || winHeight > maxH * scaleFactor
}
function createSplashScreen() {
  var splashimg = new createjs.Sprite(zoeSS);
  splashimg.gotoAndStop("splashlogo");
  splashimg.x = ow / 2;
  splashimg.y = oh / 2;
  splashimg.scaleX = splashimg.scaleY = 0.8;
  splashimg.mouseEnabled = true;
  splashContainer.addChild(splashimg)
}
function initEditorHandlers() {
  if(isLevelEditor) {
    stage.addEventListener("stagemousedown", handlePress)
  }
}
function updateBgCache() {
}
var allBgs, allBgContainer;
var isNeedCacheSizeUpdate = false;
function createBG() {
  allBgs = [];
  allBgContainer = new createjs.Container;
  container.addChild(allBgContainer);
  allBgs.push(createBitmapFromFile("bg1", -35, 0, 0.84, null));
  allBgs.push(createBitmapFromFile("bg2", -35, 0, 0.84, null));
  allBgs.push(createBitmapFromFile("comixbg", -44, 0, 0.84, null));
  allBgContainer.mouseEnabled = false
}
var nameCounter = 0;
function handlePress(event) {
  if(!isLevelEditor) {
    return
  }
  var type = -1;
  if(KeyboardJS.isPressed("n")) {
    loadNextLevel()
  }
  if(KeyboardJS.isPressed("l")) {
    showLevelCompleteWin()
  }
  if(KeyboardJS.isPressed("a")) {
    showAchievWin(ZOMBIE_KILLER_ACHIEV)
  }
  if(KeyboardJS.isPressed("u")) {
    updateBgCache()
  }
  if(KeyboardJS.isPressed("g")) {
    showGameCompleteWin()
  }
  if(KeyboardJS.isPressed("r")) {
    isLevelFailed = true;
    showRestartWin()
  }
}
function configureSpritesheets() {
  if(isLoadAnimFromJSON) {
    zoeCFG = eval(files["anim_json"])
  }
  validateSpritesheetCFG(zoeCFG, "zoespritesheet", false, 0);
  zoeSS = new createjs.SpriteSheet(zoeCFG);
  interfaceSS = zoeSS;
  bgSS = zoeSS
}
function validateSpritesheetCFG(cfg, sheetId, isNeedBoundsResize, frameBoundSize) {
  var imgWidth = images[sheetId].width;
  var imgHeight = images[sheetId].height;
  var allFrames = cfg["frames"];
  var len = allFrames.length;
  var f;
  for(var i = 0;i < len;i++) {
    f = allFrames[i];
    if(isNeedBoundsResize) {
      f[2] = f[2] - frameBoundSize * 2;
      f[3] = f[3] - frameBoundSize * 2
    }
    if(f[0] + f[2] > imgWidth) {
      f[2] = imgWidth - f[0]
    }
    if(f[1] + f[3] > imgHeight) {
      f[3] = imgHeight - f[1]
    }
    if(f[0] < 0) {
      f[0] = 0
    }
    if(f[1] < 0) {
      f[1] = 0
    }
  }
}
var counter = 0;
var animTicker = 0;
var toDisposePhysicsBodies = [];
var toDisposeChars = [];
var clickedChars = [];
var dtScale = 1;
var lastDelta = 0;
var FPS = 30;
var GAME_FPS = 30;
var defaultDelta = 1E3 / GAME_FPS;
var DEFAULT_WORLD_STEP = 1 / GAME_FPS;
var allHeroesLen = 0;
var lastTime = 0;
var data;
var step = 0;
function tick(event) {
  if(!isDesktop() && isPageLeaved) {
    return
  }
  dtScale = event.delta / defaultDelta;
  if(!dtScale || dtScale <= 0) {
    dtScale = 1
  }
  if(dtScale > 2) {
    dtScale = 2
  }
  lastDelta = event.delta;
  counter++;
  animTicker++;
  levelStartTimer++;
  if(waitLaunchTouchTimer >= 0) {
    waitLaunchTouchTimer--
  }
  while(toDisposePhysicsBodies.length > 0) {
    var body = toDisposePhysicsBodies.pop();
    destroyBody(body)
  }
  while(toDisposeChars.length > 0) {
    currentChar = toDisposeChars.pop();
    currentChar.dispose()
  }
  while(clickedChars.length > 0) {
    currentChar = clickedChars.pop();
    if(currentChar.type === BOMB_TYPE) {
      currentChar.bombClick()
    }else {
      if(currentChar.type === FAN_TYPE) {
        currentChar.toggleFan()
      }else {
        if(currentChar.isGlass) {
          currentChar.breakGlass()
        }else {
          if(currentChar.physBody) {
            awakeAllBodies(currentChar);
            currentChar.removeFromField()
          }
        }
      }
    }
  }
  if(!isGamePaused) {
    step = DEFAULT_WORLD_STEP * (dtScale > 1.2 ? 1.2 : dtScale);
    space.step(step / 2);
    space.step(step / 2)
  }else {
  }
  updateDebugDrawer();
  allHeroesLen = allHeroes.length;
  for(var i = allChars.length - 1;i >= 0;--i) {
    allChars[i].tick()
  }
  for(var i = allButtons.length - 1;i >= 0;--i) {
    allButtons[i].postButtonUpdate()
  }
  interfaceTick();
  updateBonusManager();
  updatePartManager();
  interfaceTick();
  if(isGameCompleteScreenShow) {
    MAX_PARTICLES_ON_SCREEN = 30;
    if(animTicker % Math.floor(FPS / 6) == 0) {
      createPartExplode(Math.random() * ow, Math.random() * oh, 6, PART_STAR_TYPE, gameCompleteContainer)
    }
  }
  if(isNeedFpsMeter) {
    if(counter % FPS == 0) {
      fpsText.text = Math.floor(createjs.Ticker.getMeasuredFPS()).toString()
    }
  }
  if(counter > 30 && isNeedCacheSizeUpdate) {
    isNeedCacheSizeUpdate = false;
    if(isWithCache) {
      allBgContainer.cache(0, 0, ow + 1, oh + 1, 2)
    }
  }
  var delta = 0;
  if(scoreToAdd > 0) {
    delta = Math.round(scoreToAdd / 7);
    currentLevelScore += delta;
    scoreToAdd -= delta;
    updateScoreLabel(currentLevelScore)
  }
  checkForFailByMovesOut();
  stage.update()
}
var failByMovesTimer = 0;
var isFailedByMovesOut = false;
var OUT_OF_MOVES_MAX_SPEED = 1;
var OUT_OF_MOVES_FRAMES_NUM = 0.5 * FPS;
function checkForFailByMovesOut() {
  if(isLevelFailed || (isGamePaused || isLevelCompleted)) {
    return
  }
  if(currentMoves > 0) {
    return
  }
  var isHeroMoves = false;
  var ch;
  allHeroesLen = allHeroes.length;
  for(var i = 0;i < allHeroesLen;i++) {
    ch = allHeroes[i];
    if(ch.isTransforming || ch.teleportationStatus >= 0) {
      isHeroMoves = true;
      break
    }
    if(ch.physBody && (Math.abs(ch.physBody.vx) > OUT_OF_MOVES_MAX_SPEED || Math.abs(ch.physBody.vy) > OUT_OF_MOVES_MAX_SPEED)) {
      isHeroMoves = true;
      break
    }
  }
  if(isHeroMoves) {
    failByMovesTimer = 0
  }else {
    failByMovesTimer++
  }
  if(failByMovesTimer > OUT_OF_MOVES_FRAMES_NUM) {
    isFailedByMovesOut = true;
    isLevelFailed = true;
    showPauseWin(true)
  }
}
function updateDebugDrawer() {
  if(isPhysicsDebugDraw && debugDraw) {
    debugDraw.draw()
  }
}
function trace(obj) {
  if(isLevelEditor) {
    console.log(obj)
  }
}
var currentBgIndex = 0;
function showBgByLevelNum(levelNum, forceIndex, scaleY) {
  if(forceIndex != undefined) {
    currentBgIndex = forceIndex
  }else {
    currentBgIndex = allBgIndexes[levelNum]
  }
  allBgContainer.removeAllChildren();
  addToParent(allBgs[currentBgIndex], allBgContainer)
}
;
